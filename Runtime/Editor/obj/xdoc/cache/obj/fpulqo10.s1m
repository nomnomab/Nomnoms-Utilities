id: cs.temp.dll
language: CSharp
name:
  Default: cs.temp.dll
qualifiedName:
  Default: cs.temp.dll
type: Assembly
modifiers: {}
items:
- id: NomUtils.General
  commentId: N:NomUtils.General
  language: CSharp
  name:
    CSharp: NomUtils.General
    VB: NomUtils.General
  nameWithType:
    CSharp: NomUtils.General
    VB: NomUtils.General
  qualifiedName:
    CSharp: NomUtils.General
    VB: NomUtils.General
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: NomUtils.General.CollectionUtility
    commentId: T:NomUtils.General.CollectionUtility
    language: CSharp
    name:
      CSharp: CollectionUtility
      VB: CollectionUtility
    nameWithType:
      CSharp: CollectionUtility
      VB: CollectionUtility
    qualifiedName:
      CSharp: NomUtils.General.CollectionUtility
      VB: NomUtils.General.CollectionUtility
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: NomUtils.General
    source:
      id: CollectionUtility
      path: ''
      startLine: 78
    syntax:
      content:
        CSharp: public static class CollectionUtility
        VB: Public Module CollectionUtility
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: NomUtils.General.CollectionUtility.GetInterpolatedIndex(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
      commentId: M:NomUtils.General.CollectionUtility.GetInterpolatedIndex(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: GetInterpolatedIndex(Int32, Int32, Int32, Int32, Int32)
        VB: GetInterpolatedIndex(Int32, Int32, Int32, Int32, Int32)
      nameWithType:
        CSharp: CollectionUtility.GetInterpolatedIndex(Int32, Int32, Int32, Int32, Int32)
        VB: CollectionUtility.GetInterpolatedIndex(Int32, Int32, Int32, Int32, Int32)
      qualifiedName:
        CSharp: NomUtils.General.CollectionUtility.GetInterpolatedIndex(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)
        VB: NomUtils.General.CollectionUtility.GetInterpolatedIndex(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.General
      source:
        id: GetInterpolatedIndex
        path: ''
        startLine: 88
      summary: "\nGets the interpolated index between two differently sized collections.\n"
      example: []
      syntax:
        content:
          CSharp: public static int GetInterpolatedIndex(int index, int fromLowerBounds, int fromUpperBounds, int toLowerBounds, int toMax)
          VB: Public Shared Function GetInterpolatedIndex(index As Integer, fromLowerBounds As Integer, fromUpperBounds As Integer, toLowerBounds As Integer, toMax As Integer) As Integer
        parameters:
        - id: index
          type: System.Int32
          description: Index in collection A
        - id: fromLowerBounds
          type: System.Int32
          description: Lower bounds in collection A
        - id: fromUpperBounds
          type: System.Int32
          description: Upper bounds in collection A
        - id: toLowerBounds
          type: System.Int32
          description: Lower bounds in collection B
        - id: toMax
          type: System.Int32
          description: Upper bounds in collection B
        return:
          type: System.Int32
          description: ''
      overload: NomUtils.General.CollectionUtility.GetInterpolatedIndex*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: NomUtils.General.EnumUtility
    commentId: T:NomUtils.General.EnumUtility
    language: CSharp
    name:
      CSharp: EnumUtility
      VB: EnumUtility
    nameWithType:
      CSharp: EnumUtility
      VB: EnumUtility
    qualifiedName:
      CSharp: NomUtils.General.EnumUtility
      VB: NomUtils.General.EnumUtility
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: NomUtils.General
    source:
      id: EnumUtility
      path: ''
      startLine: 98
    syntax:
      content:
        CSharp: public static class EnumUtility
        VB: Public Module EnumUtility
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - isExtensionMethod: true
      id: NomUtils.General.EnumUtility.GetHexCode(Enum)
      commentId: M:NomUtils.General.EnumUtility.GetHexCode(Enum)
      language: CSharp
      name:
        CSharp: GetHexCode(Enum)
        VB: GetHexCode(Enum)
      nameWithType:
        CSharp: EnumUtility.GetHexCode(Enum)
        VB: EnumUtility.GetHexCode(Enum)
      qualifiedName:
        CSharp: NomUtils.General.EnumUtility.GetHexCode(Enum)
        VB: NomUtils.General.EnumUtility.GetHexCode(Enum)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.General
      source:
        id: GetHexCode
        path: ''
        startLine: 99
      syntax:
        content:
          CSharp: public static string GetHexCode(this Enum value)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function GetHexCode(value As  Enum) As String
        parameters:
        - id: value
          type: Global.Enum
        return:
          type: System.String
      overload: NomUtils.General.EnumUtility.GetHexCode*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
- id: NomUtils.Math
  commentId: N:NomUtils.Math
  language: CSharp
  name:
    CSharp: NomUtils.Math
    VB: NomUtils.Math
  nameWithType:
    CSharp: NomUtils.Math
    VB: NomUtils.Math
  qualifiedName:
    CSharp: NomUtils.Math
    VB: NomUtils.Math
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: NomUtils.Math.BitUtility
    commentId: T:NomUtils.Math.BitUtility
    language: CSharp
    name:
      CSharp: BitUtility
      VB: BitUtility
    nameWithType:
      CSharp: BitUtility
      VB: BitUtility
    qualifiedName:
      CSharp: NomUtils.Math.BitUtility
      VB: NomUtils.Math.BitUtility
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: NomUtils.Math
    source:
      id: BitUtility
      path: ''
      startLine: 109
    syntax:
      content:
        CSharp: public static class BitUtility
        VB: Public Module BitUtility
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: NomUtils.Math.BitUtility.Bit8ToString(System.SByte)
      commentId: M:NomUtils.Math.BitUtility.Bit8ToString(System.SByte)
      language: CSharp
      name:
        CSharp: Bit8ToString(SByte)
        VB: Bit8ToString(SByte)
      nameWithType:
        CSharp: BitUtility.Bit8ToString(SByte)
        VB: BitUtility.Bit8ToString(SByte)
      qualifiedName:
        CSharp: NomUtils.Math.BitUtility.Bit8ToString(System.SByte)
        VB: NomUtils.Math.BitUtility.Bit8ToString(System.SByte)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: Bit8ToString
        path: ''
        startLine: 112
      syntax:
        content:
          CSharp: public static string Bit8ToString(sbyte bit8)
          VB: Public Shared Function Bit8ToString(bit8 As SByte) As String
        parameters:
        - id: bit8
          type: System.SByte
        return:
          type: System.String
      overload: NomUtils.Math.BitUtility.Bit8ToString*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.BitUtility.Bit16ToString(System.Int16)
      commentId: M:NomUtils.Math.BitUtility.Bit16ToString(System.Int16)
      language: CSharp
      name:
        CSharp: Bit16ToString(Int16)
        VB: Bit16ToString(Int16)
      nameWithType:
        CSharp: BitUtility.Bit16ToString(Int16)
        VB: BitUtility.Bit16ToString(Int16)
      qualifiedName:
        CSharp: NomUtils.Math.BitUtility.Bit16ToString(System.Int16)
        VB: NomUtils.Math.BitUtility.Bit16ToString(System.Int16)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: Bit16ToString
        path: ''
        startLine: 116
      syntax:
        content:
          CSharp: public static string Bit16ToString(short bit16)
          VB: Public Shared Function Bit16ToString(bit16 As Short) As String
        parameters:
        - id: bit16
          type: System.Int16
        return:
          type: System.String
      overload: NomUtils.Math.BitUtility.Bit16ToString*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.BitUtility.Bit32ToString(System.Int32)
      commentId: M:NomUtils.Math.BitUtility.Bit32ToString(System.Int32)
      language: CSharp
      name:
        CSharp: Bit32ToString(Int32)
        VB: Bit32ToString(Int32)
      nameWithType:
        CSharp: BitUtility.Bit32ToString(Int32)
        VB: BitUtility.Bit32ToString(Int32)
      qualifiedName:
        CSharp: NomUtils.Math.BitUtility.Bit32ToString(System.Int32)
        VB: NomUtils.Math.BitUtility.Bit32ToString(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: Bit32ToString
        path: ''
        startLine: 120
      syntax:
        content:
          CSharp: public static string Bit32ToString(int bit32)
          VB: Public Shared Function Bit32ToString(bit32 As Integer) As String
        parameters:
        - id: bit32
          type: System.Int32
        return:
          type: System.String
      overload: NomUtils.Math.BitUtility.Bit32ToString*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.BitUtility.Bit64ToString(System.Int64)
      commentId: M:NomUtils.Math.BitUtility.Bit64ToString(System.Int64)
      language: CSharp
      name:
        CSharp: Bit64ToString(Int64)
        VB: Bit64ToString(Int64)
      nameWithType:
        CSharp: BitUtility.Bit64ToString(Int64)
        VB: BitUtility.Bit64ToString(Int64)
      qualifiedName:
        CSharp: NomUtils.Math.BitUtility.Bit64ToString(System.Int64)
        VB: NomUtils.Math.BitUtility.Bit64ToString(System.Int64)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: Bit64ToString
        path: ''
        startLine: 124
      syntax:
        content:
          CSharp: public static string Bit64ToString(long bit64)
          VB: Public Shared Function Bit64ToString(bit64 As Long) As String
        parameters:
        - id: bit64
          type: System.Int64
        return:
          type: System.String
      overload: NomUtils.Math.BitUtility.Bit64ToString*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: NomUtils.Math.Equations
    commentId: T:NomUtils.Math.Equations
    language: CSharp
    name:
      CSharp: Equations
      VB: Equations
    nameWithType:
      CSharp: Equations
      VB: Equations
    qualifiedName:
      CSharp: NomUtils.Math.Equations
      VB: NomUtils.Math.Equations
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: NomUtils.Math
    source:
      id: Equations
      path: ''
      startLine: 139
    syntax:
      content:
        CSharp: public static class Equations
        VB: Public Module Equations
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: NomUtils.Math.Equations.CalculateRootMeanSquare(System.Single[],System.Int32,System.Int32)
      commentId: M:NomUtils.Math.Equations.CalculateRootMeanSquare(System.Single[],System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: CalculateRootMeanSquare(Single[], Int32, Int32)
        VB: CalculateRootMeanSquare(Single(), Int32, Int32)
      nameWithType:
        CSharp: Equations.CalculateRootMeanSquare(Single[], Int32, Int32)
        VB: Equations.CalculateRootMeanSquare(Single(), Int32, Int32)
      qualifiedName:
        CSharp: NomUtils.Math.Equations.CalculateRootMeanSquare(System.Single[], System.Int32, System.Int32)
        VB: NomUtils.Math.Equations.CalculateRootMeanSquare(System.Single(), System.Int32, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateRootMeanSquare
        path: ''
        startLine: 149
      summary: "\nCalculates the square root of the mean square.\n<br />\nhttps://en.wikipedia.org/wiki/Root_mean_square\n"
      example: []
      syntax:
        content:
          CSharp: public static float CalculateRootMeanSquare(float[] data, int from, int to)
          VB: Public Shared Function CalculateRootMeanSquare(data As Single(), from As Integer, to As Integer) As Single
        parameters:
        - id: data
          type: System.Single[]
          description: Input data
        - id: from
          type: System.Int32
          description: Starting index
        - id: to
          type: System.Int32
          description: Ending index
        return:
          type: System.Single
          description: ''
      overload: NomUtils.Math.Equations.CalculateRootMeanSquare*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Equations.CalculateAveragedSample(System.Single[],System.Single[])
      commentId: M:NomUtils.Math.Equations.CalculateAveragedSample(System.Single[],System.Single[])
      language: CSharp
      name:
        CSharp: CalculateAveragedSample(Single[], Single[])
        VB: CalculateAveragedSample(Single(), Single())
      nameWithType:
        CSharp: Equations.CalculateAveragedSample(Single[], Single[])
        VB: Equations.CalculateAveragedSample(Single(), Single())
      qualifiedName:
        CSharp: NomUtils.Math.Equations.CalculateAveragedSample(System.Single[], System.Single[])
        VB: NomUtils.Math.Equations.CalculateAveragedSample(System.Single(), System.Single())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateAveragedSample
        path: ''
        startLine: 166
      summary: "\nCalculates the averaged sample between a collection of max values, and a collection of indeterminate values.\n"
      example: []
      syntax:
        content:
          CSharp: public static float CalculateAveragedSample(float[] maxValues, float[] currentValues)
          VB: Public Shared Function CalculateAveragedSample(maxValues As Single(), currentValues As Single()) As Single
        parameters:
        - id: maxValues
          type: System.Single[]
          description: Max allowed value collection
        - id: currentValues
          type: System.Single[]
          description: Indeterminate value collection
        return:
          type: System.Single
          description: Averaged sum
      overload: NomUtils.Math.Equations.CalculateAveragedSample*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Equations.CalculateSqrMagnitude(System.Single)
      commentId: M:NomUtils.Math.Equations.CalculateSqrMagnitude(System.Single)
      language: CSharp
      name:
        CSharp: CalculateSqrMagnitude(Single)
        VB: CalculateSqrMagnitude(Single)
      nameWithType:
        CSharp: Equations.CalculateSqrMagnitude(Single)
        VB: Equations.CalculateSqrMagnitude(Single)
      qualifiedName:
        CSharp: NomUtils.Math.Equations.CalculateSqrMagnitude(System.Single)
        VB: NomUtils.Math.Equations.CalculateSqrMagnitude(System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateSqrMagnitude
        path: ''
        startLine: 183
      syntax:
        content:
          CSharp: public static float CalculateSqrMagnitude(float x)
          VB: Public Shared Function CalculateSqrMagnitude(x As Single) As Single
        parameters:
        - id: x
          type: System.Single
        return:
          type: System.Single
      overload: NomUtils.Math.Equations.CalculateSqrMagnitude*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Equations.CalculateSqrMagnitude(System.Single,System.Single)
      commentId: M:NomUtils.Math.Equations.CalculateSqrMagnitude(System.Single,System.Single)
      language: CSharp
      name:
        CSharp: CalculateSqrMagnitude(Single, Single)
        VB: CalculateSqrMagnitude(Single, Single)
      nameWithType:
        CSharp: Equations.CalculateSqrMagnitude(Single, Single)
        VB: Equations.CalculateSqrMagnitude(Single, Single)
      qualifiedName:
        CSharp: NomUtils.Math.Equations.CalculateSqrMagnitude(System.Single, System.Single)
        VB: NomUtils.Math.Equations.CalculateSqrMagnitude(System.Single, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateSqrMagnitude
        path: ''
        startLine: 188
      syntax:
        content:
          CSharp: public static float CalculateSqrMagnitude(float x, float y)
          VB: Public Shared Function CalculateSqrMagnitude(x As Single, y As Single) As Single
        parameters:
        - id: x
          type: System.Single
        - id: y
          type: System.Single
        return:
          type: System.Single
      overload: NomUtils.Math.Equations.CalculateSqrMagnitude*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Equations.CalculateSqrMagnitude(System.Single,System.Single,System.Single)
      commentId: M:NomUtils.Math.Equations.CalculateSqrMagnitude(System.Single,System.Single,System.Single)
      language: CSharp
      name:
        CSharp: CalculateSqrMagnitude(Single, Single, Single)
        VB: CalculateSqrMagnitude(Single, Single, Single)
      nameWithType:
        CSharp: Equations.CalculateSqrMagnitude(Single, Single, Single)
        VB: Equations.CalculateSqrMagnitude(Single, Single, Single)
      qualifiedName:
        CSharp: NomUtils.Math.Equations.CalculateSqrMagnitude(System.Single, System.Single, System.Single)
        VB: NomUtils.Math.Equations.CalculateSqrMagnitude(System.Single, System.Single, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateSqrMagnitude
        path: ''
        startLine: 193
      syntax:
        content:
          CSharp: public static float CalculateSqrMagnitude(float x, float y, float z)
          VB: Public Shared Function CalculateSqrMagnitude(x As Single, y As Single, z As Single) As Single
        parameters:
        - id: x
          type: System.Single
        - id: y
          type: System.Single
        - id: z
          type: System.Single
        return:
          type: System.Single
      overload: NomUtils.Math.Equations.CalculateSqrMagnitude*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Equations.CalculateSqrMagnitude(System.Single,System.Single,System.Single,System.Single)
      commentId: M:NomUtils.Math.Equations.CalculateSqrMagnitude(System.Single,System.Single,System.Single,System.Single)
      language: CSharp
      name:
        CSharp: CalculateSqrMagnitude(Single, Single, Single, Single)
        VB: CalculateSqrMagnitude(Single, Single, Single, Single)
      nameWithType:
        CSharp: Equations.CalculateSqrMagnitude(Single, Single, Single, Single)
        VB: Equations.CalculateSqrMagnitude(Single, Single, Single, Single)
      qualifiedName:
        CSharp: NomUtils.Math.Equations.CalculateSqrMagnitude(System.Single, System.Single, System.Single, System.Single)
        VB: NomUtils.Math.Equations.CalculateSqrMagnitude(System.Single, System.Single, System.Single, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateSqrMagnitude
        path: ''
        startLine: 198
      syntax:
        content:
          CSharp: public static float CalculateSqrMagnitude(float x, float y, float z, float w)
          VB: Public Shared Function CalculateSqrMagnitude(x As Single, y As Single, z As Single, w As Single) As Single
        parameters:
        - id: x
          type: System.Single
        - id: y
          type: System.Single
        - id: z
          type: System.Single
        - id: w
          type: System.Single
        return:
          type: System.Single
      overload: NomUtils.Math.Equations.CalculateSqrMagnitude*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Equations.CalculateSqrMagnitudeSub(System.Single,System.Single)
      commentId: M:NomUtils.Math.Equations.CalculateSqrMagnitudeSub(System.Single,System.Single)
      language: CSharp
      name:
        CSharp: CalculateSqrMagnitudeSub(Single, Single)
        VB: CalculateSqrMagnitudeSub(Single, Single)
      nameWithType:
        CSharp: Equations.CalculateSqrMagnitudeSub(Single, Single)
        VB: Equations.CalculateSqrMagnitudeSub(Single, Single)
      qualifiedName:
        CSharp: NomUtils.Math.Equations.CalculateSqrMagnitudeSub(System.Single, System.Single)
        VB: NomUtils.Math.Equations.CalculateSqrMagnitudeSub(System.Single, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateSqrMagnitudeSub
        path: ''
        startLine: 206
      summary: "\nCalculates the magnitude² between the difference of two values.\n"
      example: []
      syntax:
        content:
          CSharp: public static float CalculateSqrMagnitudeSub(float lhs, float rhs)
          VB: Public Shared Function CalculateSqrMagnitudeSub(lhs As Single, rhs As Single) As Single
        parameters:
        - id: lhs
          type: System.Single
        - id: rhs
          type: System.Single
        return:
          type: System.Single
      overload: NomUtils.Math.Equations.CalculateSqrMagnitudeSub*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Equations.CalculateSqrMagnitudeAdd(System.Single,System.Single)
      commentId: M:NomUtils.Math.Equations.CalculateSqrMagnitudeAdd(System.Single,System.Single)
      language: CSharp
      name:
        CSharp: CalculateSqrMagnitudeAdd(Single, Single)
        VB: CalculateSqrMagnitudeAdd(Single, Single)
      nameWithType:
        CSharp: Equations.CalculateSqrMagnitudeAdd(Single, Single)
        VB: Equations.CalculateSqrMagnitudeAdd(Single, Single)
      qualifiedName:
        CSharp: NomUtils.Math.Equations.CalculateSqrMagnitudeAdd(System.Single, System.Single)
        VB: NomUtils.Math.Equations.CalculateSqrMagnitudeAdd(System.Single, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateSqrMagnitudeAdd
        path: ''
        startLine: 214
      summary: "\nCalculates the magnitude² between the sum of two values.\n"
      example: []
      syntax:
        content:
          CSharp: public static float CalculateSqrMagnitudeAdd(float lhs, float rhs)
          VB: Public Shared Function CalculateSqrMagnitudeAdd(lhs As Single, rhs As Single) As Single
        parameters:
        - id: lhs
          type: System.Single
        - id: rhs
          type: System.Single
        return:
          type: System.Single
      overload: NomUtils.Math.Equations.CalculateSqrMagnitudeAdd*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Equations.CalculateMagnitude(System.Single)
      commentId: M:NomUtils.Math.Equations.CalculateMagnitude(System.Single)
      language: CSharp
      name:
        CSharp: CalculateMagnitude(Single)
        VB: CalculateMagnitude(Single)
      nameWithType:
        CSharp: Equations.CalculateMagnitude(Single)
        VB: Equations.CalculateMagnitude(Single)
      qualifiedName:
        CSharp: NomUtils.Math.Equations.CalculateMagnitude(System.Single)
        VB: NomUtils.Math.Equations.CalculateMagnitude(System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateMagnitude
        path: ''
        startLine: 219
      syntax:
        content:
          CSharp: public static float CalculateMagnitude(float x)
          VB: Public Shared Function CalculateMagnitude(x As Single) As Single
        parameters:
        - id: x
          type: System.Single
        return:
          type: System.Single
      overload: NomUtils.Math.Equations.CalculateMagnitude*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Equations.CalculateMagnitude(System.Single,System.Single)
      commentId: M:NomUtils.Math.Equations.CalculateMagnitude(System.Single,System.Single)
      language: CSharp
      name:
        CSharp: CalculateMagnitude(Single, Single)
        VB: CalculateMagnitude(Single, Single)
      nameWithType:
        CSharp: Equations.CalculateMagnitude(Single, Single)
        VB: Equations.CalculateMagnitude(Single, Single)
      qualifiedName:
        CSharp: NomUtils.Math.Equations.CalculateMagnitude(System.Single, System.Single)
        VB: NomUtils.Math.Equations.CalculateMagnitude(System.Single, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateMagnitude
        path: ''
        startLine: 224
      syntax:
        content:
          CSharp: public static float CalculateMagnitude(float x, float y)
          VB: Public Shared Function CalculateMagnitude(x As Single, y As Single) As Single
        parameters:
        - id: x
          type: System.Single
        - id: y
          type: System.Single
        return:
          type: System.Single
      overload: NomUtils.Math.Equations.CalculateMagnitude*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Equations.CalculateMagnitude(System.Single,System.Single,System.Single)
      commentId: M:NomUtils.Math.Equations.CalculateMagnitude(System.Single,System.Single,System.Single)
      language: CSharp
      name:
        CSharp: CalculateMagnitude(Single, Single, Single)
        VB: CalculateMagnitude(Single, Single, Single)
      nameWithType:
        CSharp: Equations.CalculateMagnitude(Single, Single, Single)
        VB: Equations.CalculateMagnitude(Single, Single, Single)
      qualifiedName:
        CSharp: NomUtils.Math.Equations.CalculateMagnitude(System.Single, System.Single, System.Single)
        VB: NomUtils.Math.Equations.CalculateMagnitude(System.Single, System.Single, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateMagnitude
        path: ''
        startLine: 229
      syntax:
        content:
          CSharp: public static float CalculateMagnitude(float x, float y, float z)
          VB: Public Shared Function CalculateMagnitude(x As Single, y As Single, z As Single) As Single
        parameters:
        - id: x
          type: System.Single
        - id: y
          type: System.Single
        - id: z
          type: System.Single
        return:
          type: System.Single
      overload: NomUtils.Math.Equations.CalculateMagnitude*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Equations.CalculateMagnitude(System.Single,System.Single,System.Single,System.Single)
      commentId: M:NomUtils.Math.Equations.CalculateMagnitude(System.Single,System.Single,System.Single,System.Single)
      language: CSharp
      name:
        CSharp: CalculateMagnitude(Single, Single, Single, Single)
        VB: CalculateMagnitude(Single, Single, Single, Single)
      nameWithType:
        CSharp: Equations.CalculateMagnitude(Single, Single, Single, Single)
        VB: Equations.CalculateMagnitude(Single, Single, Single, Single)
      qualifiedName:
        CSharp: NomUtils.Math.Equations.CalculateMagnitude(System.Single, System.Single, System.Single, System.Single)
        VB: NomUtils.Math.Equations.CalculateMagnitude(System.Single, System.Single, System.Single, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateMagnitude
        path: ''
        startLine: 234
      syntax:
        content:
          CSharp: public static float CalculateMagnitude(float x, float y, float z, float w)
          VB: Public Shared Function CalculateMagnitude(x As Single, y As Single, z As Single, w As Single) As Single
        parameters:
        - id: x
          type: System.Single
        - id: y
          type: System.Single
        - id: z
          type: System.Single
        - id: w
          type: System.Single
        return:
          type: System.Single
      overload: NomUtils.Math.Equations.CalculateMagnitude*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Equations.CalculateMagnitudeSub(System.Single,System.Single)
      commentId: M:NomUtils.Math.Equations.CalculateMagnitudeSub(System.Single,System.Single)
      language: CSharp
      name:
        CSharp: CalculateMagnitudeSub(Single, Single)
        VB: CalculateMagnitudeSub(Single, Single)
      nameWithType:
        CSharp: Equations.CalculateMagnitudeSub(Single, Single)
        VB: Equations.CalculateMagnitudeSub(Single, Single)
      qualifiedName:
        CSharp: NomUtils.Math.Equations.CalculateMagnitudeSub(System.Single, System.Single)
        VB: NomUtils.Math.Equations.CalculateMagnitudeSub(System.Single, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateMagnitudeSub
        path: ''
        startLine: 242
      summary: "\nCalculates the magnitude between the difference of two values.\n"
      example: []
      syntax:
        content:
          CSharp: public static float CalculateMagnitudeSub(float lhs, float rhs)
          VB: Public Shared Function CalculateMagnitudeSub(lhs As Single, rhs As Single) As Single
        parameters:
        - id: lhs
          type: System.Single
        - id: rhs
          type: System.Single
        return:
          type: System.Single
      overload: NomUtils.Math.Equations.CalculateMagnitudeSub*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Equations.CalculateMagnitudeAdd(System.Single,System.Single)
      commentId: M:NomUtils.Math.Equations.CalculateMagnitudeAdd(System.Single,System.Single)
      language: CSharp
      name:
        CSharp: CalculateMagnitudeAdd(Single, Single)
        VB: CalculateMagnitudeAdd(Single, Single)
      nameWithType:
        CSharp: Equations.CalculateMagnitudeAdd(Single, Single)
        VB: Equations.CalculateMagnitudeAdd(Single, Single)
      qualifiedName:
        CSharp: NomUtils.Math.Equations.CalculateMagnitudeAdd(System.Single, System.Single)
        VB: NomUtils.Math.Equations.CalculateMagnitudeAdd(System.Single, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateMagnitudeAdd
        path: ''
        startLine: 250
      summary: "\nCalculates the magnitude between the sum of two values.\n"
      example: []
      syntax:
        content:
          CSharp: public static float CalculateMagnitudeAdd(float lhs, float rhs)
          VB: Public Shared Function CalculateMagnitudeAdd(lhs As Single, rhs As Single) As Single
        parameters:
        - id: lhs
          type: System.Single
        - id: rhs
          type: System.Single
        return:
          type: System.Single
      overload: NomUtils.Math.Equations.CalculateMagnitudeAdd*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Equations.FastInverseSquareRoot(System.Single)
      commentId: M:NomUtils.Math.Equations.FastInverseSquareRoot(System.Single)
      language: CSharp
      name:
        CSharp: FastInverseSquareRoot(Single)
        VB: FastInverseSquareRoot(Single)
      nameWithType:
        CSharp: Equations.FastInverseSquareRoot(Single)
        VB: Equations.FastInverseSquareRoot(Single)
      qualifiedName:
        CSharp: NomUtils.Math.Equations.FastInverseSquareRoot(System.Single)
        VB: NomUtils.Math.Equations.FastInverseSquareRoot(System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: FastInverseSquareRoot
        path: ''
        startLine: 259
      summary: "\nEstimates the reciprocal of the square root of a 32-bit floating-point number.\n"
      example: []
      syntax:
        content:
          CSharp: public static float FastInverseSquareRoot(float value)
          VB: Public Shared Function FastInverseSquareRoot(value As Single) As Single
        parameters:
        - id: value
          type: System.Single
          description: IEEE 754 floating-point value
        return:
          type: System.Single
      overload: NomUtils.Math.Equations.FastInverseSquareRoot*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Equations.Dot(System.Single,System.Single,System.Single,System.Single)
      commentId: M:NomUtils.Math.Equations.Dot(System.Single,System.Single,System.Single,System.Single)
      language: CSharp
      name:
        CSharp: Dot(Single, Single, Single, Single)
        VB: Dot(Single, Single, Single, Single)
      nameWithType:
        CSharp: Equations.Dot(Single, Single, Single, Single)
        VB: Equations.Dot(Single, Single, Single, Single)
      qualifiedName:
        CSharp: NomUtils.Math.Equations.Dot(System.Single, System.Single, System.Single, System.Single)
        VB: NomUtils.Math.Equations.Dot(System.Single, System.Single, System.Single, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: Dot
        path: ''
        startLine: 274
      syntax:
        content:
          CSharp: public static float Dot(float x0, float y0, float x1, float y1)
          VB: Public Shared Function Dot(x0 As Single, y0 As Single, x1 As Single, y1 As Single) As Single
        parameters:
        - id: x0
          type: System.Single
        - id: y0
          type: System.Single
        - id: x1
          type: System.Single
        - id: y1
          type: System.Single
        return:
          type: System.Single
      overload: NomUtils.Math.Equations.Dot*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Equations.Dot(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
      commentId: M:NomUtils.Math.Equations.Dot(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
      language: CSharp
      name:
        CSharp: Dot(Single, Single, Single, Single, Single, Single)
        VB: Dot(Single, Single, Single, Single, Single, Single)
      nameWithType:
        CSharp: Equations.Dot(Single, Single, Single, Single, Single, Single)
        VB: Equations.Dot(Single, Single, Single, Single, Single, Single)
      qualifiedName:
        CSharp: NomUtils.Math.Equations.Dot(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)
        VB: NomUtils.Math.Equations.Dot(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: Dot
        path: ''
        startLine: 279
      syntax:
        content:
          CSharp: public static float Dot(float x0, float y0, float z0, float x1, float y1, float z1)
          VB: Public Shared Function Dot(x0 As Single, y0 As Single, z0 As Single, x1 As Single, y1 As Single, z1 As Single) As Single
        parameters:
        - id: x0
          type: System.Single
        - id: y0
          type: System.Single
        - id: z0
          type: System.Single
        - id: x1
          type: System.Single
        - id: y1
          type: System.Single
        - id: z1
          type: System.Single
        return:
          type: System.Single
      overload: NomUtils.Math.Equations.Dot*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Equations.Dot(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
      commentId: M:NomUtils.Math.Equations.Dot(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
      language: CSharp
      name:
        CSharp: Dot(Single, Single, Single, Single, Single, Single, Single, Single)
        VB: Dot(Single, Single, Single, Single, Single, Single, Single, Single)
      nameWithType:
        CSharp: Equations.Dot(Single, Single, Single, Single, Single, Single, Single, Single)
        VB: Equations.Dot(Single, Single, Single, Single, Single, Single, Single, Single)
      qualifiedName:
        CSharp: NomUtils.Math.Equations.Dot(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)
        VB: NomUtils.Math.Equations.Dot(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: Dot
        path: ''
        startLine: 284
      syntax:
        content:
          CSharp: public static float Dot(float x0, float y0, float z0, float w0, float x1, float y1, float z1, float w1)
          VB: Public Shared Function Dot(x0 As Single, y0 As Single, z0 As Single, w0 As Single, x1 As Single, y1 As Single, z1 As Single, w1 As Single) As Single
        parameters:
        - id: x0
          type: System.Single
        - id: y0
          type: System.Single
        - id: z0
          type: System.Single
        - id: w0
          type: System.Single
        - id: x1
          type: System.Single
        - id: y1
          type: System.Single
        - id: z1
          type: System.Single
        - id: w1
          type: System.Single
        return:
          type: System.Single
      overload: NomUtils.Math.Equations.Dot*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Equations.GetAngleDiamond(System.Single,System.Single)
      commentId: M:NomUtils.Math.Equations.GetAngleDiamond(System.Single,System.Single)
      language: CSharp
      name:
        CSharp: GetAngleDiamond(Single, Single)
        VB: GetAngleDiamond(Single, Single)
      nameWithType:
        CSharp: Equations.GetAngleDiamond(Single, Single)
        VB: Equations.GetAngleDiamond(Single, Single)
      qualifiedName:
        CSharp: NomUtils.Math.Equations.GetAngleDiamond(System.Single, System.Single)
        VB: NomUtils.Math.Equations.GetAngleDiamond(System.Single, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: GetAngleDiamond
        path: ''
        startLine: 289
      syntax:
        content:
          CSharp: public static float GetAngleDiamond(float x, float y)
          VB: Public Shared Function GetAngleDiamond(x As Single, y As Single) As Single
        parameters:
        - id: x
          type: System.Single
        - id: y
          type: System.Single
        return:
          type: System.Single
      overload: NomUtils.Math.Equations.GetAngleDiamond*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Equations.RadiansToDiamondAngle(System.Single)
      commentId: M:NomUtils.Math.Equations.RadiansToDiamondAngle(System.Single)
      language: CSharp
      name:
        CSharp: RadiansToDiamondAngle(Single)
        VB: RadiansToDiamondAngle(Single)
      nameWithType:
        CSharp: Equations.RadiansToDiamondAngle(Single)
        VB: Equations.RadiansToDiamondAngle(Single)
      qualifiedName:
        CSharp: NomUtils.Math.Equations.RadiansToDiamondAngle(System.Single)
        VB: NomUtils.Math.Equations.RadiansToDiamondAngle(System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: RadiansToDiamondAngle
        path: ''
        startLine: 301
      syntax:
        content:
          CSharp: public static float RadiansToDiamondAngle(float radians)
          VB: Public Shared Function RadiansToDiamondAngle(radians As Single) As Single
        parameters:
        - id: radians
          type: System.Single
        return:
          type: System.Single
      overload: NomUtils.Math.Equations.RadiansToDiamondAngle*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Equations.DiamondAngleToRadians(System.Single)
      commentId: M:NomUtils.Math.Equations.DiamondAngleToRadians(System.Single)
      language: CSharp
      name:
        CSharp: DiamondAngleToRadians(Single)
        VB: DiamondAngleToRadians(Single)
      nameWithType:
        CSharp: Equations.DiamondAngleToRadians(Single)
        VB: Equations.DiamondAngleToRadians(Single)
      qualifiedName:
        CSharp: NomUtils.Math.Equations.DiamondAngleToRadians(System.Single)
        VB: NomUtils.Math.Equations.DiamondAngleToRadians(System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: DiamondAngleToRadians
        path: ''
        startLine: 306
      syntax:
        content:
          CSharp: public static float DiamondAngleToRadians(float angle)
          VB: Public Shared Function DiamondAngleToRadians(angle As Single) As Single
        parameters:
        - id: angle
          type: System.Single
        return:
          type: System.Single
      overload: NomUtils.Math.Equations.DiamondAngleToRadians*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Equations.DiamondAngleToDegrees(System.Single)
      commentId: M:NomUtils.Math.Equations.DiamondAngleToDegrees(System.Single)
      language: CSharp
      name:
        CSharp: DiamondAngleToDegrees(Single)
        VB: DiamondAngleToDegrees(Single)
      nameWithType:
        CSharp: Equations.DiamondAngleToDegrees(Single)
        VB: Equations.DiamondAngleToDegrees(Single)
      qualifiedName:
        CSharp: NomUtils.Math.Equations.DiamondAngleToDegrees(System.Single)
        VB: NomUtils.Math.Equations.DiamondAngleToDegrees(System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: DiamondAngleToDegrees
        path: ''
        startLine: 313
      syntax:
        content:
          CSharp: public static float DiamondAngleToDegrees(float angle)
          VB: Public Shared Function DiamondAngleToDegrees(angle As Single) As Single
        parameters:
        - id: angle
          type: System.Single
        return:
          type: System.Single
      overload: NomUtils.Math.Equations.DiamondAngleToDegrees*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Equations.DiamondAngleToPoint(System.Single)
      commentId: M:NomUtils.Math.Equations.DiamondAngleToPoint(System.Single)
      language: CSharp
      name:
        CSharp: DiamondAngleToPoint(Single)
        VB: DiamondAngleToPoint(Single)
      nameWithType:
        CSharp: Equations.DiamondAngleToPoint(Single)
        VB: Equations.DiamondAngleToPoint(Single)
      qualifiedName:
        CSharp: NomUtils.Math.Equations.DiamondAngleToPoint(System.Single)
        VB: NomUtils.Math.Equations.DiamondAngleToPoint(System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: DiamondAngleToPoint
        path: ''
        startLine: 318
      syntax:
        content:
          CSharp: public static Vector2 DiamondAngleToPoint(float angle)
          VB: Public Shared Function DiamondAngleToPoint(angle As Single) As Vector2
        parameters:
        - id: angle
          type: System.Single
        return:
          type: Global.Vector2
      overload: NomUtils.Math.Equations.DiamondAngleToPoint*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: NomUtils.Math.QuaternionUtility
    commentId: T:NomUtils.Math.QuaternionUtility
    language: CSharp
    name:
      CSharp: QuaternionUtility
      VB: QuaternionUtility
    nameWithType:
      CSharp: QuaternionUtility
      VB: QuaternionUtility
    qualifiedName:
      CSharp: NomUtils.Math.QuaternionUtility
      VB: NomUtils.Math.QuaternionUtility
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: NomUtils.Math
    source:
      id: QuaternionUtility
      path: ''
      startLine: 330
    syntax:
      content:
        CSharp: public static class QuaternionUtility
        VB: Public Module QuaternionUtility
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - isExtensionMethod: true
      id: NomUtils.Math.QuaternionUtility.Approximately(Quaternion,Quaternion@,System.Single)
      commentId: M:NomUtils.Math.QuaternionUtility.Approximately(Quaternion,Quaternion@,System.Single)
      language: CSharp
      name:
        CSharp: Approximately(Quaternion, Quaternion, Single)
        VB: Approximately(Quaternion, ByRef Quaternion, Single)
      nameWithType:
        CSharp: QuaternionUtility.Approximately(Quaternion, Quaternion, Single)
        VB: QuaternionUtility.Approximately(Quaternion, ByRef Quaternion, Single)
      qualifiedName:
        CSharp: NomUtils.Math.QuaternionUtility.Approximately(Quaternion, Quaternion, System.Single)
        VB: NomUtils.Math.QuaternionUtility.Approximately(Quaternion, ByRef Quaternion, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: Approximately
        path: ''
        startLine: 334
      summary: "\nReturns true if the provided Quaternion is within a precision range of the original.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool Approximately(this Quaternion q1, in Quaternion q2, float precision)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function Approximately(q1 As Quaternion, ByRef q2 As Quaternion, precision As Single) As Boolean
        parameters:
        - id: q1
          type: Global.Quaternion
        - id: q2
          type: Global.Quaternion
        - id: precision
          type: System.Single
        return:
          type: System.Boolean
      overload: NomUtils.Math.QuaternionUtility.Approximately*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.QuaternionUtility.RotatePointAroundPivot(Vector2@,Vector2@,System.Single)
      commentId: M:NomUtils.Math.QuaternionUtility.RotatePointAroundPivot(Vector2@,Vector2@,System.Single)
      language: CSharp
      name:
        CSharp: RotatePointAroundPivot(Vector2, Vector2, Single)
        VB: RotatePointAroundPivot(ByRef Vector2, ByRef Vector2, Single)
      nameWithType:
        CSharp: QuaternionUtility.RotatePointAroundPivot(Vector2, Vector2, Single)
        VB: QuaternionUtility.RotatePointAroundPivot(ByRef Vector2, ByRef Vector2, Single)
      qualifiedName:
        CSharp: NomUtils.Math.QuaternionUtility.RotatePointAroundPivot(Vector2, Vector2, System.Single)
        VB: NomUtils.Math.QuaternionUtility.RotatePointAroundPivot(ByRef Vector2, ByRef Vector2, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: RotatePointAroundPivot
        path: ''
        startLine: 346
      summary: "\nRotates a Vector2 around a given pivot and angle euler.\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector2 RotatePointAroundPivot(in Vector2 point, in Vector2 pivot, float angle)
          VB: Public Shared Function RotatePointAroundPivot(ByRef point As Vector2, ByRef pivot As Vector2, angle As Single) As Vector2
        parameters:
        - id: point
          type: Global.Vector2
          description: Point to rotate
        - id: pivot
          type: Global.Vector2
          description: Pivot to rotate around
        - id: angle
          type: System.Single
          description: Angle in degrees to rotate with
        return:
          type: Global.Vector2
          description: ''
      overload: NomUtils.Math.QuaternionUtility.RotatePointAroundPivot*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.QuaternionUtility.RotatePointAroundPivot(Vector3@,Vector3@,Vector3@)
      commentId: M:NomUtils.Math.QuaternionUtility.RotatePointAroundPivot(Vector3@,Vector3@,Vector3@)
      language: CSharp
      name:
        CSharp: RotatePointAroundPivot(Vector3, Vector3, Vector3)
        VB: RotatePointAroundPivot(ByRef Vector3, ByRef Vector3, ByRef Vector3)
      nameWithType:
        CSharp: QuaternionUtility.RotatePointAroundPivot(Vector3, Vector3, Vector3)
        VB: QuaternionUtility.RotatePointAroundPivot(ByRef Vector3, ByRef Vector3, ByRef Vector3)
      qualifiedName:
        CSharp: NomUtils.Math.QuaternionUtility.RotatePointAroundPivot(Vector3, Vector3, Vector3)
        VB: NomUtils.Math.QuaternionUtility.RotatePointAroundPivot(ByRef Vector3, ByRef Vector3, ByRef Vector3)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: RotatePointAroundPivot
        path: ''
        startLine: 359
      summary: "\nRotates a Vector3 around a given pivot and angle euler.\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector3 RotatePointAroundPivot(in Vector3 point, in Vector3 pivot, in Vector3 angles)
          VB: Public Shared Function RotatePointAroundPivot(ByRef point As Vector3, ByRef pivot As Vector3, ByRef angles As Vector3) As Vector3
        parameters:
        - id: point
          type: Global.Vector3
          description: Point to rotate
        - id: pivot
          type: Global.Vector3
          description: Pivot to rotate around
        - id: angles
          type: Global.Vector3
          description: Angles in degrees to rotate with
        return:
          type: Global.Vector3
          description: ''
      overload: NomUtils.Math.QuaternionUtility.RotatePointAroundPivot*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.QuaternionUtility.SmoothDamp(Quaternion@,Quaternion@,Quaternion@,System.Single)
      commentId: M:NomUtils.Math.QuaternionUtility.SmoothDamp(Quaternion@,Quaternion@,Quaternion@,System.Single)
      language: CSharp
      name:
        CSharp: SmoothDamp(Quaternion, Quaternion, ref Quaternion, Single)
        VB: SmoothDamp(ByRef Quaternion, ByRef Quaternion, ByRef Quaternion, Single)
      nameWithType:
        CSharp: QuaternionUtility.SmoothDamp(Quaternion, Quaternion, ref Quaternion, Single)
        VB: QuaternionUtility.SmoothDamp(ByRef Quaternion, ByRef Quaternion, ByRef Quaternion, Single)
      qualifiedName:
        CSharp: NomUtils.Math.QuaternionUtility.SmoothDamp(Quaternion, Quaternion, ref Quaternion, System.Single)
        VB: NomUtils.Math.QuaternionUtility.SmoothDamp(ByRef Quaternion, ByRef Quaternion, ByRef Quaternion, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: SmoothDamp
        path: ''
        startLine: 368
      summary: "\nSmoothly interpolates between two quaternions.\n"
      example: []
      syntax:
        content:
          CSharp: public static Quaternion SmoothDamp(in Quaternion start, in Quaternion end, ref Quaternion derivative, float t)
          VB: Public Shared Function SmoothDamp(ByRef start As Quaternion, ByRef end As Quaternion, ByRef derivative As Quaternion, t As Single) As Quaternion
        parameters:
        - id: start
          type: Global.Quaternion
        - id: end
          type: Global.Quaternion
        - id: derivative
          type: Global.Quaternion
        - id: t
          type: System.Single
        return:
          type: Global.Quaternion
      overload: NomUtils.Math.QuaternionUtility.SmoothDamp*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: NomUtils.Math.VectorUtility
    commentId: T:NomUtils.Math.VectorUtility
    language: CSharp
    name:
      CSharp: VectorUtility
      VB: VectorUtility
    nameWithType:
      CSharp: VectorUtility
      VB: VectorUtility
    qualifiedName:
      CSharp: NomUtils.Math.VectorUtility
      VB: NomUtils.Math.VectorUtility
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: NomUtils.Math
    source:
      id: VectorUtility
      path: ''
      startLine: 408
    syntax:
      content:
        CSharp: public static class VectorUtility
        VB: Public Module VectorUtility
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: NomUtils.Math.VectorUtility.GetMiddlePoint(Vector3@,Vector3@)
      commentId: M:NomUtils.Math.VectorUtility.GetMiddlePoint(Vector3@,Vector3@)
      language: CSharp
      name:
        CSharp: GetMiddlePoint(Vector3, Vector3)
        VB: GetMiddlePoint(ByRef Vector3, ByRef Vector3)
      nameWithType:
        CSharp: VectorUtility.GetMiddlePoint(Vector3, Vector3)
        VB: VectorUtility.GetMiddlePoint(ByRef Vector3, ByRef Vector3)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.GetMiddlePoint(Vector3, Vector3)
        VB: NomUtils.Math.VectorUtility.GetMiddlePoint(ByRef Vector3, ByRef Vector3)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: GetMiddlePoint
        path: ''
        startLine: 413
      summary: "\nGets the middle point between two vectors.\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector3 GetMiddlePoint(in Vector3 lhs, in Vector3 rhs)
          VB: Public Shared Function GetMiddlePoint(ByRef lhs As Vector3, ByRef rhs As Vector3) As Vector3
        parameters:
        - id: lhs
          type: Global.Vector3
        - id: rhs
          type: Global.Vector3
        return:
          type: Global.Vector3
          description: Center point
      overload: NomUtils.Math.VectorUtility.GetMiddlePoint*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.VectorUtility.Lerp(Vector3@,Vector3@,System.Single)
      commentId: M:NomUtils.Math.VectorUtility.Lerp(Vector3@,Vector3@,System.Single)
      language: CSharp
      name:
        CSharp: Lerp(Vector3, Vector3, Single)
        VB: Lerp(ByRef Vector3, ByRef Vector3, Single)
      nameWithType:
        CSharp: VectorUtility.Lerp(Vector3, Vector3, Single)
        VB: VectorUtility.Lerp(ByRef Vector3, ByRef Vector3, Single)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.Lerp(Vector3, Vector3, System.Single)
        VB: NomUtils.Math.VectorUtility.Lerp(ByRef Vector3, ByRef Vector3, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: Lerp
        path: ''
        startLine: 428
      summary: "\nGets a point between two vectors based on a percentage.\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector3 Lerp(in Vector3 start, in Vector3 target, float t)
          VB: Public Shared Function Lerp(ByRef start As Vector3, ByRef target As Vector3, t As Single) As Vector3
        parameters:
        - id: start
          type: Global.Vector3
          description: Starting position. This value never changes.
        - id: target
          type: Global.Vector3
          description: Target position. This value never changes.
        - id: t
          type: System.Single
          description: Percentage, from 0f to 1f
        return:
          type: Global.Vector3
          description: ''
      overload: NomUtils.Math.VectorUtility.Lerp*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.VectorUtility.LerpUnclamped(Vector3@,Vector3@,System.Single)
      commentId: M:NomUtils.Math.VectorUtility.LerpUnclamped(Vector3@,Vector3@,System.Single)
      language: CSharp
      name:
        CSharp: LerpUnclamped(Vector3, Vector3, Single)
        VB: LerpUnclamped(ByRef Vector3, ByRef Vector3, Single)
      nameWithType:
        CSharp: VectorUtility.LerpUnclamped(Vector3, Vector3, Single)
        VB: VectorUtility.LerpUnclamped(ByRef Vector3, ByRef Vector3, Single)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.LerpUnclamped(Vector3, Vector3, System.Single)
        VB: NomUtils.Math.VectorUtility.LerpUnclamped(ByRef Vector3, ByRef Vector3, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: LerpUnclamped
        path: ''
        startLine: 445
      summary: "\nGets a point between two vectors based on a percentage.\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector3 LerpUnclamped(in Vector3 start, in Vector3 target, float t)
          VB: Public Shared Function LerpUnclamped(ByRef start As Vector3, ByRef target As Vector3, t As Single) As Vector3
        parameters:
        - id: start
          type: Global.Vector3
          description: Starting position. This value never changes.
        - id: target
          type: Global.Vector3
          description: Target position. This value never changes.
        - id: t
          type: System.Single
          description: Percentage, uncapped
        return:
          type: Global.Vector3
          description: ''
      overload: NomUtils.Math.VectorUtility.LerpUnclamped*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.VectorUtility.MoveTowards(Vector3@,Vector3@,System.Single)
      commentId: M:NomUtils.Math.VectorUtility.MoveTowards(Vector3@,Vector3@,System.Single)
      language: CSharp
      name:
        CSharp: MoveTowards(Vector3, Vector3, Single)
        VB: MoveTowards(ByRef Vector3, ByRef Vector3, Single)
      nameWithType:
        CSharp: VectorUtility.MoveTowards(Vector3, Vector3, Single)
        VB: VectorUtility.MoveTowards(ByRef Vector3, ByRef Vector3, Single)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.MoveTowards(Vector3, Vector3, System.Single)
        VB: NomUtils.Math.VectorUtility.MoveTowards(ByRef Vector3, ByRef Vector3, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: MoveTowards
        path: ''
        startLine: 460
      summary: "\nSamples a point between the two specified, and the returned point will stay within a distance of <code data-dev-comment-type=\"paramref\" class=\"paramref\">maxDistance</code>.\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector3 MoveTowards(in Vector3 start, in Vector3 target, float maxDistance)
          VB: Public Shared Function MoveTowards(ByRef start As Vector3, ByRef target As Vector3, maxDistance As Single) As Vector3
        parameters:
        - id: start
          type: Global.Vector3
          description: ''
        - id: target
          type: Global.Vector3
          description: ''
        - id: maxDistance
          type: System.Single
          description: The max distance the point can go
        return:
          type: Global.Vector3
          description: ''
      overload: NomUtils.Math.VectorUtility.MoveTowards*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.VectorUtility.MultiplyScalar(Vector3@,System.Single)
      commentId: M:NomUtils.Math.VectorUtility.MultiplyScalar(Vector3@,System.Single)
      language: CSharp
      name:
        CSharp: MultiplyScalar(ref Vector3, Single)
        VB: MultiplyScalar(ByRef Vector3, Single)
      nameWithType:
        CSharp: VectorUtility.MultiplyScalar(ref Vector3, Single)
        VB: VectorUtility.MultiplyScalar(ByRef Vector3, Single)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.MultiplyScalar(ref Vector3, System.Single)
        VB: NomUtils.Math.VectorUtility.MultiplyScalar(ByRef Vector3, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: MultiplyScalar
        path: ''
        startLine: 483
      summary: "\nMultiplies each axis of the vector by a scalar.\n"
      example: []
      syntax:
        content:
          CSharp: public static void MultiplyScalar(ref Vector3 vector, float scalar)
          VB: Public Shared Sub MultiplyScalar(ByRef vector As Vector3, scalar As Single)
        parameters:
        - id: vector
          type: Global.Vector3
          description: ''
        - id: scalar
          type: System.Single
          description: ''
      overload: NomUtils.Math.VectorUtility.MultiplyScalar*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.VectorUtility.CalculateSqrMagnitude(Vector2@)
      commentId: M:NomUtils.Math.VectorUtility.CalculateSqrMagnitude(Vector2@)
      language: CSharp
      name:
        CSharp: CalculateSqrMagnitude(Vector2)
        VB: CalculateSqrMagnitude(ByRef Vector2)
      nameWithType:
        CSharp: VectorUtility.CalculateSqrMagnitude(Vector2)
        VB: VectorUtility.CalculateSqrMagnitude(ByRef Vector2)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.CalculateSqrMagnitude(Vector2)
        VB: NomUtils.Math.VectorUtility.CalculateSqrMagnitude(ByRef Vector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateSqrMagnitude
        path: ''
        startLine: 490
      syntax:
        content:
          CSharp: public static float CalculateSqrMagnitude(in Vector2 vector)
          VB: Public Shared Function CalculateSqrMagnitude(ByRef vector As Vector2) As Single
        parameters:
        - id: vector
          type: Global.Vector2
        return:
          type: System.Single
      overload: NomUtils.Math.VectorUtility.CalculateSqrMagnitude*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.VectorUtility.CalculateSqrMagnitude(Vector3@)
      commentId: M:NomUtils.Math.VectorUtility.CalculateSqrMagnitude(Vector3@)
      language: CSharp
      name:
        CSharp: CalculateSqrMagnitude(Vector3)
        VB: CalculateSqrMagnitude(ByRef Vector3)
      nameWithType:
        CSharp: VectorUtility.CalculateSqrMagnitude(Vector3)
        VB: VectorUtility.CalculateSqrMagnitude(ByRef Vector3)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.CalculateSqrMagnitude(Vector3)
        VB: NomUtils.Math.VectorUtility.CalculateSqrMagnitude(ByRef Vector3)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateSqrMagnitude
        path: ''
        startLine: 495
      syntax:
        content:
          CSharp: public static float CalculateSqrMagnitude(in Vector3 vector)
          VB: Public Shared Function CalculateSqrMagnitude(ByRef vector As Vector3) As Single
        parameters:
        - id: vector
          type: Global.Vector3
        return:
          type: System.Single
      overload: NomUtils.Math.VectorUtility.CalculateSqrMagnitude*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.VectorUtility.CalculateSqrMagnitude(Vector4@)
      commentId: M:NomUtils.Math.VectorUtility.CalculateSqrMagnitude(Vector4@)
      language: CSharp
      name:
        CSharp: CalculateSqrMagnitude(Vector4)
        VB: CalculateSqrMagnitude(ByRef Vector4)
      nameWithType:
        CSharp: VectorUtility.CalculateSqrMagnitude(Vector4)
        VB: VectorUtility.CalculateSqrMagnitude(ByRef Vector4)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.CalculateSqrMagnitude(Vector4)
        VB: NomUtils.Math.VectorUtility.CalculateSqrMagnitude(ByRef Vector4)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateSqrMagnitude
        path: ''
        startLine: 500
      syntax:
        content:
          CSharp: public static float CalculateSqrMagnitude(in Vector4 vector)
          VB: Public Shared Function CalculateSqrMagnitude(ByRef vector As Vector4) As Single
        parameters:
        - id: vector
          type: Global.Vector4
        return:
          type: System.Single
      overload: NomUtils.Math.VectorUtility.CalculateSqrMagnitude*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeSub(Vector2@,Vector2@)
      commentId: M:NomUtils.Math.VectorUtility.CalculateSqrMagnitudeSub(Vector2@,Vector2@)
      language: CSharp
      name:
        CSharp: CalculateSqrMagnitudeSub(Vector2, Vector2)
        VB: CalculateSqrMagnitudeSub(ByRef Vector2, ByRef Vector2)
      nameWithType:
        CSharp: VectorUtility.CalculateSqrMagnitudeSub(Vector2, Vector2)
        VB: VectorUtility.CalculateSqrMagnitudeSub(ByRef Vector2, ByRef Vector2)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeSub(Vector2, Vector2)
        VB: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeSub(ByRef Vector2, ByRef Vector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateSqrMagnitudeSub
        path: ''
        startLine: 508
      summary: "\nCalculates the magnitude² between the difference of two vectors.\n"
      example: []
      syntax:
        content:
          CSharp: public static float CalculateSqrMagnitudeSub(in Vector2 lhs, in Vector2 rhs)
          VB: Public Shared Function CalculateSqrMagnitudeSub(ByRef lhs As Vector2, ByRef rhs As Vector2) As Single
        parameters:
        - id: lhs
          type: Global.Vector2
        - id: rhs
          type: Global.Vector2
        return:
          type: System.Single
      overload: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeSub*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeSub(Vector3@,Vector3@)
      commentId: M:NomUtils.Math.VectorUtility.CalculateSqrMagnitudeSub(Vector3@,Vector3@)
      language: CSharp
      name:
        CSharp: CalculateSqrMagnitudeSub(Vector3, Vector3)
        VB: CalculateSqrMagnitudeSub(ByRef Vector3, ByRef Vector3)
      nameWithType:
        CSharp: VectorUtility.CalculateSqrMagnitudeSub(Vector3, Vector3)
        VB: VectorUtility.CalculateSqrMagnitudeSub(ByRef Vector3, ByRef Vector3)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeSub(Vector3, Vector3)
        VB: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeSub(ByRef Vector3, ByRef Vector3)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateSqrMagnitudeSub
        path: ''
        startLine: 517
      summary: "\nCalculates the magnitude² between the difference of two vectors.\n"
      example: []
      syntax:
        content:
          CSharp: public static float CalculateSqrMagnitudeSub(in Vector3 lhs, in Vector3 rhs)
          VB: Public Shared Function CalculateSqrMagnitudeSub(ByRef lhs As Vector3, ByRef rhs As Vector3) As Single
        parameters:
        - id: lhs
          type: Global.Vector3
        - id: rhs
          type: Global.Vector3
        return:
          type: System.Single
      overload: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeSub*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeSub(Vector4@,Vector4@)
      commentId: M:NomUtils.Math.VectorUtility.CalculateSqrMagnitudeSub(Vector4@,Vector4@)
      language: CSharp
      name:
        CSharp: CalculateSqrMagnitudeSub(Vector4, Vector4)
        VB: CalculateSqrMagnitudeSub(ByRef Vector4, ByRef Vector4)
      nameWithType:
        CSharp: VectorUtility.CalculateSqrMagnitudeSub(Vector4, Vector4)
        VB: VectorUtility.CalculateSqrMagnitudeSub(ByRef Vector4, ByRef Vector4)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeSub(Vector4, Vector4)
        VB: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeSub(ByRef Vector4, ByRef Vector4)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateSqrMagnitudeSub
        path: ''
        startLine: 527
      summary: "\nCalculates the magnitude² between the difference of two vectors.\n"
      example: []
      syntax:
        content:
          CSharp: public static float CalculateSqrMagnitudeSub(in Vector4 lhs, in Vector4 rhs)
          VB: Public Shared Function CalculateSqrMagnitudeSub(ByRef lhs As Vector4, ByRef rhs As Vector4) As Single
        parameters:
        - id: lhs
          type: Global.Vector4
        - id: rhs
          type: Global.Vector4
        return:
          type: System.Single
      overload: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeSub*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeAdd(Vector2@,Vector2@)
      commentId: M:NomUtils.Math.VectorUtility.CalculateSqrMagnitudeAdd(Vector2@,Vector2@)
      language: CSharp
      name:
        CSharp: CalculateSqrMagnitudeAdd(Vector2, Vector2)
        VB: CalculateSqrMagnitudeAdd(ByRef Vector2, ByRef Vector2)
      nameWithType:
        CSharp: VectorUtility.CalculateSqrMagnitudeAdd(Vector2, Vector2)
        VB: VectorUtility.CalculateSqrMagnitudeAdd(ByRef Vector2, ByRef Vector2)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeAdd(Vector2, Vector2)
        VB: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeAdd(ByRef Vector2, ByRef Vector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateSqrMagnitudeAdd
        path: ''
        startLine: 538
      summary: "\nCalculates the magnitude² between the sum of two vectors.\n"
      example: []
      syntax:
        content:
          CSharp: public static float CalculateSqrMagnitudeAdd(in Vector2 lhs, in Vector2 rhs)
          VB: Public Shared Function CalculateSqrMagnitudeAdd(ByRef lhs As Vector2, ByRef rhs As Vector2) As Single
        parameters:
        - id: lhs
          type: Global.Vector2
        - id: rhs
          type: Global.Vector2
        return:
          type: System.Single
      overload: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeAdd*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeAdd(Vector3@,Vector3@)
      commentId: M:NomUtils.Math.VectorUtility.CalculateSqrMagnitudeAdd(Vector3@,Vector3@)
      language: CSharp
      name:
        CSharp: CalculateSqrMagnitudeAdd(Vector3, Vector3)
        VB: CalculateSqrMagnitudeAdd(ByRef Vector3, ByRef Vector3)
      nameWithType:
        CSharp: VectorUtility.CalculateSqrMagnitudeAdd(Vector3, Vector3)
        VB: VectorUtility.CalculateSqrMagnitudeAdd(ByRef Vector3, ByRef Vector3)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeAdd(Vector3, Vector3)
        VB: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeAdd(ByRef Vector3, ByRef Vector3)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateSqrMagnitudeAdd
        path: ''
        startLine: 547
      summary: "\nCalculates the magnitude² between the sum of two vectors.\n"
      example: []
      syntax:
        content:
          CSharp: public static float CalculateSqrMagnitudeAdd(in Vector3 lhs, in Vector3 rhs)
          VB: Public Shared Function CalculateSqrMagnitudeAdd(ByRef lhs As Vector3, ByRef rhs As Vector3) As Single
        parameters:
        - id: lhs
          type: Global.Vector3
        - id: rhs
          type: Global.Vector3
        return:
          type: System.Single
      overload: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeAdd*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeAdd(Vector4@,Vector4@)
      commentId: M:NomUtils.Math.VectorUtility.CalculateSqrMagnitudeAdd(Vector4@,Vector4@)
      language: CSharp
      name:
        CSharp: CalculateSqrMagnitudeAdd(Vector4, Vector4)
        VB: CalculateSqrMagnitudeAdd(ByRef Vector4, ByRef Vector4)
      nameWithType:
        CSharp: VectorUtility.CalculateSqrMagnitudeAdd(Vector4, Vector4)
        VB: VectorUtility.CalculateSqrMagnitudeAdd(ByRef Vector4, ByRef Vector4)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeAdd(Vector4, Vector4)
        VB: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeAdd(ByRef Vector4, ByRef Vector4)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateSqrMagnitudeAdd
        path: ''
        startLine: 557
      summary: "\nCalculates the square magnitude between the sum of two vectors.\n"
      example: []
      syntax:
        content:
          CSharp: public static float CalculateSqrMagnitudeAdd(in Vector4 lhs, in Vector4 rhs)
          VB: Public Shared Function CalculateSqrMagnitudeAdd(ByRef lhs As Vector4, ByRef rhs As Vector4) As Single
        parameters:
        - id: lhs
          type: Global.Vector4
        - id: rhs
          type: Global.Vector4
        return:
          type: System.Single
      overload: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeAdd*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.VectorUtility.CalculateMagnitude(Vector2@)
      commentId: M:NomUtils.Math.VectorUtility.CalculateMagnitude(Vector2@)
      language: CSharp
      name:
        CSharp: CalculateMagnitude(Vector2)
        VB: CalculateMagnitude(ByRef Vector2)
      nameWithType:
        CSharp: VectorUtility.CalculateMagnitude(Vector2)
        VB: VectorUtility.CalculateMagnitude(ByRef Vector2)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.CalculateMagnitude(Vector2)
        VB: NomUtils.Math.VectorUtility.CalculateMagnitude(ByRef Vector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateMagnitude
        path: ''
        startLine: 565
      syntax:
        content:
          CSharp: public static float CalculateMagnitude(in Vector2 vector)
          VB: Public Shared Function CalculateMagnitude(ByRef vector As Vector2) As Single
        parameters:
        - id: vector
          type: Global.Vector2
        return:
          type: System.Single
      overload: NomUtils.Math.VectorUtility.CalculateMagnitude*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.VectorUtility.CalculateMagnitude(Vector3@)
      commentId: M:NomUtils.Math.VectorUtility.CalculateMagnitude(Vector3@)
      language: CSharp
      name:
        CSharp: CalculateMagnitude(Vector3)
        VB: CalculateMagnitude(ByRef Vector3)
      nameWithType:
        CSharp: VectorUtility.CalculateMagnitude(Vector3)
        VB: VectorUtility.CalculateMagnitude(ByRef Vector3)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.CalculateMagnitude(Vector3)
        VB: NomUtils.Math.VectorUtility.CalculateMagnitude(ByRef Vector3)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateMagnitude
        path: ''
        startLine: 570
      syntax:
        content:
          CSharp: public static float CalculateMagnitude(in Vector3 vector)
          VB: Public Shared Function CalculateMagnitude(ByRef vector As Vector3) As Single
        parameters:
        - id: vector
          type: Global.Vector3
        return:
          type: System.Single
      overload: NomUtils.Math.VectorUtility.CalculateMagnitude*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.VectorUtility.CalculateMagnitude(Vector4@)
      commentId: M:NomUtils.Math.VectorUtility.CalculateMagnitude(Vector4@)
      language: CSharp
      name:
        CSharp: CalculateMagnitude(Vector4)
        VB: CalculateMagnitude(ByRef Vector4)
      nameWithType:
        CSharp: VectorUtility.CalculateMagnitude(Vector4)
        VB: VectorUtility.CalculateMagnitude(ByRef Vector4)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.CalculateMagnitude(Vector4)
        VB: NomUtils.Math.VectorUtility.CalculateMagnitude(ByRef Vector4)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateMagnitude
        path: ''
        startLine: 575
      syntax:
        content:
          CSharp: public static float CalculateMagnitude(in Vector4 vector)
          VB: Public Shared Function CalculateMagnitude(ByRef vector As Vector4) As Single
        parameters:
        - id: vector
          type: Global.Vector4
        return:
          type: System.Single
      overload: NomUtils.Math.VectorUtility.CalculateMagnitude*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.VectorUtility.CalculateMagnitudeSub(Vector2@,Vector2@)
      commentId: M:NomUtils.Math.VectorUtility.CalculateMagnitudeSub(Vector2@,Vector2@)
      language: CSharp
      name:
        CSharp: CalculateMagnitudeSub(Vector2, Vector2)
        VB: CalculateMagnitudeSub(ByRef Vector2, ByRef Vector2)
      nameWithType:
        CSharp: VectorUtility.CalculateMagnitudeSub(Vector2, Vector2)
        VB: VectorUtility.CalculateMagnitudeSub(ByRef Vector2, ByRef Vector2)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.CalculateMagnitudeSub(Vector2, Vector2)
        VB: NomUtils.Math.VectorUtility.CalculateMagnitudeSub(ByRef Vector2, ByRef Vector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateMagnitudeSub
        path: ''
        startLine: 583
      summary: "\nCalculates the magnitude between the difference of two vectors.\n"
      example: []
      syntax:
        content:
          CSharp: public static float CalculateMagnitudeSub(in Vector2 lhs, in Vector2 rhs)
          VB: Public Shared Function CalculateMagnitudeSub(ByRef lhs As Vector2, ByRef rhs As Vector2) As Single
        parameters:
        - id: lhs
          type: Global.Vector2
        - id: rhs
          type: Global.Vector2
        return:
          type: System.Single
      overload: NomUtils.Math.VectorUtility.CalculateMagnitudeSub*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.VectorUtility.CalculateMagnitudeSub(Vector3@,Vector3@)
      commentId: M:NomUtils.Math.VectorUtility.CalculateMagnitudeSub(Vector3@,Vector3@)
      language: CSharp
      name:
        CSharp: CalculateMagnitudeSub(Vector3, Vector3)
        VB: CalculateMagnitudeSub(ByRef Vector3, ByRef Vector3)
      nameWithType:
        CSharp: VectorUtility.CalculateMagnitudeSub(Vector3, Vector3)
        VB: VectorUtility.CalculateMagnitudeSub(ByRef Vector3, ByRef Vector3)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.CalculateMagnitudeSub(Vector3, Vector3)
        VB: NomUtils.Math.VectorUtility.CalculateMagnitudeSub(ByRef Vector3, ByRef Vector3)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateMagnitudeSub
        path: ''
        startLine: 593
      summary: "\nCalculates the magnitude between the difference of two vectors.\n"
      example: []
      syntax:
        content:
          CSharp: public static float CalculateMagnitudeSub(in Vector3 lhs, in Vector3 rhs)
          VB: Public Shared Function CalculateMagnitudeSub(ByRef lhs As Vector3, ByRef rhs As Vector3) As Single
        parameters:
        - id: lhs
          type: Global.Vector3
        - id: rhs
          type: Global.Vector3
        return:
          type: System.Single
      overload: NomUtils.Math.VectorUtility.CalculateMagnitudeSub*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.VectorUtility.CalculateMagnitudeSub(Vector4@,Vector4@)
      commentId: M:NomUtils.Math.VectorUtility.CalculateMagnitudeSub(Vector4@,Vector4@)
      language: CSharp
      name:
        CSharp: CalculateMagnitudeSub(Vector4, Vector4)
        VB: CalculateMagnitudeSub(ByRef Vector4, ByRef Vector4)
      nameWithType:
        CSharp: VectorUtility.CalculateMagnitudeSub(Vector4, Vector4)
        VB: VectorUtility.CalculateMagnitudeSub(ByRef Vector4, ByRef Vector4)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.CalculateMagnitudeSub(Vector4, Vector4)
        VB: NomUtils.Math.VectorUtility.CalculateMagnitudeSub(ByRef Vector4, ByRef Vector4)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateMagnitudeSub
        path: ''
        startLine: 604
      summary: "\nCalculates the magnitude between the difference of two vectors.\n"
      example: []
      syntax:
        content:
          CSharp: public static float CalculateMagnitudeSub(in Vector4 lhs, in Vector4 rhs)
          VB: Public Shared Function CalculateMagnitudeSub(ByRef lhs As Vector4, ByRef rhs As Vector4) As Single
        parameters:
        - id: lhs
          type: Global.Vector4
        - id: rhs
          type: Global.Vector4
        return:
          type: System.Single
      overload: NomUtils.Math.VectorUtility.CalculateMagnitudeSub*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.VectorUtility.CalculateMagnitudeAdd(Vector2@,Vector2@)
      commentId: M:NomUtils.Math.VectorUtility.CalculateMagnitudeAdd(Vector2@,Vector2@)
      language: CSharp
      name:
        CSharp: CalculateMagnitudeAdd(Vector2, Vector2)
        VB: CalculateMagnitudeAdd(ByRef Vector2, ByRef Vector2)
      nameWithType:
        CSharp: VectorUtility.CalculateMagnitudeAdd(Vector2, Vector2)
        VB: VectorUtility.CalculateMagnitudeAdd(ByRef Vector2, ByRef Vector2)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.CalculateMagnitudeAdd(Vector2, Vector2)
        VB: NomUtils.Math.VectorUtility.CalculateMagnitudeAdd(ByRef Vector2, ByRef Vector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateMagnitudeAdd
        path: ''
        startLine: 616
      summary: "\nCalculates the magnitude between the sum of two vectors.\n"
      example: []
      syntax:
        content:
          CSharp: public static float CalculateMagnitudeAdd(in Vector2 lhs, in Vector2 rhs)
          VB: Public Shared Function CalculateMagnitudeAdd(ByRef lhs As Vector2, ByRef rhs As Vector2) As Single
        parameters:
        - id: lhs
          type: Global.Vector2
        - id: rhs
          type: Global.Vector2
        return:
          type: System.Single
      overload: NomUtils.Math.VectorUtility.CalculateMagnitudeAdd*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.VectorUtility.CalculateMagnitudeAdd(Vector3@,Vector3@)
      commentId: M:NomUtils.Math.VectorUtility.CalculateMagnitudeAdd(Vector3@,Vector3@)
      language: CSharp
      name:
        CSharp: CalculateMagnitudeAdd(Vector3, Vector3)
        VB: CalculateMagnitudeAdd(ByRef Vector3, ByRef Vector3)
      nameWithType:
        CSharp: VectorUtility.CalculateMagnitudeAdd(Vector3, Vector3)
        VB: VectorUtility.CalculateMagnitudeAdd(ByRef Vector3, ByRef Vector3)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.CalculateMagnitudeAdd(Vector3, Vector3)
        VB: NomUtils.Math.VectorUtility.CalculateMagnitudeAdd(ByRef Vector3, ByRef Vector3)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateMagnitudeAdd
        path: ''
        startLine: 626
      summary: "\nCalculates the magnitude between the sum of two vectors.\n"
      example: []
      syntax:
        content:
          CSharp: public static float CalculateMagnitudeAdd(in Vector3 lhs, in Vector3 rhs)
          VB: Public Shared Function CalculateMagnitudeAdd(ByRef lhs As Vector3, ByRef rhs As Vector3) As Single
        parameters:
        - id: lhs
          type: Global.Vector3
        - id: rhs
          type: Global.Vector3
        return:
          type: System.Single
      overload: NomUtils.Math.VectorUtility.CalculateMagnitudeAdd*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.VectorUtility.CalculateMagnitudeAdd(Vector4@,Vector4@)
      commentId: M:NomUtils.Math.VectorUtility.CalculateMagnitudeAdd(Vector4@,Vector4@)
      language: CSharp
      name:
        CSharp: CalculateMagnitudeAdd(Vector4, Vector4)
        VB: CalculateMagnitudeAdd(ByRef Vector4, ByRef Vector4)
      nameWithType:
        CSharp: VectorUtility.CalculateMagnitudeAdd(Vector4, Vector4)
        VB: VectorUtility.CalculateMagnitudeAdd(ByRef Vector4, ByRef Vector4)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.CalculateMagnitudeAdd(Vector4, Vector4)
        VB: NomUtils.Math.VectorUtility.CalculateMagnitudeAdd(ByRef Vector4, ByRef Vector4)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: CalculateMagnitudeAdd
        path: ''
        startLine: 637
      summary: "\nCalculates the magnitude between the sum of two vectors.\n"
      example: []
      syntax:
        content:
          CSharp: public static float CalculateMagnitudeAdd(in Vector4 lhs, in Vector4 rhs)
          VB: Public Shared Function CalculateMagnitudeAdd(ByRef lhs As Vector4, ByRef rhs As Vector4) As Single
        parameters:
        - id: lhs
          type: Global.Vector4
        - id: rhs
          type: Global.Vector4
        return:
          type: System.Single
      overload: NomUtils.Math.VectorUtility.CalculateMagnitudeAdd*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.VectorUtility.Dot(Vector2@,Vector2@)
      commentId: M:NomUtils.Math.VectorUtility.Dot(Vector2@,Vector2@)
      language: CSharp
      name:
        CSharp: Dot(Vector2, Vector2)
        VB: Dot(ByRef Vector2, ByRef Vector2)
      nameWithType:
        CSharp: VectorUtility.Dot(Vector2, Vector2)
        VB: VectorUtility.Dot(ByRef Vector2, ByRef Vector2)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.Dot(Vector2, Vector2)
        VB: NomUtils.Math.VectorUtility.Dot(ByRef Vector2, ByRef Vector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: Dot
        path: ''
        startLine: 646
      syntax:
        content:
          CSharp: public static float Dot(in Vector2 lhs, in Vector2 rhs)
          VB: Public Shared Function Dot(ByRef lhs As Vector2, ByRef rhs As Vector2) As Single
        parameters:
        - id: lhs
          type: Global.Vector2
        - id: rhs
          type: Global.Vector2
        return:
          type: System.Single
      overload: NomUtils.Math.VectorUtility.Dot*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.VectorUtility.Dot(Vector3@,Vector3@)
      commentId: M:NomUtils.Math.VectorUtility.Dot(Vector3@,Vector3@)
      language: CSharp
      name:
        CSharp: Dot(Vector3, Vector3)
        VB: Dot(ByRef Vector3, ByRef Vector3)
      nameWithType:
        CSharp: VectorUtility.Dot(Vector3, Vector3)
        VB: VectorUtility.Dot(ByRef Vector3, ByRef Vector3)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.Dot(Vector3, Vector3)
        VB: NomUtils.Math.VectorUtility.Dot(ByRef Vector3, ByRef Vector3)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: Dot
        path: ''
        startLine: 651
      syntax:
        content:
          CSharp: public static float Dot(in Vector3 lhs, in Vector3 rhs)
          VB: Public Shared Function Dot(ByRef lhs As Vector3, ByRef rhs As Vector3) As Single
        parameters:
        - id: lhs
          type: Global.Vector3
        - id: rhs
          type: Global.Vector3
        return:
          type: System.Single
      overload: NomUtils.Math.VectorUtility.Dot*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.VectorUtility.Dot(Vector4@,Vector4@)
      commentId: M:NomUtils.Math.VectorUtility.Dot(Vector4@,Vector4@)
      language: CSharp
      name:
        CSharp: Dot(Vector4, Vector4)
        VB: Dot(ByRef Vector4, ByRef Vector4)
      nameWithType:
        CSharp: VectorUtility.Dot(Vector4, Vector4)
        VB: VectorUtility.Dot(ByRef Vector4, ByRef Vector4)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.Dot(Vector4, Vector4)
        VB: NomUtils.Math.VectorUtility.Dot(ByRef Vector4, ByRef Vector4)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: Dot
        path: ''
        startLine: 656
      syntax:
        content:
          CSharp: public static float Dot(in Vector4 lhs, in Vector4 rhs)
          VB: Public Shared Function Dot(ByRef lhs As Vector4, ByRef rhs As Vector4) As Single
        parameters:
        - id: lhs
          type: Global.Vector4
        - id: rhs
          type: Global.Vector4
        return:
          type: System.Single
      overload: NomUtils.Math.VectorUtility.Dot*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.VectorUtility.IsOrthogonal(Vector3@,Vector3@)
      commentId: M:NomUtils.Math.VectorUtility.IsOrthogonal(Vector3@,Vector3@)
      language: CSharp
      name:
        CSharp: IsOrthogonal(Vector3, Vector3)
        VB: IsOrthogonal(ByRef Vector3, ByRef Vector3)
      nameWithType:
        CSharp: VectorUtility.IsOrthogonal(Vector3, Vector3)
        VB: VectorUtility.IsOrthogonal(ByRef Vector3, ByRef Vector3)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.IsOrthogonal(Vector3, Vector3)
        VB: NomUtils.Math.VectorUtility.IsOrthogonal(ByRef Vector3, ByRef Vector3)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: IsOrthogonal
        path: ''
        startLine: 661
      syntax:
        content:
          CSharp: public static bool IsOrthogonal(in Vector3 lhs, in Vector3 rhs)
          VB: Public Shared Function IsOrthogonal(ByRef lhs As Vector3, ByRef rhs As Vector3) As Boolean
        parameters:
        - id: lhs
          type: Global.Vector3
        - id: rhs
          type: Global.Vector3
        return:
          type: System.Boolean
      overload: NomUtils.Math.VectorUtility.IsOrthogonal*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.VectorUtility.GetAngleRadians(Vector2@,Vector2@)
      commentId: M:NomUtils.Math.VectorUtility.GetAngleRadians(Vector2@,Vector2@)
      language: CSharp
      name:
        CSharp: GetAngleRadians(Vector2, Vector2)
        VB: GetAngleRadians(ByRef Vector2, ByRef Vector2)
      nameWithType:
        CSharp: VectorUtility.GetAngleRadians(Vector2, Vector2)
        VB: VectorUtility.GetAngleRadians(ByRef Vector2, ByRef Vector2)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.GetAngleRadians(Vector2, Vector2)
        VB: NomUtils.Math.VectorUtility.GetAngleRadians(ByRef Vector2, ByRef Vector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: GetAngleRadians
        path: ''
        startLine: 666
      syntax:
        content:
          CSharp: public static float GetAngleRadians(in Vector2 lhs, in Vector2 rhs)
          VB: Public Shared Function GetAngleRadians(ByRef lhs As Vector2, ByRef rhs As Vector2) As Single
        parameters:
        - id: lhs
          type: Global.Vector2
        - id: rhs
          type: Global.Vector2
        return:
          type: System.Single
      overload: NomUtils.Math.VectorUtility.GetAngleRadians*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.VectorUtility.GetAngleRadians(Vector3@,Vector3@)
      commentId: M:NomUtils.Math.VectorUtility.GetAngleRadians(Vector3@,Vector3@)
      language: CSharp
      name:
        CSharp: GetAngleRadians(Vector3, Vector3)
        VB: GetAngleRadians(ByRef Vector3, ByRef Vector3)
      nameWithType:
        CSharp: VectorUtility.GetAngleRadians(Vector3, Vector3)
        VB: VectorUtility.GetAngleRadians(ByRef Vector3, ByRef Vector3)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.GetAngleRadians(Vector3, Vector3)
        VB: NomUtils.Math.VectorUtility.GetAngleRadians(ByRef Vector3, ByRef Vector3)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: GetAngleRadians
        path: ''
        startLine: 679
      syntax:
        content:
          CSharp: public static float GetAngleRadians(in Vector3 lhs, in Vector3 rhs)
          VB: Public Shared Function GetAngleRadians(ByRef lhs As Vector3, ByRef rhs As Vector3) As Single
        parameters:
        - id: lhs
          type: Global.Vector3
        - id: rhs
          type: Global.Vector3
        return:
          type: System.Single
      overload: NomUtils.Math.VectorUtility.GetAngleRadians*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.VectorUtility.GetAngleDegrees(Vector2@,Vector2@)
      commentId: M:NomUtils.Math.VectorUtility.GetAngleDegrees(Vector2@,Vector2@)
      language: CSharp
      name:
        CSharp: GetAngleDegrees(Vector2, Vector2)
        VB: GetAngleDegrees(ByRef Vector2, ByRef Vector2)
      nameWithType:
        CSharp: VectorUtility.GetAngleDegrees(Vector2, Vector2)
        VB: VectorUtility.GetAngleDegrees(ByRef Vector2, ByRef Vector2)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.GetAngleDegrees(Vector2, Vector2)
        VB: NomUtils.Math.VectorUtility.GetAngleDegrees(ByRef Vector2, ByRef Vector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: GetAngleDegrees
        path: ''
        startLine: 692
      syntax:
        content:
          CSharp: public static float GetAngleDegrees(in Vector2 lhs, in Vector2 rhs)
          VB: Public Shared Function GetAngleDegrees(ByRef lhs As Vector2, ByRef rhs As Vector2) As Single
        parameters:
        - id: lhs
          type: Global.Vector2
        - id: rhs
          type: Global.Vector2
        return:
          type: System.Single
      overload: NomUtils.Math.VectorUtility.GetAngleDegrees*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.VectorUtility.GetAngleDegrees(Vector3@,Vector3@)
      commentId: M:NomUtils.Math.VectorUtility.GetAngleDegrees(Vector3@,Vector3@)
      language: CSharp
      name:
        CSharp: GetAngleDegrees(Vector3, Vector3)
        VB: GetAngleDegrees(ByRef Vector3, ByRef Vector3)
      nameWithType:
        CSharp: VectorUtility.GetAngleDegrees(Vector3, Vector3)
        VB: VectorUtility.GetAngleDegrees(ByRef Vector3, ByRef Vector3)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.GetAngleDegrees(Vector3, Vector3)
        VB: NomUtils.Math.VectorUtility.GetAngleDegrees(ByRef Vector3, ByRef Vector3)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: GetAngleDegrees
        path: ''
        startLine: 697
      syntax:
        content:
          CSharp: public static float GetAngleDegrees(in Vector3 lhs, in Vector3 rhs)
          VB: Public Shared Function GetAngleDegrees(ByRef lhs As Vector3, ByRef rhs As Vector3) As Single
        parameters:
        - id: lhs
          type: Global.Vector3
        - id: rhs
          type: Global.Vector3
        return:
          type: System.Single
      overload: NomUtils.Math.VectorUtility.GetAngleDegrees*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.VectorUtility.GetAngleDiamond(Vector2@)
      commentId: M:NomUtils.Math.VectorUtility.GetAngleDiamond(Vector2@)
      language: CSharp
      name:
        CSharp: GetAngleDiamond(Vector2)
        VB: GetAngleDiamond(ByRef Vector2)
      nameWithType:
        CSharp: VectorUtility.GetAngleDiamond(Vector2)
        VB: VectorUtility.GetAngleDiamond(ByRef Vector2)
      qualifiedName:
        CSharp: NomUtils.Math.VectorUtility.GetAngleDiamond(Vector2)
        VB: NomUtils.Math.VectorUtility.GetAngleDiamond(ByRef Vector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math
      source:
        id: GetAngleDiamond
        path: ''
        startLine: 702
      syntax:
        content:
          CSharp: public static float GetAngleDiamond(in Vector2 vector)
          VB: Public Shared Function GetAngleDiamond(ByRef vector As Vector2) As Single
        parameters:
        - id: vector
          type: Global.Vector2
        return:
          type: System.Single
      overload: NomUtils.Math.VectorUtility.GetAngleDiamond*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
- id: NomUtils.Math.Bits
  commentId: N:NomUtils.Math.Bits
  language: CSharp
  name:
    CSharp: NomUtils.Math.Bits
    VB: NomUtils.Math.Bits
  nameWithType:
    CSharp: NomUtils.Math.Bits
    VB: NomUtils.Math.Bits
  qualifiedName:
    CSharp: NomUtils.Math.Bits
    VB: NomUtils.Math.Bits
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: NomUtils.Math.Bits.Bit16
    commentId: T:NomUtils.Math.Bits.Bit16
    language: CSharp
    name:
      CSharp: Bit16
      VB: Bit16
    nameWithType:
      CSharp: Bit16
      VB: Bit16
    qualifiedName:
      CSharp: NomUtils.Math.Bits.Bit16
      VB: NomUtils.Math.Bits.Bit16
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: NomUtils.Math.Bits
    source:
      id: Bit16
      path: ''
      startLine: 714
    syntax:
      content:
        CSharp: public class Bit16
        VB: Public Class Bit16
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: NomUtils.Math.Bits.Bit16.#ctor
      commentId: M:NomUtils.Math.Bits.Bit16.#ctor
      language: CSharp
      name:
        CSharp: Bit16()
        VB: Bit16()
      nameWithType:
        CSharp: Bit16.Bit16()
        VB: Bit16.Bit16()
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit16.Bit16()
        VB: NomUtils.Math.Bits.Bit16.Bit16()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: .ctor
        path: ''
        startLine: 717
      syntax:
        content:
          CSharp: public Bit16()
          VB: Public Sub New
      overload: NomUtils.Math.Bits.Bit16.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit16.#ctor(InternalType)
      commentId: M:NomUtils.Math.Bits.Bit16.#ctor(InternalType)
      language: CSharp
      name:
        CSharp: Bit16(InternalType)
        VB: Bit16(InternalType)
      nameWithType:
        CSharp: Bit16.Bit16(InternalType)
        VB: Bit16.Bit16(InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit16.Bit16(InternalType)
        VB: NomUtils.Math.Bits.Bit16.Bit16(InternalType)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: .ctor
        path: ''
        startLine: 719
      syntax:
        content:
          CSharp: public Bit16(InternalType baseValue)
          VB: Public Sub New(baseValue As InternalType)
        parameters:
        - id: baseValue
          type: Global.InternalType
      overload: NomUtils.Math.Bits.Bit16.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit16.#ctor(Enum)
      commentId: M:NomUtils.Math.Bits.Bit16.#ctor(Enum)
      language: CSharp
      name:
        CSharp: Bit16(Enum)
        VB: Bit16(Enum)
      nameWithType:
        CSharp: Bit16.Bit16(Enum)
        VB: Bit16.Bit16(Enum)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit16.Bit16(Enum)
        VB: NomUtils.Math.Bits.Bit16.Bit16(Enum)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: .ctor
        path: ''
        startLine: 723
      syntax:
        content:
          CSharp: public Bit16(Enum enumValue)
          VB: Public Sub New(enumValue As  Enum)
        parameters:
        - id: enumValue
          type: Global.Enum
      overload: NomUtils.Math.Bits.Bit16.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit16.Clear
      commentId: M:NomUtils.Math.Bits.Bit16.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: Bit16.Clear()
        VB: Bit16.Clear()
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit16.Clear()
        VB: NomUtils.Math.Bits.Bit16.Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Clear
        path: ''
        startLine: 730
      summary: "\nResets the internal bits.\n"
      example: []
      syntax:
        content:
          CSharp: public Self Clear()
          VB: Public Function Clear As Self
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit16.Clear*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit16.Set(InternalType)
      commentId: M:NomUtils.Math.Bits.Bit16.Set(InternalType)
      language: CSharp
      name:
        CSharp: Set(InternalType)
        VB: Set(InternalType)
      nameWithType:
        CSharp: Bit16.Set(InternalType)
        VB: Bit16.Set(InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit16.Set(InternalType)
        VB: NomUtils.Math.Bits.Bit16.Set(InternalType)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Set
        path: ''
        startLine: 738
      summary: "\nDirectly sets the internal bits to <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>.\n"
      example: []
      syntax:
        content:
          CSharp: public Self Set(InternalType value)
          VB: Public Function Set(value As InternalType) As Self
        parameters:
        - id: value
          type: Global.InternalType
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit16.Set*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit16.Set(Enum)
      commentId: M:NomUtils.Math.Bits.Bit16.Set(Enum)
      language: CSharp
      name:
        CSharp: Set(Enum)
        VB: Set(Enum)
      nameWithType:
        CSharp: Bit16.Set(Enum)
        VB: Bit16.Set(Enum)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit16.Set(Enum)
        VB: NomUtils.Math.Bits.Bit16.Set(Enum)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Set
        path: ''
        startLine: 746
      summary: "\nDirectly sets the internal bits to <code data-dev-comment-type=\"paramref\" class=\"paramref\">enumValue</code>.\n"
      example: []
      syntax:
        content:
          CSharp: public Self Set(Enum enumValue)
          VB: Public Function Set(enumValue As  Enum) As Self
        parameters:
        - id: enumValue
          type: Global.Enum
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit16.Set*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit16.Or(InternalType)
      commentId: M:NomUtils.Math.Bits.Bit16.Or(InternalType)
      language: CSharp
      name:
        CSharp: Or(InternalType)
        VB: Or(InternalType)
      nameWithType:
        CSharp: Bit16.Or(InternalType)
        VB: Bit16.Or(InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit16.Or(InternalType)
        VB: NomUtils.Math.Bits.Bit16.Or(InternalType)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Or
        path: ''
        startLine: 759
      summary: "\nIf a bit is 1 in either operand, then 1 will be returned.\nOtherwise, 0 will be returned.\n<br /><br />\n0001 | 0000 = 0001<br />\n0001 | 0001 = 0001<br />\n1011 | 0100 = 1111\n"
      example: []
      syntax:
        content:
          CSharp: public Self Or(InternalType value)
          VB: Public Function Or(value As InternalType) As Self
        parameters:
        - id: value
          type: Global.InternalType
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit16.Or*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit16.Or(Enum)
      commentId: M:NomUtils.Math.Bits.Bit16.Or(Enum)
      language: CSharp
      name:
        CSharp: Or(Enum)
        VB: Or(Enum)
      nameWithType:
        CSharp: Bit16.Or(Enum)
        VB: Bit16.Or(Enum)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit16.Or(Enum)
        VB: NomUtils.Math.Bits.Bit16.Or(Enum)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Or
        path: ''
        startLine: 772
      summary: "\nIf a bit is 1 in either operand, then 1 will be returned.\nOtherwise, 0 will be returned.\n<br /><br />\n0001 | 0000 = 0001<br />\n0001 | 0001 = 0001<br />\n1011 | 0100 = 1111\n"
      example: []
      syntax:
        content:
          CSharp: public Self Or(Enum enumValue)
          VB: Public Function Or(enumValue As  Enum) As Self
        parameters:
        - id: enumValue
          type: Global.Enum
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit16.Or*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit16.And(InternalType)
      commentId: M:NomUtils.Math.Bits.Bit16.And(InternalType)
      language: CSharp
      name:
        CSharp: And(InternalType)
        VB: And(InternalType)
      nameWithType:
        CSharp: Bit16.And(InternalType)
        VB: Bit16.And(InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit16.And(InternalType)
        VB: NomUtils.Math.Bits.Bit16.And(InternalType)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: And
        path: ''
        startLine: 785
      summary: "\nIf a bit in both operands is the same, then the bit will return 1.\nOtherwise, the bit will return 0.\n<br /><br />\n0001 &amp; 0000 = 0000<br />\n0001 &amp; 0001 = 0001<br />\n0011 &amp; 0001 = 0001\n"
      example: []
      syntax:
        content:
          CSharp: public Self And(InternalType value)
          VB: Public Function And(value As InternalType) As Self
        parameters:
        - id: value
          type: Global.InternalType
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit16.And*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit16.And(Enum)
      commentId: M:NomUtils.Math.Bits.Bit16.And(Enum)
      language: CSharp
      name:
        CSharp: And(Enum)
        VB: And(Enum)
      nameWithType:
        CSharp: Bit16.And(Enum)
        VB: Bit16.And(Enum)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit16.And(Enum)
        VB: NomUtils.Math.Bits.Bit16.And(Enum)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: And
        path: ''
        startLine: 798
      summary: "\nIf a bit in both operands is the same, then the bit will return 1.\nOtherwise, the bit will return 0.\n<br /><br />\n0001 &amp; 0000 = 0000<br />\n0001 &amp; 0001 = 0001<br />\n0011 &amp; 0001 = 0001\n"
      example: []
      syntax:
        content:
          CSharp: public Self And(Enum enumValue)
          VB: Public Function And(enumValue As  Enum) As Self
        parameters:
        - id: enumValue
          type: Global.Enum
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit16.And*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit16.Invert
      commentId: M:NomUtils.Math.Bits.Bit16.Invert
      language: CSharp
      name:
        CSharp: Invert()
        VB: Invert()
      nameWithType:
        CSharp: Bit16.Invert()
        VB: Bit16.Invert()
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit16.Invert()
        VB: NomUtils.Math.Bits.Bit16.Invert()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Invert
        path: ''
        startLine: 810
      summary: "\nFlips every bit to its opposite value.\n<br /><br />\n~0001 = 1110<br />\n~1001 = 0110<br />\n~0011 = 1100\n"
      example: []
      syntax:
        content:
          CSharp: public Self Invert()
          VB: Public Function Invert As Self
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit16.Invert*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit16.Xor(InternalType)
      commentId: M:NomUtils.Math.Bits.Bit16.Xor(InternalType)
      language: CSharp
      name:
        CSharp: Xor(InternalType)
        VB: Xor(InternalType)
      nameWithType:
        CSharp: Bit16.Xor(InternalType)
        VB: Bit16.Xor(InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit16.Xor(InternalType)
        VB: NomUtils.Math.Bits.Bit16.Xor(InternalType)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Xor
        path: ''
        startLine: 823
      summary: "\nIf a bit in both operands is different, then the bit will return 1.\nOtherwise, the bit will return 0 if the bit is the same in both operands.\n<br /><br />\n0 ^ 0 = 0<br />\n0 ^ 1 = 1<br />\n1 ^ 1 = 0\n"
      example: []
      syntax:
        content:
          CSharp: public Self Xor(InternalType value)
          VB: Public Function Xor(value As InternalType) As Self
        parameters:
        - id: value
          type: Global.InternalType
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit16.Xor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit16.Xor(Enum)
      commentId: M:NomUtils.Math.Bits.Bit16.Xor(Enum)
      language: CSharp
      name:
        CSharp: Xor(Enum)
        VB: Xor(Enum)
      nameWithType:
        CSharp: Bit16.Xor(Enum)
        VB: Bit16.Xor(Enum)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit16.Xor(Enum)
        VB: NomUtils.Math.Bits.Bit16.Xor(Enum)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Xor
        path: ''
        startLine: 836
      summary: "\nIf a bit in both operands is different, then the bit will return 1.\nOtherwise, the bit will return 0 if the bit is the same in both operands.\n<br /><br />\n0000 ^ 0000 = 0000<br />\n0000 ^ 0001 = 0001<br />\n0001 ^ 0001 = 0000\n"
      example: []
      syntax:
        content:
          CSharp: public Self Xor(Enum enumValue)
          VB: Public Function Xor(enumValue As  Enum) As Self
        parameters:
        - id: enumValue
          type: Global.Enum
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit16.Xor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit16.ShiftLeft(System.Byte)
      commentId: M:NomUtils.Math.Bits.Bit16.ShiftLeft(System.Byte)
      language: CSharp
      name:
        CSharp: ShiftLeft(Byte)
        VB: ShiftLeft(Byte)
      nameWithType:
        CSharp: Bit16.ShiftLeft(Byte)
        VB: Bit16.ShiftLeft(Byte)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit16.ShiftLeft(System.Byte)
        VB: NomUtils.Math.Bits.Bit16.ShiftLeft(System.Byte)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: ShiftLeft
        path: ''
        startLine: 849
      summary: "\nShifts each bit by x amount of bits to the left.\n<br /><br />\n0001 &lt;&lt; 1 = 0010<br />\n0011 &lt;&lt; 2 = 1100<br />\n0111 &lt;&lt; 4 = 0000\n"
      example: []
      syntax:
        content:
          CSharp: public Self ShiftLeft(byte bits)
          VB: Public Function ShiftLeft(bits As Byte) As Self
        parameters:
        - id: bits
          type: System.Byte
          description: Amount of bits to shift to the left
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit16.ShiftLeft*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit16.ShiftRight(System.Byte)
      commentId: M:NomUtils.Math.Bits.Bit16.ShiftRight(System.Byte)
      language: CSharp
      name:
        CSharp: ShiftRight(Byte)
        VB: ShiftRight(Byte)
      nameWithType:
        CSharp: Bit16.ShiftRight(Byte)
        VB: Bit16.ShiftRight(Byte)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit16.ShiftRight(System.Byte)
        VB: NomUtils.Math.Bits.Bit16.ShiftRight(System.Byte)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: ShiftRight
        path: ''
        startLine: 862
      summary: "\nShifts each bit by x amount of bits to the right.\n<br /><br />\n1000 >> 1 = 0100<br />\n1100 >> 2 = 0011<br />\n1110 >> 4 = 0000\n"
      example: []
      syntax:
        content:
          CSharp: public Self ShiftRight(byte bits)
          VB: Public Function ShiftRight(bits As Byte) As Self
        parameters:
        - id: bits
          type: System.Byte
          description: Amount of bits to shift to the right
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit16.ShiftRight*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit16.Contains(InternalType)
      commentId: M:NomUtils.Math.Bits.Bit16.Contains(InternalType)
      language: CSharp
      name:
        CSharp: Contains(InternalType)
        VB: Contains(InternalType)
      nameWithType:
        CSharp: Bit16.Contains(InternalType)
        VB: Bit16.Contains(InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit16.Contains(InternalType)
        VB: NomUtils.Math.Bits.Bit16.Contains(InternalType)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Contains
        path: ''
        startLine: 871
      summary: "\nChecks if the bits in <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> exists in the internal bits.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Contains(InternalType value)
          VB: Public Function Contains(value As InternalType) As Boolean
        parameters:
        - id: value
          type: Global.InternalType
          description: Bits to check for.
        return:
          type: System.Boolean
      overload: NomUtils.Math.Bits.Bit16.Contains*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit16.Contains(Enum)
      commentId: M:NomUtils.Math.Bits.Bit16.Contains(Enum)
      language: CSharp
      name:
        CSharp: Contains(Enum)
        VB: Contains(Enum)
      nameWithType:
        CSharp: Bit16.Contains(Enum)
        VB: Bit16.Contains(Enum)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit16.Contains(Enum)
        VB: NomUtils.Math.Bits.Bit16.Contains(Enum)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Contains
        path: ''
        startLine: 879
      summary: "\nChecks if the bits in <code data-dev-comment-type=\"paramref\" class=\"paramref\">enumValue</code> exists in the internal bits.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Contains(Enum enumValue)
          VB: Public Function Contains(enumValue As  Enum) As Boolean
        parameters:
        - id: enumValue
          type: Global.Enum
          description: Bits to check for.
        return:
          type: System.Boolean
      overload: NomUtils.Math.Bits.Bit16.Contains*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit16.Equals(InternalType)
      commentId: M:NomUtils.Math.Bits.Bit16.Equals(InternalType)
      language: CSharp
      name:
        CSharp: Equals(InternalType)
        VB: Equals(InternalType)
      nameWithType:
        CSharp: Bit16.Equals(InternalType)
        VB: Bit16.Equals(InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit16.Equals(InternalType)
        VB: NomUtils.Math.Bits.Bit16.Equals(InternalType)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Equals
        path: ''
        startLine: 887
      summary: "\nChecks if the bits in <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> fully matches the internal bits.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Equals(InternalType value)
          VB: Public Function Equals(value As InternalType) As Boolean
        parameters:
        - id: value
          type: Global.InternalType
          description: Bits to check for.
        return:
          type: System.Boolean
      overload: NomUtils.Math.Bits.Bit16.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit16.Equals(Enum)
      commentId: M:NomUtils.Math.Bits.Bit16.Equals(Enum)
      language: CSharp
      name:
        CSharp: Equals(Enum)
        VB: Equals(Enum)
      nameWithType:
        CSharp: Bit16.Equals(Enum)
        VB: Bit16.Equals(Enum)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit16.Equals(Enum)
        VB: NomUtils.Math.Bits.Bit16.Equals(Enum)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Equals
        path: ''
        startLine: 895
      summary: "\nChecks if the bits in <code data-dev-comment-type=\"paramref\" class=\"paramref\">enumValue</code> fully matches the internal bits.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Equals(Enum enumValue)
          VB: Public Function Equals(enumValue As  Enum) As Boolean
        parameters:
        - id: enumValue
          type: Global.Enum
          description: Bits to check for.
        return:
          type: System.Boolean
      overload: NomUtils.Math.Bits.Bit16.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit16.ToBitString
      commentId: M:NomUtils.Math.Bits.Bit16.ToBitString
      language: CSharp
      name:
        CSharp: ToBitString()
        VB: ToBitString()
      nameWithType:
        CSharp: Bit16.ToBitString()
        VB: Bit16.ToBitString()
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit16.ToBitString()
        VB: NomUtils.Math.Bits.Bit16.ToBitString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: ToBitString
        path: ''
        startLine: 904
      syntax:
        content:
          CSharp: public string ToBitString()
          VB: Public Function ToBitString As String
        return:
          type: System.String
      overload: NomUtils.Math.Bits.Bit16.ToBitString*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit16.ToString
      commentId: M:NomUtils.Math.Bits.Bit16.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: Bit16.ToString()
        VB: Bit16.ToString()
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit16.ToString()
        VB: NomUtils.Math.Bits.Bit16.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: ToString
        path: ''
        startLine: 908
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: NomUtils.Math.Bits.Bit16.ToString*
      overridden: System.Object.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: NomUtils.Math.Bits.Bit16.op_Implicit(Self)~InternalType
      commentId: M:NomUtils.Math.Bits.Bit16.op_Implicit(Self)~InternalType
      language: CSharp
      name:
        CSharp: Implicit(Self to InternalType)
        VB: Widening(Self to InternalType)
      nameWithType:
        CSharp: Bit16.Implicit(Self to InternalType)
        VB: Bit16.Widening(Self to InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit16.Implicit(Self to InternalType)
        VB: NomUtils.Math.Bits.Bit16.Widening(Self to InternalType)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: op_Implicit
        path: ''
        startLine: 912
      syntax:
        content:
          CSharp: public static implicit operator InternalType(Self self)
          VB: Public Shared Widening Operator CType(self As Self) As InternalType
        parameters:
        - id: self
          type: Global.Self
        return:
          type: Global.InternalType
      overload: NomUtils.Math.Bits.Bit16.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: NomUtils.Math.Bits.Bit32
    commentId: T:NomUtils.Math.Bits.Bit32
    language: CSharp
    name:
      CSharp: Bit32
      VB: Bit32
    nameWithType:
      CSharp: Bit32
      VB: Bit32
    qualifiedName:
      CSharp: NomUtils.Math.Bits.Bit32
      VB: NomUtils.Math.Bits.Bit32
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: NomUtils.Math.Bits
    source:
      id: Bit32
      path: ''
      startLine: 923
    syntax:
      content:
        CSharp: public class Bit32
        VB: Public Class Bit32
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: NomUtils.Math.Bits.Bit32.#ctor
      commentId: M:NomUtils.Math.Bits.Bit32.#ctor
      language: CSharp
      name:
        CSharp: Bit32()
        VB: Bit32()
      nameWithType:
        CSharp: Bit32.Bit32()
        VB: Bit32.Bit32()
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit32.Bit32()
        VB: NomUtils.Math.Bits.Bit32.Bit32()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: .ctor
        path: ''
        startLine: 926
      syntax:
        content:
          CSharp: public Bit32()
          VB: Public Sub New
      overload: NomUtils.Math.Bits.Bit32.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit32.#ctor(InternalType)
      commentId: M:NomUtils.Math.Bits.Bit32.#ctor(InternalType)
      language: CSharp
      name:
        CSharp: Bit32(InternalType)
        VB: Bit32(InternalType)
      nameWithType:
        CSharp: Bit32.Bit32(InternalType)
        VB: Bit32.Bit32(InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit32.Bit32(InternalType)
        VB: NomUtils.Math.Bits.Bit32.Bit32(InternalType)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: .ctor
        path: ''
        startLine: 928
      syntax:
        content:
          CSharp: public Bit32(InternalType baseValue)
          VB: Public Sub New(baseValue As InternalType)
        parameters:
        - id: baseValue
          type: Global.InternalType
      overload: NomUtils.Math.Bits.Bit32.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit32.#ctor(Enum)
      commentId: M:NomUtils.Math.Bits.Bit32.#ctor(Enum)
      language: CSharp
      name:
        CSharp: Bit32(Enum)
        VB: Bit32(Enum)
      nameWithType:
        CSharp: Bit32.Bit32(Enum)
        VB: Bit32.Bit32(Enum)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit32.Bit32(Enum)
        VB: NomUtils.Math.Bits.Bit32.Bit32(Enum)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: .ctor
        path: ''
        startLine: 932
      syntax:
        content:
          CSharp: public Bit32(Enum enumValue)
          VB: Public Sub New(enumValue As  Enum)
        parameters:
        - id: enumValue
          type: Global.Enum
      overload: NomUtils.Math.Bits.Bit32.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit32.Clear
      commentId: M:NomUtils.Math.Bits.Bit32.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: Bit32.Clear()
        VB: Bit32.Clear()
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit32.Clear()
        VB: NomUtils.Math.Bits.Bit32.Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Clear
        path: ''
        startLine: 939
      summary: "\nResets the internal bits.\n"
      example: []
      syntax:
        content:
          CSharp: public Self Clear()
          VB: Public Function Clear As Self
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit32.Clear*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit32.Set(InternalType)
      commentId: M:NomUtils.Math.Bits.Bit32.Set(InternalType)
      language: CSharp
      name:
        CSharp: Set(InternalType)
        VB: Set(InternalType)
      nameWithType:
        CSharp: Bit32.Set(InternalType)
        VB: Bit32.Set(InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit32.Set(InternalType)
        VB: NomUtils.Math.Bits.Bit32.Set(InternalType)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Set
        path: ''
        startLine: 947
      summary: "\nDirectly sets the internal bits to <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>.\n"
      example: []
      syntax:
        content:
          CSharp: public Self Set(InternalType value)
          VB: Public Function Set(value As InternalType) As Self
        parameters:
        - id: value
          type: Global.InternalType
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit32.Set*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit32.Set(Enum)
      commentId: M:NomUtils.Math.Bits.Bit32.Set(Enum)
      language: CSharp
      name:
        CSharp: Set(Enum)
        VB: Set(Enum)
      nameWithType:
        CSharp: Bit32.Set(Enum)
        VB: Bit32.Set(Enum)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit32.Set(Enum)
        VB: NomUtils.Math.Bits.Bit32.Set(Enum)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Set
        path: ''
        startLine: 955
      summary: "\nDirectly sets the internal bits to <code data-dev-comment-type=\"paramref\" class=\"paramref\">enumValue</code>.\n"
      example: []
      syntax:
        content:
          CSharp: public Self Set(Enum enumValue)
          VB: Public Function Set(enumValue As  Enum) As Self
        parameters:
        - id: enumValue
          type: Global.Enum
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit32.Set*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit32.Or(InternalType)
      commentId: M:NomUtils.Math.Bits.Bit32.Or(InternalType)
      language: CSharp
      name:
        CSharp: Or(InternalType)
        VB: Or(InternalType)
      nameWithType:
        CSharp: Bit32.Or(InternalType)
        VB: Bit32.Or(InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit32.Or(InternalType)
        VB: NomUtils.Math.Bits.Bit32.Or(InternalType)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Or
        path: ''
        startLine: 968
      summary: "\nIf a bit is 1 in either operand, then 1 will be returned.\nOtherwise, 0 will be returned.\n<br /><br />\n0001 | 0000 = 0001<br />\n0001 | 0001 = 0001<br />\n1011 | 0100 = 1111\n"
      example: []
      syntax:
        content:
          CSharp: public Self Or(InternalType value)
          VB: Public Function Or(value As InternalType) As Self
        parameters:
        - id: value
          type: Global.InternalType
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit32.Or*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit32.Or(Enum)
      commentId: M:NomUtils.Math.Bits.Bit32.Or(Enum)
      language: CSharp
      name:
        CSharp: Or(Enum)
        VB: Or(Enum)
      nameWithType:
        CSharp: Bit32.Or(Enum)
        VB: Bit32.Or(Enum)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit32.Or(Enum)
        VB: NomUtils.Math.Bits.Bit32.Or(Enum)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Or
        path: ''
        startLine: 981
      summary: "\nIf a bit is 1 in either operand, then 1 will be returned.\nOtherwise, 0 will be returned.\n<br /><br />\n0001 | 0000 = 0001<br />\n0001 | 0001 = 0001<br />\n1011 | 0100 = 1111\n"
      example: []
      syntax:
        content:
          CSharp: public Self Or(Enum enumValue)
          VB: Public Function Or(enumValue As  Enum) As Self
        parameters:
        - id: enumValue
          type: Global.Enum
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit32.Or*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit32.And(InternalType)
      commentId: M:NomUtils.Math.Bits.Bit32.And(InternalType)
      language: CSharp
      name:
        CSharp: And(InternalType)
        VB: And(InternalType)
      nameWithType:
        CSharp: Bit32.And(InternalType)
        VB: Bit32.And(InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit32.And(InternalType)
        VB: NomUtils.Math.Bits.Bit32.And(InternalType)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: And
        path: ''
        startLine: 994
      summary: "\nIf a bit in both operands is the same, then the bit will return 1.\nOtherwise, the bit will return 0.\n<br /><br />\n0001 &amp; 0000 = 0000<br />\n0001 &amp; 0001 = 0001<br />\n0011 &amp; 0001 = 0001\n"
      example: []
      syntax:
        content:
          CSharp: public Self And(InternalType value)
          VB: Public Function And(value As InternalType) As Self
        parameters:
        - id: value
          type: Global.InternalType
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit32.And*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit32.And(Enum)
      commentId: M:NomUtils.Math.Bits.Bit32.And(Enum)
      language: CSharp
      name:
        CSharp: And(Enum)
        VB: And(Enum)
      nameWithType:
        CSharp: Bit32.And(Enum)
        VB: Bit32.And(Enum)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit32.And(Enum)
        VB: NomUtils.Math.Bits.Bit32.And(Enum)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: And
        path: ''
        startLine: 1007
      summary: "\nIf a bit in both operands is the same, then the bit will return 1.\nOtherwise, the bit will return 0.\n<br /><br />\n0001 &amp; 0000 = 0000<br />\n0001 &amp; 0001 = 0001<br />\n0011 &amp; 0001 = 0001\n"
      example: []
      syntax:
        content:
          CSharp: public Self And(Enum enumValue)
          VB: Public Function And(enumValue As  Enum) As Self
        parameters:
        - id: enumValue
          type: Global.Enum
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit32.And*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit32.Invert
      commentId: M:NomUtils.Math.Bits.Bit32.Invert
      language: CSharp
      name:
        CSharp: Invert()
        VB: Invert()
      nameWithType:
        CSharp: Bit32.Invert()
        VB: Bit32.Invert()
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit32.Invert()
        VB: NomUtils.Math.Bits.Bit32.Invert()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Invert
        path: ''
        startLine: 1019
      summary: "\nFlips every bit to its opposite value.\n<br /><br />\n~0001 = 1110<br />\n~1001 = 0110<br />\n~0011 = 1100\n"
      example: []
      syntax:
        content:
          CSharp: public Self Invert()
          VB: Public Function Invert As Self
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit32.Invert*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit32.Xor(InternalType)
      commentId: M:NomUtils.Math.Bits.Bit32.Xor(InternalType)
      language: CSharp
      name:
        CSharp: Xor(InternalType)
        VB: Xor(InternalType)
      nameWithType:
        CSharp: Bit32.Xor(InternalType)
        VB: Bit32.Xor(InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit32.Xor(InternalType)
        VB: NomUtils.Math.Bits.Bit32.Xor(InternalType)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Xor
        path: ''
        startLine: 1032
      summary: "\nIf a bit in both operands is different, then the bit will return 1.\nOtherwise, the bit will return 0 if the bit is the same in both operands.\n<br /><br />\n0 ^ 0 = 0<br />\n0 ^ 1 = 1<br />\n1 ^ 1 = 0\n"
      example: []
      syntax:
        content:
          CSharp: public Self Xor(InternalType value)
          VB: Public Function Xor(value As InternalType) As Self
        parameters:
        - id: value
          type: Global.InternalType
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit32.Xor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit32.Xor(Enum)
      commentId: M:NomUtils.Math.Bits.Bit32.Xor(Enum)
      language: CSharp
      name:
        CSharp: Xor(Enum)
        VB: Xor(Enum)
      nameWithType:
        CSharp: Bit32.Xor(Enum)
        VB: Bit32.Xor(Enum)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit32.Xor(Enum)
        VB: NomUtils.Math.Bits.Bit32.Xor(Enum)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Xor
        path: ''
        startLine: 1045
      summary: "\nIf a bit in both operands is different, then the bit will return 1.\nOtherwise, the bit will return 0 if the bit is the same in both operands.\n<br /><br />\n0000 ^ 0000 = 0000<br />\n0000 ^ 0001 = 0001<br />\n0001 ^ 0001 = 0000\n"
      example: []
      syntax:
        content:
          CSharp: public Self Xor(Enum enumValue)
          VB: Public Function Xor(enumValue As  Enum) As Self
        parameters:
        - id: enumValue
          type: Global.Enum
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit32.Xor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit32.ShiftLeft(System.Byte)
      commentId: M:NomUtils.Math.Bits.Bit32.ShiftLeft(System.Byte)
      language: CSharp
      name:
        CSharp: ShiftLeft(Byte)
        VB: ShiftLeft(Byte)
      nameWithType:
        CSharp: Bit32.ShiftLeft(Byte)
        VB: Bit32.ShiftLeft(Byte)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit32.ShiftLeft(System.Byte)
        VB: NomUtils.Math.Bits.Bit32.ShiftLeft(System.Byte)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: ShiftLeft
        path: ''
        startLine: 1058
      summary: "\nShifts each bit by x amount of bits to the left.\n<br /><br />\n0001 &lt;&lt; 1 = 0010<br />\n0011 &lt;&lt; 2 = 1100<br />\n0111 &lt;&lt; 4 = 0000\n"
      example: []
      syntax:
        content:
          CSharp: public Self ShiftLeft(byte bits)
          VB: Public Function ShiftLeft(bits As Byte) As Self
        parameters:
        - id: bits
          type: System.Byte
          description: Amount of bits to shift to the left
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit32.ShiftLeft*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit32.ShiftRight(System.Byte)
      commentId: M:NomUtils.Math.Bits.Bit32.ShiftRight(System.Byte)
      language: CSharp
      name:
        CSharp: ShiftRight(Byte)
        VB: ShiftRight(Byte)
      nameWithType:
        CSharp: Bit32.ShiftRight(Byte)
        VB: Bit32.ShiftRight(Byte)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit32.ShiftRight(System.Byte)
        VB: NomUtils.Math.Bits.Bit32.ShiftRight(System.Byte)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: ShiftRight
        path: ''
        startLine: 1071
      summary: "\nShifts each bit by x amount of bits to the right.\n<br /><br />\n1000 >> 1 = 0100<br />\n1100 >> 2 = 0011<br />\n1110 >> 4 = 0000\n"
      example: []
      syntax:
        content:
          CSharp: public Self ShiftRight(byte bits)
          VB: Public Function ShiftRight(bits As Byte) As Self
        parameters:
        - id: bits
          type: System.Byte
          description: Amount of bits to shift to the right
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit32.ShiftRight*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit32.Contains(InternalType)
      commentId: M:NomUtils.Math.Bits.Bit32.Contains(InternalType)
      language: CSharp
      name:
        CSharp: Contains(InternalType)
        VB: Contains(InternalType)
      nameWithType:
        CSharp: Bit32.Contains(InternalType)
        VB: Bit32.Contains(InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit32.Contains(InternalType)
        VB: NomUtils.Math.Bits.Bit32.Contains(InternalType)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Contains
        path: ''
        startLine: 1080
      summary: "\nChecks if the bits in <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> exists in the internal bits.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Contains(InternalType value)
          VB: Public Function Contains(value As InternalType) As Boolean
        parameters:
        - id: value
          type: Global.InternalType
          description: Bits to check for.
        return:
          type: System.Boolean
      overload: NomUtils.Math.Bits.Bit32.Contains*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit32.Contains(Enum)
      commentId: M:NomUtils.Math.Bits.Bit32.Contains(Enum)
      language: CSharp
      name:
        CSharp: Contains(Enum)
        VB: Contains(Enum)
      nameWithType:
        CSharp: Bit32.Contains(Enum)
        VB: Bit32.Contains(Enum)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit32.Contains(Enum)
        VB: NomUtils.Math.Bits.Bit32.Contains(Enum)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Contains
        path: ''
        startLine: 1088
      summary: "\nChecks if the bits in <code data-dev-comment-type=\"paramref\" class=\"paramref\">enumValue</code> exists in the internal bits.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Contains(Enum enumValue)
          VB: Public Function Contains(enumValue As  Enum) As Boolean
        parameters:
        - id: enumValue
          type: Global.Enum
          description: Bits to check for.
        return:
          type: System.Boolean
      overload: NomUtils.Math.Bits.Bit32.Contains*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit32.Equals(InternalType)
      commentId: M:NomUtils.Math.Bits.Bit32.Equals(InternalType)
      language: CSharp
      name:
        CSharp: Equals(InternalType)
        VB: Equals(InternalType)
      nameWithType:
        CSharp: Bit32.Equals(InternalType)
        VB: Bit32.Equals(InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit32.Equals(InternalType)
        VB: NomUtils.Math.Bits.Bit32.Equals(InternalType)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Equals
        path: ''
        startLine: 1096
      summary: "\nChecks if the bits in <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> fully matches the internal bits.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Equals(InternalType value)
          VB: Public Function Equals(value As InternalType) As Boolean
        parameters:
        - id: value
          type: Global.InternalType
          description: Bits to check for.
        return:
          type: System.Boolean
      overload: NomUtils.Math.Bits.Bit32.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit32.Equals(Enum)
      commentId: M:NomUtils.Math.Bits.Bit32.Equals(Enum)
      language: CSharp
      name:
        CSharp: Equals(Enum)
        VB: Equals(Enum)
      nameWithType:
        CSharp: Bit32.Equals(Enum)
        VB: Bit32.Equals(Enum)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit32.Equals(Enum)
        VB: NomUtils.Math.Bits.Bit32.Equals(Enum)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Equals
        path: ''
        startLine: 1104
      summary: "\nChecks if the bits in <code data-dev-comment-type=\"paramref\" class=\"paramref\">enumValue</code> fully matches the internal bits.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Equals(Enum enumValue)
          VB: Public Function Equals(enumValue As  Enum) As Boolean
        parameters:
        - id: enumValue
          type: Global.Enum
          description: Bits to check for.
        return:
          type: System.Boolean
      overload: NomUtils.Math.Bits.Bit32.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit32.ToBitString
      commentId: M:NomUtils.Math.Bits.Bit32.ToBitString
      language: CSharp
      name:
        CSharp: ToBitString()
        VB: ToBitString()
      nameWithType:
        CSharp: Bit32.ToBitString()
        VB: Bit32.ToBitString()
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit32.ToBitString()
        VB: NomUtils.Math.Bits.Bit32.ToBitString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: ToBitString
        path: ''
        startLine: 1112
      syntax:
        content:
          CSharp: public string ToBitString()
          VB: Public Function ToBitString As String
        return:
          type: System.String
      overload: NomUtils.Math.Bits.Bit32.ToBitString*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit32.ToString
      commentId: M:NomUtils.Math.Bits.Bit32.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: Bit32.ToString()
        VB: Bit32.ToString()
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit32.ToString()
        VB: NomUtils.Math.Bits.Bit32.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: ToString
        path: ''
        startLine: 1117
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: NomUtils.Math.Bits.Bit32.ToString*
      overridden: System.Object.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: NomUtils.Math.Bits.Bit32.op_Implicit(Self)~InternalType
      commentId: M:NomUtils.Math.Bits.Bit32.op_Implicit(Self)~InternalType
      language: CSharp
      name:
        CSharp: Implicit(Self to InternalType)
        VB: Widening(Self to InternalType)
      nameWithType:
        CSharp: Bit32.Implicit(Self to InternalType)
        VB: Bit32.Widening(Self to InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit32.Implicit(Self to InternalType)
        VB: NomUtils.Math.Bits.Bit32.Widening(Self to InternalType)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: op_Implicit
        path: ''
        startLine: 1121
      syntax:
        content:
          CSharp: public static implicit operator InternalType(Self self)
          VB: Public Shared Widening Operator CType(self As Self) As InternalType
        parameters:
        - id: self
          type: Global.Self
        return:
          type: Global.InternalType
      overload: NomUtils.Math.Bits.Bit32.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: NomUtils.Math.Bits.Bit64
    commentId: T:NomUtils.Math.Bits.Bit64
    language: CSharp
    name:
      CSharp: Bit64
      VB: Bit64
    nameWithType:
      CSharp: Bit64
      VB: Bit64
    qualifiedName:
      CSharp: NomUtils.Math.Bits.Bit64
      VB: NomUtils.Math.Bits.Bit64
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: NomUtils.Math.Bits
    source:
      id: Bit64
      path: ''
      startLine: 1132
    syntax:
      content:
        CSharp: public class Bit64
        VB: Public Class Bit64
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: NomUtils.Math.Bits.Bit64.#ctor
      commentId: M:NomUtils.Math.Bits.Bit64.#ctor
      language: CSharp
      name:
        CSharp: Bit64()
        VB: Bit64()
      nameWithType:
        CSharp: Bit64.Bit64()
        VB: Bit64.Bit64()
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit64.Bit64()
        VB: NomUtils.Math.Bits.Bit64.Bit64()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: .ctor
        path: ''
        startLine: 1135
      syntax:
        content:
          CSharp: public Bit64()
          VB: Public Sub New
      overload: NomUtils.Math.Bits.Bit64.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit64.#ctor(InternalType)
      commentId: M:NomUtils.Math.Bits.Bit64.#ctor(InternalType)
      language: CSharp
      name:
        CSharp: Bit64(InternalType)
        VB: Bit64(InternalType)
      nameWithType:
        CSharp: Bit64.Bit64(InternalType)
        VB: Bit64.Bit64(InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit64.Bit64(InternalType)
        VB: NomUtils.Math.Bits.Bit64.Bit64(InternalType)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: .ctor
        path: ''
        startLine: 1137
      syntax:
        content:
          CSharp: public Bit64(InternalType baseValue)
          VB: Public Sub New(baseValue As InternalType)
        parameters:
        - id: baseValue
          type: Global.InternalType
      overload: NomUtils.Math.Bits.Bit64.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit64.#ctor(Enum)
      commentId: M:NomUtils.Math.Bits.Bit64.#ctor(Enum)
      language: CSharp
      name:
        CSharp: Bit64(Enum)
        VB: Bit64(Enum)
      nameWithType:
        CSharp: Bit64.Bit64(Enum)
        VB: Bit64.Bit64(Enum)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit64.Bit64(Enum)
        VB: NomUtils.Math.Bits.Bit64.Bit64(Enum)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: .ctor
        path: ''
        startLine: 1141
      syntax:
        content:
          CSharp: public Bit64(Enum enumValue)
          VB: Public Sub New(enumValue As  Enum)
        parameters:
        - id: enumValue
          type: Global.Enum
      overload: NomUtils.Math.Bits.Bit64.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit64.Clear
      commentId: M:NomUtils.Math.Bits.Bit64.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: Bit64.Clear()
        VB: Bit64.Clear()
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit64.Clear()
        VB: NomUtils.Math.Bits.Bit64.Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Clear
        path: ''
        startLine: 1148
      summary: "\nResets the internal bits.\n"
      example: []
      syntax:
        content:
          CSharp: public Self Clear()
          VB: Public Function Clear As Self
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit64.Clear*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit64.Set(InternalType)
      commentId: M:NomUtils.Math.Bits.Bit64.Set(InternalType)
      language: CSharp
      name:
        CSharp: Set(InternalType)
        VB: Set(InternalType)
      nameWithType:
        CSharp: Bit64.Set(InternalType)
        VB: Bit64.Set(InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit64.Set(InternalType)
        VB: NomUtils.Math.Bits.Bit64.Set(InternalType)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Set
        path: ''
        startLine: 1156
      summary: "\nDirectly sets the internal bits to <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>.\n"
      example: []
      syntax:
        content:
          CSharp: public Self Set(InternalType value)
          VB: Public Function Set(value As InternalType) As Self
        parameters:
        - id: value
          type: Global.InternalType
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit64.Set*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit64.Set(Enum)
      commentId: M:NomUtils.Math.Bits.Bit64.Set(Enum)
      language: CSharp
      name:
        CSharp: Set(Enum)
        VB: Set(Enum)
      nameWithType:
        CSharp: Bit64.Set(Enum)
        VB: Bit64.Set(Enum)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit64.Set(Enum)
        VB: NomUtils.Math.Bits.Bit64.Set(Enum)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Set
        path: ''
        startLine: 1164
      summary: "\nDirectly sets the internal bits to <code data-dev-comment-type=\"paramref\" class=\"paramref\">enumValue</code>.\n"
      example: []
      syntax:
        content:
          CSharp: public Self Set(Enum enumValue)
          VB: Public Function Set(enumValue As  Enum) As Self
        parameters:
        - id: enumValue
          type: Global.Enum
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit64.Set*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit64.Or(InternalType)
      commentId: M:NomUtils.Math.Bits.Bit64.Or(InternalType)
      language: CSharp
      name:
        CSharp: Or(InternalType)
        VB: Or(InternalType)
      nameWithType:
        CSharp: Bit64.Or(InternalType)
        VB: Bit64.Or(InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit64.Or(InternalType)
        VB: NomUtils.Math.Bits.Bit64.Or(InternalType)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Or
        path: ''
        startLine: 1177
      summary: "\nIf a bit is 1 in either operand, then 1 will be returned.\nOtherwise, 0 will be returned.\n<br /><br />\n0001 | 0000 = 0001<br />\n0001 | 0001 = 0001<br />\n1011 | 0100 = 1111\n"
      example: []
      syntax:
        content:
          CSharp: public Self Or(InternalType value)
          VB: Public Function Or(value As InternalType) As Self
        parameters:
        - id: value
          type: Global.InternalType
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit64.Or*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit64.Or(Enum)
      commentId: M:NomUtils.Math.Bits.Bit64.Or(Enum)
      language: CSharp
      name:
        CSharp: Or(Enum)
        VB: Or(Enum)
      nameWithType:
        CSharp: Bit64.Or(Enum)
        VB: Bit64.Or(Enum)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit64.Or(Enum)
        VB: NomUtils.Math.Bits.Bit64.Or(Enum)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Or
        path: ''
        startLine: 1190
      summary: "\nIf a bit is 1 in either operand, then 1 will be returned.\nOtherwise, 0 will be returned.\n<br /><br />\n0001 | 0000 = 0001<br />\n0001 | 0001 = 0001<br />\n1011 | 0100 = 1111\n"
      example: []
      syntax:
        content:
          CSharp: public Self Or(Enum enumValue)
          VB: Public Function Or(enumValue As  Enum) As Self
        parameters:
        - id: enumValue
          type: Global.Enum
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit64.Or*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit64.And(InternalType)
      commentId: M:NomUtils.Math.Bits.Bit64.And(InternalType)
      language: CSharp
      name:
        CSharp: And(InternalType)
        VB: And(InternalType)
      nameWithType:
        CSharp: Bit64.And(InternalType)
        VB: Bit64.And(InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit64.And(InternalType)
        VB: NomUtils.Math.Bits.Bit64.And(InternalType)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: And
        path: ''
        startLine: 1203
      summary: "\nIf a bit in both operands is the same, then the bit will return 1.\nOtherwise, the bit will return 0.\n<br /><br />\n0001 &amp; 0000 = 0000<br />\n0001 &amp; 0001 = 0001<br />\n0011 &amp; 0001 = 0001\n"
      example: []
      syntax:
        content:
          CSharp: public Self And(InternalType value)
          VB: Public Function And(value As InternalType) As Self
        parameters:
        - id: value
          type: Global.InternalType
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit64.And*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit64.And(Enum)
      commentId: M:NomUtils.Math.Bits.Bit64.And(Enum)
      language: CSharp
      name:
        CSharp: And(Enum)
        VB: And(Enum)
      nameWithType:
        CSharp: Bit64.And(Enum)
        VB: Bit64.And(Enum)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit64.And(Enum)
        VB: NomUtils.Math.Bits.Bit64.And(Enum)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: And
        path: ''
        startLine: 1216
      summary: "\nIf a bit in both operands is the same, then the bit will return 1.\nOtherwise, the bit will return 0.\n<br /><br />\n0001 &amp; 0000 = 0000<br />\n0001 &amp; 0001 = 0001<br />\n0011 &amp; 0001 = 0001\n"
      example: []
      syntax:
        content:
          CSharp: public Self And(Enum enumValue)
          VB: Public Function And(enumValue As  Enum) As Self
        parameters:
        - id: enumValue
          type: Global.Enum
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit64.And*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit64.Invert
      commentId: M:NomUtils.Math.Bits.Bit64.Invert
      language: CSharp
      name:
        CSharp: Invert()
        VB: Invert()
      nameWithType:
        CSharp: Bit64.Invert()
        VB: Bit64.Invert()
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit64.Invert()
        VB: NomUtils.Math.Bits.Bit64.Invert()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Invert
        path: ''
        startLine: 1228
      summary: "\nFlips every bit to its opposite value.\n<br /><br />\n~0001 = 1110<br />\n~1001 = 0110<br />\n~0011 = 1100\n"
      example: []
      syntax:
        content:
          CSharp: public Self Invert()
          VB: Public Function Invert As Self
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit64.Invert*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit64.Xor(InternalType)
      commentId: M:NomUtils.Math.Bits.Bit64.Xor(InternalType)
      language: CSharp
      name:
        CSharp: Xor(InternalType)
        VB: Xor(InternalType)
      nameWithType:
        CSharp: Bit64.Xor(InternalType)
        VB: Bit64.Xor(InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit64.Xor(InternalType)
        VB: NomUtils.Math.Bits.Bit64.Xor(InternalType)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Xor
        path: ''
        startLine: 1241
      summary: "\nIf a bit in both operands is different, then the bit will return 1.\nOtherwise, the bit will return 0 if the bit is the same in both operands.\n<br /><br />\n0 ^ 0 = 0<br />\n0 ^ 1 = 1<br />\n1 ^ 1 = 0\n"
      example: []
      syntax:
        content:
          CSharp: public Self Xor(InternalType value)
          VB: Public Function Xor(value As InternalType) As Self
        parameters:
        - id: value
          type: Global.InternalType
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit64.Xor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit64.Xor(Enum)
      commentId: M:NomUtils.Math.Bits.Bit64.Xor(Enum)
      language: CSharp
      name:
        CSharp: Xor(Enum)
        VB: Xor(Enum)
      nameWithType:
        CSharp: Bit64.Xor(Enum)
        VB: Bit64.Xor(Enum)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit64.Xor(Enum)
        VB: NomUtils.Math.Bits.Bit64.Xor(Enum)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Xor
        path: ''
        startLine: 1254
      summary: "\nIf a bit in both operands is different, then the bit will return 1.\nOtherwise, the bit will return 0 if the bit is the same in both operands.\n<br /><br />\n0000 ^ 0000 = 0000<br />\n0000 ^ 0001 = 0001<br />\n0001 ^ 0001 = 0000\n"
      example: []
      syntax:
        content:
          CSharp: public Self Xor(Enum enumValue)
          VB: Public Function Xor(enumValue As  Enum) As Self
        parameters:
        - id: enumValue
          type: Global.Enum
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit64.Xor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit64.ShiftLeft(System.Byte)
      commentId: M:NomUtils.Math.Bits.Bit64.ShiftLeft(System.Byte)
      language: CSharp
      name:
        CSharp: ShiftLeft(Byte)
        VB: ShiftLeft(Byte)
      nameWithType:
        CSharp: Bit64.ShiftLeft(Byte)
        VB: Bit64.ShiftLeft(Byte)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit64.ShiftLeft(System.Byte)
        VB: NomUtils.Math.Bits.Bit64.ShiftLeft(System.Byte)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: ShiftLeft
        path: ''
        startLine: 1267
      summary: "\nShifts each bit by x amount of bits to the left.\n<br /><br />\n0001 &lt;&lt; 1 = 0010<br />\n0011 &lt;&lt; 2 = 1100<br />\n0111 &lt;&lt; 4 = 0000\n"
      example: []
      syntax:
        content:
          CSharp: public Self ShiftLeft(byte bits)
          VB: Public Function ShiftLeft(bits As Byte) As Self
        parameters:
        - id: bits
          type: System.Byte
          description: Amount of bits to shift to the left
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit64.ShiftLeft*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit64.ShiftRight(System.Byte)
      commentId: M:NomUtils.Math.Bits.Bit64.ShiftRight(System.Byte)
      language: CSharp
      name:
        CSharp: ShiftRight(Byte)
        VB: ShiftRight(Byte)
      nameWithType:
        CSharp: Bit64.ShiftRight(Byte)
        VB: Bit64.ShiftRight(Byte)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit64.ShiftRight(System.Byte)
        VB: NomUtils.Math.Bits.Bit64.ShiftRight(System.Byte)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: ShiftRight
        path: ''
        startLine: 1280
      summary: "\nShifts each bit by x amount of bits to the right.\n<br /><br />\n1000 >> 1 = 0100<br />\n1100 >> 2 = 0011<br />\n1110 >> 4 = 0000\n"
      example: []
      syntax:
        content:
          CSharp: public Self ShiftRight(byte bits)
          VB: Public Function ShiftRight(bits As Byte) As Self
        parameters:
        - id: bits
          type: System.Byte
          description: Amount of bits to shift to the right
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit64.ShiftRight*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit64.Contains(InternalType)
      commentId: M:NomUtils.Math.Bits.Bit64.Contains(InternalType)
      language: CSharp
      name:
        CSharp: Contains(InternalType)
        VB: Contains(InternalType)
      nameWithType:
        CSharp: Bit64.Contains(InternalType)
        VB: Bit64.Contains(InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit64.Contains(InternalType)
        VB: NomUtils.Math.Bits.Bit64.Contains(InternalType)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Contains
        path: ''
        startLine: 1289
      summary: "\nChecks if the bits in <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> exists in the internal bits.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Contains(InternalType value)
          VB: Public Function Contains(value As InternalType) As Boolean
        parameters:
        - id: value
          type: Global.InternalType
          description: Bits to check for.
        return:
          type: System.Boolean
      overload: NomUtils.Math.Bits.Bit64.Contains*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit64.Contains(Enum)
      commentId: M:NomUtils.Math.Bits.Bit64.Contains(Enum)
      language: CSharp
      name:
        CSharp: Contains(Enum)
        VB: Contains(Enum)
      nameWithType:
        CSharp: Bit64.Contains(Enum)
        VB: Bit64.Contains(Enum)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit64.Contains(Enum)
        VB: NomUtils.Math.Bits.Bit64.Contains(Enum)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Contains
        path: ''
        startLine: 1297
      summary: "\nChecks if the bits in <code data-dev-comment-type=\"paramref\" class=\"paramref\">enumValue</code> exists in the internal bits.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Contains(Enum enumValue)
          VB: Public Function Contains(enumValue As  Enum) As Boolean
        parameters:
        - id: enumValue
          type: Global.Enum
          description: Bits to check for.
        return:
          type: System.Boolean
      overload: NomUtils.Math.Bits.Bit64.Contains*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit64.Equals(InternalType)
      commentId: M:NomUtils.Math.Bits.Bit64.Equals(InternalType)
      language: CSharp
      name:
        CSharp: Equals(InternalType)
        VB: Equals(InternalType)
      nameWithType:
        CSharp: Bit64.Equals(InternalType)
        VB: Bit64.Equals(InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit64.Equals(InternalType)
        VB: NomUtils.Math.Bits.Bit64.Equals(InternalType)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Equals
        path: ''
        startLine: 1305
      summary: "\nChecks if the bits in <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> fully matches the internal bits.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Equals(InternalType value)
          VB: Public Function Equals(value As InternalType) As Boolean
        parameters:
        - id: value
          type: Global.InternalType
          description: Bits to check for.
        return:
          type: System.Boolean
      overload: NomUtils.Math.Bits.Bit64.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit64.Equals(Enum)
      commentId: M:NomUtils.Math.Bits.Bit64.Equals(Enum)
      language: CSharp
      name:
        CSharp: Equals(Enum)
        VB: Equals(Enum)
      nameWithType:
        CSharp: Bit64.Equals(Enum)
        VB: Bit64.Equals(Enum)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit64.Equals(Enum)
        VB: NomUtils.Math.Bits.Bit64.Equals(Enum)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Equals
        path: ''
        startLine: 1313
      summary: "\nChecks if the bits in <code data-dev-comment-type=\"paramref\" class=\"paramref\">enumValue</code> fully matches the internal bits.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Equals(Enum enumValue)
          VB: Public Function Equals(enumValue As  Enum) As Boolean
        parameters:
        - id: enumValue
          type: Global.Enum
          description: Bits to check for.
        return:
          type: System.Boolean
      overload: NomUtils.Math.Bits.Bit64.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit64.ToBitString
      commentId: M:NomUtils.Math.Bits.Bit64.ToBitString
      language: CSharp
      name:
        CSharp: ToBitString()
        VB: ToBitString()
      nameWithType:
        CSharp: Bit64.ToBitString()
        VB: Bit64.ToBitString()
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit64.ToBitString()
        VB: NomUtils.Math.Bits.Bit64.ToBitString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: ToBitString
        path: ''
        startLine: 1321
      syntax:
        content:
          CSharp: public string ToBitString()
          VB: Public Function ToBitString As String
        return:
          type: System.String
      overload: NomUtils.Math.Bits.Bit64.ToBitString*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit64.ToString
      commentId: M:NomUtils.Math.Bits.Bit64.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: Bit64.ToString()
        VB: Bit64.ToString()
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit64.ToString()
        VB: NomUtils.Math.Bits.Bit64.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: ToString
        path: ''
        startLine: 1326
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: NomUtils.Math.Bits.Bit64.ToString*
      overridden: System.Object.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: NomUtils.Math.Bits.Bit64.op_Implicit(Self)~InternalType
      commentId: M:NomUtils.Math.Bits.Bit64.op_Implicit(Self)~InternalType
      language: CSharp
      name:
        CSharp: Implicit(Self to InternalType)
        VB: Widening(Self to InternalType)
      nameWithType:
        CSharp: Bit64.Implicit(Self to InternalType)
        VB: Bit64.Widening(Self to InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit64.Implicit(Self to InternalType)
        VB: NomUtils.Math.Bits.Bit64.Widening(Self to InternalType)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: op_Implicit
        path: ''
        startLine: 1330
      syntax:
        content:
          CSharp: public static implicit operator InternalType(Self self)
          VB: Public Shared Widening Operator CType(self As Self) As InternalType
        parameters:
        - id: self
          type: Global.Self
        return:
          type: Global.InternalType
      overload: NomUtils.Math.Bits.Bit64.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: NomUtils.Math.Bits.Bit8
    commentId: T:NomUtils.Math.Bits.Bit8
    language: CSharp
    name:
      CSharp: Bit8
      VB: Bit8
    nameWithType:
      CSharp: Bit8
      VB: Bit8
    qualifiedName:
      CSharp: NomUtils.Math.Bits.Bit8
      VB: NomUtils.Math.Bits.Bit8
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: NomUtils.Math.Bits
    source:
      id: Bit8
      path: ''
      startLine: 1341
    syntax:
      content:
        CSharp: public class Bit8
        VB: Public Class Bit8
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: NomUtils.Math.Bits.Bit8.#ctor
      commentId: M:NomUtils.Math.Bits.Bit8.#ctor
      language: CSharp
      name:
        CSharp: Bit8()
        VB: Bit8()
      nameWithType:
        CSharp: Bit8.Bit8()
        VB: Bit8.Bit8()
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit8.Bit8()
        VB: NomUtils.Math.Bits.Bit8.Bit8()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: .ctor
        path: ''
        startLine: 1344
      syntax:
        content:
          CSharp: public Bit8()
          VB: Public Sub New
      overload: NomUtils.Math.Bits.Bit8.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit8.#ctor(InternalType)
      commentId: M:NomUtils.Math.Bits.Bit8.#ctor(InternalType)
      language: CSharp
      name:
        CSharp: Bit8(InternalType)
        VB: Bit8(InternalType)
      nameWithType:
        CSharp: Bit8.Bit8(InternalType)
        VB: Bit8.Bit8(InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit8.Bit8(InternalType)
        VB: NomUtils.Math.Bits.Bit8.Bit8(InternalType)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: .ctor
        path: ''
        startLine: 1346
      syntax:
        content:
          CSharp: public Bit8(InternalType baseValue)
          VB: Public Sub New(baseValue As InternalType)
        parameters:
        - id: baseValue
          type: Global.InternalType
      overload: NomUtils.Math.Bits.Bit8.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit8.#ctor(Enum)
      commentId: M:NomUtils.Math.Bits.Bit8.#ctor(Enum)
      language: CSharp
      name:
        CSharp: Bit8(Enum)
        VB: Bit8(Enum)
      nameWithType:
        CSharp: Bit8.Bit8(Enum)
        VB: Bit8.Bit8(Enum)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit8.Bit8(Enum)
        VB: NomUtils.Math.Bits.Bit8.Bit8(Enum)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: .ctor
        path: ''
        startLine: 1350
      syntax:
        content:
          CSharp: public Bit8(Enum enumValue)
          VB: Public Sub New(enumValue As  Enum)
        parameters:
        - id: enumValue
          type: Global.Enum
      overload: NomUtils.Math.Bits.Bit8.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit8.Clear
      commentId: M:NomUtils.Math.Bits.Bit8.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: Bit8.Clear()
        VB: Bit8.Clear()
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit8.Clear()
        VB: NomUtils.Math.Bits.Bit8.Clear()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Clear
        path: ''
        startLine: 1357
      summary: "\nResets the internal bits.\n"
      example: []
      syntax:
        content:
          CSharp: public Self Clear()
          VB: Public Function Clear As Self
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit8.Clear*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit8.Set(InternalType)
      commentId: M:NomUtils.Math.Bits.Bit8.Set(InternalType)
      language: CSharp
      name:
        CSharp: Set(InternalType)
        VB: Set(InternalType)
      nameWithType:
        CSharp: Bit8.Set(InternalType)
        VB: Bit8.Set(InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit8.Set(InternalType)
        VB: NomUtils.Math.Bits.Bit8.Set(InternalType)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Set
        path: ''
        startLine: 1365
      summary: "\nDirectly sets the internal bits to <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>.\n"
      example: []
      syntax:
        content:
          CSharp: public Self Set(InternalType value)
          VB: Public Function Set(value As InternalType) As Self
        parameters:
        - id: value
          type: Global.InternalType
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit8.Set*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit8.Set(Enum)
      commentId: M:NomUtils.Math.Bits.Bit8.Set(Enum)
      language: CSharp
      name:
        CSharp: Set(Enum)
        VB: Set(Enum)
      nameWithType:
        CSharp: Bit8.Set(Enum)
        VB: Bit8.Set(Enum)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit8.Set(Enum)
        VB: NomUtils.Math.Bits.Bit8.Set(Enum)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Set
        path: ''
        startLine: 1373
      summary: "\nDirectly sets the internal bits to <code data-dev-comment-type=\"paramref\" class=\"paramref\">enumValue</code>.\n"
      example: []
      syntax:
        content:
          CSharp: public Self Set(Enum enumValue)
          VB: Public Function Set(enumValue As  Enum) As Self
        parameters:
        - id: enumValue
          type: Global.Enum
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit8.Set*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit8.Or(InternalType)
      commentId: M:NomUtils.Math.Bits.Bit8.Or(InternalType)
      language: CSharp
      name:
        CSharp: Or(InternalType)
        VB: Or(InternalType)
      nameWithType:
        CSharp: Bit8.Or(InternalType)
        VB: Bit8.Or(InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit8.Or(InternalType)
        VB: NomUtils.Math.Bits.Bit8.Or(InternalType)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Or
        path: ''
        startLine: 1386
      summary: "\nIf a bit is 1 in either operand, then 1 will be returned.\nOtherwise, 0 will be returned.\n<br /><br />\n0001 | 0000 = 0001<br />\n0001 | 0001 = 0001<br />\n1011 | 0100 = 1111\n"
      example: []
      syntax:
        content:
          CSharp: public Self Or(InternalType value)
          VB: Public Function Or(value As InternalType) As Self
        parameters:
        - id: value
          type: Global.InternalType
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit8.Or*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit8.Or(Enum)
      commentId: M:NomUtils.Math.Bits.Bit8.Or(Enum)
      language: CSharp
      name:
        CSharp: Or(Enum)
        VB: Or(Enum)
      nameWithType:
        CSharp: Bit8.Or(Enum)
        VB: Bit8.Or(Enum)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit8.Or(Enum)
        VB: NomUtils.Math.Bits.Bit8.Or(Enum)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Or
        path: ''
        startLine: 1399
      summary: "\nIf a bit is 1 in either operand, then 1 will be returned.\nOtherwise, 0 will be returned.\n<br /><br />\n0001 | 0000 = 0001<br />\n0001 | 0001 = 0001<br />\n1011 | 0100 = 1111\n"
      example: []
      syntax:
        content:
          CSharp: public Self Or(Enum enumValue)
          VB: Public Function Or(enumValue As  Enum) As Self
        parameters:
        - id: enumValue
          type: Global.Enum
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit8.Or*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit8.And(InternalType)
      commentId: M:NomUtils.Math.Bits.Bit8.And(InternalType)
      language: CSharp
      name:
        CSharp: And(InternalType)
        VB: And(InternalType)
      nameWithType:
        CSharp: Bit8.And(InternalType)
        VB: Bit8.And(InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit8.And(InternalType)
        VB: NomUtils.Math.Bits.Bit8.And(InternalType)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: And
        path: ''
        startLine: 1412
      summary: "\nIf a bit in both operands is the same, then the bit will return 1.\nOtherwise, the bit will return 0.\n<br /><br />\n0001 &amp; 0000 = 0000<br />\n0001 &amp; 0001 = 0001<br />\n0011 &amp; 0001 = 0001\n"
      example: []
      syntax:
        content:
          CSharp: public Self And(InternalType value)
          VB: Public Function And(value As InternalType) As Self
        parameters:
        - id: value
          type: Global.InternalType
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit8.And*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit8.And(Enum)
      commentId: M:NomUtils.Math.Bits.Bit8.And(Enum)
      language: CSharp
      name:
        CSharp: And(Enum)
        VB: And(Enum)
      nameWithType:
        CSharp: Bit8.And(Enum)
        VB: Bit8.And(Enum)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit8.And(Enum)
        VB: NomUtils.Math.Bits.Bit8.And(Enum)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: And
        path: ''
        startLine: 1425
      summary: "\nIf a bit in both operands is the same, then the bit will return 1.\nOtherwise, the bit will return 0.\n<br /><br />\n0001 &amp; 0000 = 0000<br />\n0001 &amp; 0001 = 0001<br />\n0011 &amp; 0001 = 0001\n"
      example: []
      syntax:
        content:
          CSharp: public Self And(Enum enumValue)
          VB: Public Function And(enumValue As  Enum) As Self
        parameters:
        - id: enumValue
          type: Global.Enum
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit8.And*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit8.Invert
      commentId: M:NomUtils.Math.Bits.Bit8.Invert
      language: CSharp
      name:
        CSharp: Invert()
        VB: Invert()
      nameWithType:
        CSharp: Bit8.Invert()
        VB: Bit8.Invert()
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit8.Invert()
        VB: NomUtils.Math.Bits.Bit8.Invert()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Invert
        path: ''
        startLine: 1437
      summary: "\nFlips every bit to its opposite value.\n<br /><br />\n~0001 = 1110<br />\n~1001 = 0110<br />\n~0011 = 1100\n"
      example: []
      syntax:
        content:
          CSharp: public Self Invert()
          VB: Public Function Invert As Self
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit8.Invert*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit8.Xor(InternalType)
      commentId: M:NomUtils.Math.Bits.Bit8.Xor(InternalType)
      language: CSharp
      name:
        CSharp: Xor(InternalType)
        VB: Xor(InternalType)
      nameWithType:
        CSharp: Bit8.Xor(InternalType)
        VB: Bit8.Xor(InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit8.Xor(InternalType)
        VB: NomUtils.Math.Bits.Bit8.Xor(InternalType)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Xor
        path: ''
        startLine: 1450
      summary: "\nIf a bit in both operands is different, then the bit will return 1.\nOtherwise, the bit will return 0 if the bit is the same in both operands.\n<br /><br />\n0 ^ 0 = 0<br />\n0 ^ 1 = 1<br />\n1 ^ 1 = 0\n"
      example: []
      syntax:
        content:
          CSharp: public Self Xor(InternalType value)
          VB: Public Function Xor(value As InternalType) As Self
        parameters:
        - id: value
          type: Global.InternalType
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit8.Xor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit8.Xor(Enum)
      commentId: M:NomUtils.Math.Bits.Bit8.Xor(Enum)
      language: CSharp
      name:
        CSharp: Xor(Enum)
        VB: Xor(Enum)
      nameWithType:
        CSharp: Bit8.Xor(Enum)
        VB: Bit8.Xor(Enum)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit8.Xor(Enum)
        VB: NomUtils.Math.Bits.Bit8.Xor(Enum)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Xor
        path: ''
        startLine: 1463
      summary: "\nIf a bit in both operands is different, then the bit will return 1.\nOtherwise, the bit will return 0 if the bit is the same in both operands.\n<br /><br />\n0000 ^ 0000 = 0000<br />\n0000 ^ 0001 = 0001<br />\n0001 ^ 0001 = 0000\n"
      example: []
      syntax:
        content:
          CSharp: public Self Xor(Enum enumValue)
          VB: Public Function Xor(enumValue As  Enum) As Self
        parameters:
        - id: enumValue
          type: Global.Enum
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit8.Xor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit8.ShiftLeft(System.Byte)
      commentId: M:NomUtils.Math.Bits.Bit8.ShiftLeft(System.Byte)
      language: CSharp
      name:
        CSharp: ShiftLeft(Byte)
        VB: ShiftLeft(Byte)
      nameWithType:
        CSharp: Bit8.ShiftLeft(Byte)
        VB: Bit8.ShiftLeft(Byte)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit8.ShiftLeft(System.Byte)
        VB: NomUtils.Math.Bits.Bit8.ShiftLeft(System.Byte)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: ShiftLeft
        path: ''
        startLine: 1476
      summary: "\nShifts each bit by x amount of bits to the left.\n<br /><br />\n0001 &lt;&lt; 1 = 0010<br />\n0011 &lt;&lt; 2 = 1100<br />\n0111 &lt;&lt; 4 = 0000\n"
      example: []
      syntax:
        content:
          CSharp: public Self ShiftLeft(byte bits)
          VB: Public Function ShiftLeft(bits As Byte) As Self
        parameters:
        - id: bits
          type: System.Byte
          description: Amount of bits to shift to the left
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit8.ShiftLeft*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit8.ShiftRight(System.Byte)
      commentId: M:NomUtils.Math.Bits.Bit8.ShiftRight(System.Byte)
      language: CSharp
      name:
        CSharp: ShiftRight(Byte)
        VB: ShiftRight(Byte)
      nameWithType:
        CSharp: Bit8.ShiftRight(Byte)
        VB: Bit8.ShiftRight(Byte)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit8.ShiftRight(System.Byte)
        VB: NomUtils.Math.Bits.Bit8.ShiftRight(System.Byte)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: ShiftRight
        path: ''
        startLine: 1489
      summary: "\nShifts each bit by x amount of bits to the right.\n<br /><br />\n1000 >> 1 = 0100<br />\n1100 >> 2 = 0011<br />\n1110 >> 4 = 0000\n"
      example: []
      syntax:
        content:
          CSharp: public Self ShiftRight(byte bits)
          VB: Public Function ShiftRight(bits As Byte) As Self
        parameters:
        - id: bits
          type: System.Byte
          description: Amount of bits to shift to the right
        return:
          type: Global.Self
      overload: NomUtils.Math.Bits.Bit8.ShiftRight*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit8.Contains(InternalType)
      commentId: M:NomUtils.Math.Bits.Bit8.Contains(InternalType)
      language: CSharp
      name:
        CSharp: Contains(InternalType)
        VB: Contains(InternalType)
      nameWithType:
        CSharp: Bit8.Contains(InternalType)
        VB: Bit8.Contains(InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit8.Contains(InternalType)
        VB: NomUtils.Math.Bits.Bit8.Contains(InternalType)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Contains
        path: ''
        startLine: 1498
      summary: "\nChecks if the bits in <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> exists in the internal bits.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Contains(InternalType value)
          VB: Public Function Contains(value As InternalType) As Boolean
        parameters:
        - id: value
          type: Global.InternalType
          description: Bits to check for.
        return:
          type: System.Boolean
      overload: NomUtils.Math.Bits.Bit8.Contains*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit8.Contains(Enum)
      commentId: M:NomUtils.Math.Bits.Bit8.Contains(Enum)
      language: CSharp
      name:
        CSharp: Contains(Enum)
        VB: Contains(Enum)
      nameWithType:
        CSharp: Bit8.Contains(Enum)
        VB: Bit8.Contains(Enum)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit8.Contains(Enum)
        VB: NomUtils.Math.Bits.Bit8.Contains(Enum)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Contains
        path: ''
        startLine: 1506
      summary: "\nChecks if the bits in <code data-dev-comment-type=\"paramref\" class=\"paramref\">enumValue</code> exists in the internal bits.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Contains(Enum enumValue)
          VB: Public Function Contains(enumValue As  Enum) As Boolean
        parameters:
        - id: enumValue
          type: Global.Enum
          description: Bits to check for.
        return:
          type: System.Boolean
      overload: NomUtils.Math.Bits.Bit8.Contains*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit8.Equals(InternalType)
      commentId: M:NomUtils.Math.Bits.Bit8.Equals(InternalType)
      language: CSharp
      name:
        CSharp: Equals(InternalType)
        VB: Equals(InternalType)
      nameWithType:
        CSharp: Bit8.Equals(InternalType)
        VB: Bit8.Equals(InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit8.Equals(InternalType)
        VB: NomUtils.Math.Bits.Bit8.Equals(InternalType)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Equals
        path: ''
        startLine: 1514
      summary: "\nChecks if the bits in <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> fully matches the internal bits.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Equals(InternalType value)
          VB: Public Function Equals(value As InternalType) As Boolean
        parameters:
        - id: value
          type: Global.InternalType
          description: Bits to check for.
        return:
          type: System.Boolean
      overload: NomUtils.Math.Bits.Bit8.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit8.Equals(Enum)
      commentId: M:NomUtils.Math.Bits.Bit8.Equals(Enum)
      language: CSharp
      name:
        CSharp: Equals(Enum)
        VB: Equals(Enum)
      nameWithType:
        CSharp: Bit8.Equals(Enum)
        VB: Bit8.Equals(Enum)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit8.Equals(Enum)
        VB: NomUtils.Math.Bits.Bit8.Equals(Enum)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: Equals
        path: ''
        startLine: 1522
      summary: "\nChecks if the bits in <code data-dev-comment-type=\"paramref\" class=\"paramref\">enumValue</code> fully matches the internal bits.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Equals(Enum enumValue)
          VB: Public Function Equals(enumValue As  Enum) As Boolean
        parameters:
        - id: enumValue
          type: Global.Enum
          description: Bits to check for.
        return:
          type: System.Boolean
      overload: NomUtils.Math.Bits.Bit8.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit8.ToBitString
      commentId: M:NomUtils.Math.Bits.Bit8.ToBitString
      language: CSharp
      name:
        CSharp: ToBitString()
        VB: ToBitString()
      nameWithType:
        CSharp: Bit8.ToBitString()
        VB: Bit8.ToBitString()
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit8.ToBitString()
        VB: NomUtils.Math.Bits.Bit8.ToBitString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: ToBitString
        path: ''
        startLine: 1531
      syntax:
        content:
          CSharp: public string ToBitString()
          VB: Public Function ToBitString As String
        return:
          type: System.String
      overload: NomUtils.Math.Bits.Bit8.ToBitString*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: NomUtils.Math.Bits.Bit8.ToString
      commentId: M:NomUtils.Math.Bits.Bit8.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: Bit8.ToString()
        VB: Bit8.ToString()
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit8.ToString()
        VB: NomUtils.Math.Bits.Bit8.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: ToString
        path: ''
        startLine: 1535
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: NomUtils.Math.Bits.Bit8.ToString*
      overridden: System.Object.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: NomUtils.Math.Bits.Bit8.op_Implicit(Self)~InternalType
      commentId: M:NomUtils.Math.Bits.Bit8.op_Implicit(Self)~InternalType
      language: CSharp
      name:
        CSharp: Implicit(Self to InternalType)
        VB: Widening(Self to InternalType)
      nameWithType:
        CSharp: Bit8.Implicit(Self to InternalType)
        VB: Bit8.Widening(Self to InternalType)
      qualifiedName:
        CSharp: NomUtils.Math.Bits.Bit8.Implicit(Self to InternalType)
        VB: NomUtils.Math.Bits.Bit8.Widening(Self to InternalType)
      type: Operator
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Bits
      source:
        id: op_Implicit
        path: ''
        startLine: 1539
      syntax:
        content:
          CSharp: public static implicit operator InternalType(Self self)
          VB: Public Shared Widening Operator CType(self As Self) As InternalType
        parameters:
        - id: self
          type: Global.Self
        return:
          type: Global.InternalType
      overload: NomUtils.Math.Bits.Bit8.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
- id: NomUtils.Math.Curves
  commentId: N:NomUtils.Math.Curves
  language: CSharp
  name:
    CSharp: NomUtils.Math.Curves
    VB: NomUtils.Math.Curves
  nameWithType:
    CSharp: NomUtils.Math.Curves
    VB: NomUtils.Math.Curves
  qualifiedName:
    CSharp: NomUtils.Math.Curves
    VB: NomUtils.Math.Curves
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: NomUtils.Math.Curves.BezierCubic
    commentId: T:NomUtils.Math.Curves.BezierCubic
    language: CSharp
    name:
      CSharp: BezierCubic
      VB: BezierCubic
    nameWithType:
      CSharp: BezierCubic
      VB: BezierCubic
    qualifiedName:
      CSharp: NomUtils.Math.Curves.BezierCubic
      VB: NomUtils.Math.Curves.BezierCubic
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: NomUtils.Math.Curves
    source:
      id: BezierCubic
      path: ''
      startLine: 1547
    syntax:
      content:
        CSharp: public static class BezierCubic
        VB: Public Module BezierCubic
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: NomUtils.Math.Curves.BezierCubic.SamplePoint(Vector3@,Vector3@,Vector3@,Vector3@,System.Single)
      commentId: M:NomUtils.Math.Curves.BezierCubic.SamplePoint(Vector3@,Vector3@,Vector3@,Vector3@,System.Single)
      language: CSharp
      name:
        CSharp: SamplePoint(Vector3, Vector3, Vector3, Vector3, Single)
        VB: SamplePoint(ByRef Vector3, ByRef Vector3, ByRef Vector3, ByRef Vector3, Single)
      nameWithType:
        CSharp: BezierCubic.SamplePoint(Vector3, Vector3, Vector3, Vector3, Single)
        VB: BezierCubic.SamplePoint(ByRef Vector3, ByRef Vector3, ByRef Vector3, ByRef Vector3, Single)
      qualifiedName:
        CSharp: NomUtils.Math.Curves.BezierCubic.SamplePoint(Vector3, Vector3, Vector3, Vector3, System.Single)
        VB: NomUtils.Math.Curves.BezierCubic.SamplePoint(ByRef Vector3, ByRef Vector3, ByRef Vector3, ByRef Vector3, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Curves
      source:
        id: SamplePoint
        path: ''
        startLine: 1556
      summary: "\nSamples a point along a cubic curve between p0 and p3, using p1 and p2 as the &quot;arc pullers&quot;.\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector3 SamplePoint(in Vector3 p0, in Vector3 p1, in Vector3 p2, in Vector3 p3, float t)
          VB: Public Shared Function SamplePoint(ByRef p0 As Vector3, ByRef p1 As Vector3, ByRef p2 As Vector3, ByRef p3 As Vector3, t As Single) As Vector3
        parameters:
        - id: p0
          type: Global.Vector3
          description: The starting point
        - id: p1
          type: Global.Vector3
          description: Arc puller 1
        - id: p2
          type: Global.Vector3
          description: Arc puller 2
        - id: p3
          type: Global.Vector3
          description: The end point
        - id: t
          type: System.Single
          description: Time, from 0f to 1f
        return:
          type: Global.Vector3
      overload: NomUtils.Math.Curves.BezierCubic.SamplePoint*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Curves.BezierCubic.SamplePointExplicit(Vector3@,Vector3@,Vector3@,Vector3@,System.Single)
      commentId: M:NomUtils.Math.Curves.BezierCubic.SamplePointExplicit(Vector3@,Vector3@,Vector3@,Vector3@,System.Single)
      language: CSharp
      name:
        CSharp: SamplePointExplicit(Vector3, Vector3, Vector3, Vector3, Single)
        VB: SamplePointExplicit(ByRef Vector3, ByRef Vector3, ByRef Vector3, ByRef Vector3, Single)
      nameWithType:
        CSharp: BezierCubic.SamplePointExplicit(Vector3, Vector3, Vector3, Vector3, Single)
        VB: BezierCubic.SamplePointExplicit(ByRef Vector3, ByRef Vector3, ByRef Vector3, ByRef Vector3, Single)
      qualifiedName:
        CSharp: NomUtils.Math.Curves.BezierCubic.SamplePointExplicit(Vector3, Vector3, Vector3, Vector3, System.Single)
        VB: NomUtils.Math.Curves.BezierCubic.SamplePointExplicit(ByRef Vector3, ByRef Vector3, ByRef Vector3, ByRef Vector3, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Curves
      source:
        id: SamplePointExplicit
        path: ''
        startLine: 1577
      summary: "\nSamples a point along a cubic curve between p0 and p3, using p1 and p2 as the &quot;arc pullers&quot;.\n<br /><br />\nUses an explicit equation instead of using <em>BezierQuadratic.SamplePoint</em> twice.\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector3 SamplePointExplicit(in Vector3 p0, in Vector3 p1, in Vector3 p2, in Vector3 p3, float t)
          VB: Public Shared Function SamplePointExplicit(ByRef p0 As Vector3, ByRef p1 As Vector3, ByRef p2 As Vector3, ByRef p3 As Vector3, t As Single) As Vector3
        parameters:
        - id: p0
          type: Global.Vector3
          description: The starting point
        - id: p1
          type: Global.Vector3
          description: Arc puller 1
        - id: p2
          type: Global.Vector3
          description: Arc puller 2
        - id: p3
          type: Global.Vector3
          description: The end point
        - id: t
          type: System.Single
          description: Time, from 0f to 1f
        return:
          type: Global.Vector3
      overload: NomUtils.Math.Curves.BezierCubic.SamplePointExplicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Curves.BezierCubic.SampleTangent(Vector3@,Vector3@,Vector3@,Vector3@,System.Single)
      commentId: M:NomUtils.Math.Curves.BezierCubic.SampleTangent(Vector3@,Vector3@,Vector3@,Vector3@,System.Single)
      language: CSharp
      name:
        CSharp: SampleTangent(Vector3, Vector3, Vector3, Vector3, Single)
        VB: SampleTangent(ByRef Vector3, ByRef Vector3, ByRef Vector3, ByRef Vector3, Single)
      nameWithType:
        CSharp: BezierCubic.SampleTangent(Vector3, Vector3, Vector3, Vector3, Single)
        VB: BezierCubic.SampleTangent(ByRef Vector3, ByRef Vector3, ByRef Vector3, ByRef Vector3, Single)
      qualifiedName:
        CSharp: NomUtils.Math.Curves.BezierCubic.SampleTangent(Vector3, Vector3, Vector3, Vector3, System.Single)
        VB: NomUtils.Math.Curves.BezierCubic.SampleTangent(ByRef Vector3, ByRef Vector3, ByRef Vector3, ByRef Vector3, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Curves
      source:
        id: SampleTangent
        path: ''
        startLine: 1599
      summary: "\nSamples a tangent along a cubic curve between p0 and p3, using p1 and p2 as the &quot;arc pullers&quot;.\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector3 SampleTangent(in Vector3 p0, in Vector3 p1, in Vector3 p2, in Vector3 p3, float t)
          VB: Public Shared Function SampleTangent(ByRef p0 As Vector3, ByRef p1 As Vector3, ByRef p2 As Vector3, ByRef p3 As Vector3, t As Single) As Vector3
        parameters:
        - id: p0
          type: Global.Vector3
          description: The starting point
        - id: p1
          type: Global.Vector3
          description: Arc puller 1
        - id: p2
          type: Global.Vector3
          description: Arc puller 2
        - id: p3
          type: Global.Vector3
          description: The end point
        - id: t
          type: System.Single
          description: Time, from 0f to 1f
        return:
          type: Global.Vector3
      overload: NomUtils.Math.Curves.BezierCubic.SampleTangent*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Curves.BezierCubic.SampleVelocity(Vector3@,Vector3@,Vector3@,Vector3@,System.Single)
      commentId: M:NomUtils.Math.Curves.BezierCubic.SampleVelocity(Vector3@,Vector3@,Vector3@,Vector3@,System.Single)
      language: CSharp
      name:
        CSharp: SampleVelocity(Vector3, Vector3, Vector3, Vector3, Single)
        VB: SampleVelocity(ByRef Vector3, ByRef Vector3, ByRef Vector3, ByRef Vector3, Single)
      nameWithType:
        CSharp: BezierCubic.SampleVelocity(Vector3, Vector3, Vector3, Vector3, Single)
        VB: BezierCubic.SampleVelocity(ByRef Vector3, ByRef Vector3, ByRef Vector3, ByRef Vector3, Single)
      qualifiedName:
        CSharp: NomUtils.Math.Curves.BezierCubic.SampleVelocity(Vector3, Vector3, Vector3, Vector3, System.Single)
        VB: NomUtils.Math.Curves.BezierCubic.SampleVelocity(ByRef Vector3, ByRef Vector3, ByRef Vector3, ByRef Vector3, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Curves
      source:
        id: SampleVelocity
        path: ''
        startLine: 1619
      summary: "\nSamples a velocity along a cubic curve between p0 and p3, using p1 and p2 as the &quot;arc pullers&quot;.\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector3 SampleVelocity(in Vector3 p0, in Vector3 p1, in Vector3 p2, in Vector3 p3, float t)
          VB: Public Shared Function SampleVelocity(ByRef p0 As Vector3, ByRef p1 As Vector3, ByRef p2 As Vector3, ByRef p3 As Vector3, t As Single) As Vector3
        parameters:
        - id: p0
          type: Global.Vector3
          description: The starting point
        - id: p1
          type: Global.Vector3
          description: Arc puller 1
        - id: p2
          type: Global.Vector3
          description: Arc puller 2
        - id: p3
          type: Global.Vector3
          description: The end point
        - id: t
          type: System.Single
          description: Time, from 0f to 1f
        return:
          type: Global.Vector3
      overload: NomUtils.Math.Curves.BezierCubic.SampleVelocity*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: NomUtils.Math.Curves.BezierLinear
    commentId: T:NomUtils.Math.Curves.BezierLinear
    language: CSharp
    name:
      CSharp: BezierLinear
      VB: BezierLinear
    nameWithType:
      CSharp: BezierLinear
      VB: BezierLinear
    qualifiedName:
      CSharp: NomUtils.Math.Curves.BezierLinear
      VB: NomUtils.Math.Curves.BezierLinear
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: NomUtils.Math.Curves
    source:
      id: BezierLinear
      path: ''
      startLine: 1633
    syntax:
      content:
        CSharp: public static class BezierLinear
        VB: Public Module BezierLinear
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: NomUtils.Math.Curves.BezierLinear.SamplePoint(Vector3@,Vector3@,System.Single)
      commentId: M:NomUtils.Math.Curves.BezierLinear.SamplePoint(Vector3@,Vector3@,System.Single)
      language: CSharp
      name:
        CSharp: SamplePoint(Vector3, Vector3, Single)
        VB: SamplePoint(ByRef Vector3, ByRef Vector3, Single)
      nameWithType:
        CSharp: BezierLinear.SamplePoint(Vector3, Vector3, Single)
        VB: BezierLinear.SamplePoint(ByRef Vector3, ByRef Vector3, Single)
      qualifiedName:
        CSharp: NomUtils.Math.Curves.BezierLinear.SamplePoint(Vector3, Vector3, System.Single)
        VB: NomUtils.Math.Curves.BezierLinear.SamplePoint(ByRef Vector3, ByRef Vector3, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Curves
      source:
        id: SamplePoint
        path: ''
        startLine: 1640
      summary: "\nSamples a point along a bezier curve at time t.\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector3 SamplePoint(in Vector3 p0, in Vector3 p1, float t)
          VB: Public Shared Function SamplePoint(ByRef p0 As Vector3, ByRef p1 As Vector3, t As Single) As Vector3
        parameters:
        - id: p0
          type: Global.Vector3
          description: The starting point
        - id: p1
          type: Global.Vector3
          description: The end point
        - id: t
          type: System.Single
          description: Time, from 0f to 1f
        return:
          type: Global.Vector3
      overload: NomUtils.Math.Curves.BezierLinear.SamplePoint*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: NomUtils.Math.Curves.BezierQuadratic
    commentId: T:NomUtils.Math.Curves.BezierQuadratic
    language: CSharp
    name:
      CSharp: BezierQuadratic
      VB: BezierQuadratic
    nameWithType:
      CSharp: BezierQuadratic
      VB: BezierQuadratic
    qualifiedName:
      CSharp: NomUtils.Math.Curves.BezierQuadratic
      VB: NomUtils.Math.Curves.BezierQuadratic
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: NomUtils.Math.Curves
    source:
      id: BezierQuadratic
      path: ''
      startLine: 1658
    summary: "\nDefined by a set of control points, where the first and last points are the start and end points.\n<br />\nhttps://en.wikipedia.org/wiki/B%C3%A9zier_curve#Linear_B%C3%A9zier_curves\n"
    example: []
    syntax:
      content:
        CSharp: public static class BezierQuadratic
        VB: Public Module BezierQuadratic
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: NomUtils.Math.Curves.BezierQuadratic.SamplePoint(Vector3@,Vector3@,Vector3@,System.Single)
      commentId: M:NomUtils.Math.Curves.BezierQuadratic.SamplePoint(Vector3@,Vector3@,Vector3@,System.Single)
      language: CSharp
      name:
        CSharp: SamplePoint(Vector3, Vector3, Vector3, Single)
        VB: SamplePoint(ByRef Vector3, ByRef Vector3, ByRef Vector3, Single)
      nameWithType:
        CSharp: BezierQuadratic.SamplePoint(Vector3, Vector3, Vector3, Single)
        VB: BezierQuadratic.SamplePoint(ByRef Vector3, ByRef Vector3, ByRef Vector3, Single)
      qualifiedName:
        CSharp: NomUtils.Math.Curves.BezierQuadratic.SamplePoint(Vector3, Vector3, Vector3, System.Single)
        VB: NomUtils.Math.Curves.BezierQuadratic.SamplePoint(ByRef Vector3, ByRef Vector3, ByRef Vector3, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Curves
      source:
        id: SamplePoint
        path: ''
        startLine: 1666
      summary: "\nSamples a point along a bezier curve at time t.\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector3 SamplePoint(in Vector3 p0, in Vector3 p1, in Vector3 p2, float t)
          VB: Public Shared Function SamplePoint(ByRef p0 As Vector3, ByRef p1 As Vector3, ByRef p2 As Vector3, t As Single) As Vector3
        parameters:
        - id: p0
          type: Global.Vector3
          description: The starting point
        - id: p1
          type: Global.Vector3
          description: The middle point; The arc &quot;puller&quot;
        - id: p2
          type: Global.Vector3
          description: The end point
        - id: t
          type: System.Single
          description: Time, from 0f to 1f
        return:
          type: Global.Vector3
      overload: NomUtils.Math.Curves.BezierQuadratic.SamplePoint*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Curves.BezierQuadratic.SampleTangent(Vector3@,Vector3@,Vector3@,System.Single)
      commentId: M:NomUtils.Math.Curves.BezierQuadratic.SampleTangent(Vector3@,Vector3@,Vector3@,System.Single)
      language: CSharp
      name:
        CSharp: SampleTangent(Vector3, Vector3, Vector3, Single)
        VB: SampleTangent(ByRef Vector3, ByRef Vector3, ByRef Vector3, Single)
      nameWithType:
        CSharp: BezierQuadratic.SampleTangent(Vector3, Vector3, Vector3, Single)
        VB: BezierQuadratic.SampleTangent(ByRef Vector3, ByRef Vector3, ByRef Vector3, Single)
      qualifiedName:
        CSharp: NomUtils.Math.Curves.BezierQuadratic.SampleTangent(Vector3, Vector3, Vector3, System.Single)
        VB: NomUtils.Math.Curves.BezierQuadratic.SampleTangent(ByRef Vector3, ByRef Vector3, ByRef Vector3, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Curves
      source:
        id: SampleTangent
        path: ''
        startLine: 1685
      summary: "\nSamples a tangent along a bezier curve at time t.\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector3 SampleTangent(in Vector3 p0, in Vector3 p1, in Vector3 p2, float t)
          VB: Public Shared Function SampleTangent(ByRef p0 As Vector3, ByRef p1 As Vector3, ByRef p2 As Vector3, t As Single) As Vector3
        parameters:
        - id: p0
          type: Global.Vector3
          description: The starting point
        - id: p1
          type: Global.Vector3
          description: The middle point; The arc &quot;puller&quot;
        - id: p2
          type: Global.Vector3
          description: The end point
        - id: t
          type: System.Single
          description: Time, from 0f to 1f
        return:
          type: Global.Vector3
      overload: NomUtils.Math.Curves.BezierQuadratic.SampleTangent*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Curves.BezierQuadratic.SampleVelocity(Vector3@,Vector3@,Vector3@)
      commentId: M:NomUtils.Math.Curves.BezierQuadratic.SampleVelocity(Vector3@,Vector3@,Vector3@)
      language: CSharp
      name:
        CSharp: SampleVelocity(Vector3, Vector3, Vector3)
        VB: SampleVelocity(ByRef Vector3, ByRef Vector3, ByRef Vector3)
      nameWithType:
        CSharp: BezierQuadratic.SampleVelocity(Vector3, Vector3, Vector3)
        VB: BezierQuadratic.SampleVelocity(ByRef Vector3, ByRef Vector3, ByRef Vector3)
      qualifiedName:
        CSharp: NomUtils.Math.Curves.BezierQuadratic.SampleVelocity(Vector3, Vector3, Vector3)
        VB: NomUtils.Math.Curves.BezierQuadratic.SampleVelocity(ByRef Vector3, ByRef Vector3, ByRef Vector3)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Curves
      source:
        id: SampleVelocity
        path: ''
        startLine: 1701
      summary: "\nSamples a velocity along a bezier curve. Does not rely on a time domain.\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector3 SampleVelocity(in Vector3 p0, in Vector3 p1, in Vector3 p2)
          VB: Public Shared Function SampleVelocity(ByRef p0 As Vector3, ByRef p1 As Vector3, ByRef p2 As Vector3) As Vector3
        parameters:
        - id: p0
          type: Global.Vector3
          description: The starting point
        - id: p1
          type: Global.Vector3
          description: The middle point; The arc &quot;puller&quot;
        - id: p2
          type: Global.Vector3
          description: The end point
        return:
          type: Global.Vector3
      overload: NomUtils.Math.Curves.BezierQuadratic.SampleVelocity*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
- id: NomUtils.Math.Shapes
  commentId: N:NomUtils.Math.Shapes
  language: CSharp
  name:
    CSharp: NomUtils.Math.Shapes
    VB: NomUtils.Math.Shapes
  nameWithType:
    CSharp: NomUtils.Math.Shapes
    VB: NomUtils.Math.Shapes
  qualifiedName:
    CSharp: NomUtils.Math.Shapes
    VB: NomUtils.Math.Shapes
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: NomUtils.Math.Shapes.Circle
    commentId: T:NomUtils.Math.Shapes.Circle
    language: CSharp
    name:
      CSharp: Circle
      VB: Circle
    nameWithType:
      CSharp: Circle
      VB: Circle
    qualifiedName:
      CSharp: NomUtils.Math.Shapes.Circle
      VB: NomUtils.Math.Shapes.Circle
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: NomUtils.Math.Shapes
    source:
      id: Circle
      path: ''
      startLine: 1714
    syntax:
      content:
        CSharp: public static class Circle
        VB: Public Module Circle
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: NomUtils.Math.Shapes.Circle.RandomPointInCircleDeg(System.Single,System.Single,System.Single,Vector3)
      commentId: M:NomUtils.Math.Shapes.Circle.RandomPointInCircleDeg(System.Single,System.Single,System.Single,Vector3)
      language: CSharp
      name:
        CSharp: RandomPointInCircleDeg(Single, Single, Single, Vector3)
        VB: RandomPointInCircleDeg(Single, Single, Single, Vector3)
      nameWithType:
        CSharp: Circle.RandomPointInCircleDeg(Single, Single, Single, Vector3)
        VB: Circle.RandomPointInCircleDeg(Single, Single, Single, Vector3)
      qualifiedName:
        CSharp: NomUtils.Math.Shapes.Circle.RandomPointInCircleDeg(System.Single, System.Single, System.Single, Vector3)
        VB: NomUtils.Math.Shapes.Circle.RandomPointInCircleDeg(System.Single, System.Single, System.Single, Vector3)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Shapes
      source:
        id: RandomPointInCircleDeg
        path: ''
        startLine: 1718
      summary: "\nGenerates a random point in a circle between two angles in degrees.\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector2 RandomPointInCircleDeg(float minAngle, float maxAngle, float radius, Vector3 origin)
          VB: Public Shared Function RandomPointInCircleDeg(minAngle As Single, maxAngle As Single, radius As Single, origin As Vector3) As Vector2
        parameters:
        - id: minAngle
          type: System.Single
        - id: maxAngle
          type: System.Single
        - id: radius
          type: System.Single
        - id: origin
          type: Global.Vector3
        return:
          type: Global.Vector2
      overload: NomUtils.Math.Shapes.Circle.RandomPointInCircleDeg*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Shapes.Circle.RandomPointInCircleRad(System.Single,System.Single,System.Single,Vector3)
      commentId: M:NomUtils.Math.Shapes.Circle.RandomPointInCircleRad(System.Single,System.Single,System.Single,Vector3)
      language: CSharp
      name:
        CSharp: RandomPointInCircleRad(Single, Single, Single, Vector3)
        VB: RandomPointInCircleRad(Single, Single, Single, Vector3)
      nameWithType:
        CSharp: Circle.RandomPointInCircleRad(Single, Single, Single, Vector3)
        VB: Circle.RandomPointInCircleRad(Single, Single, Single, Vector3)
      qualifiedName:
        CSharp: NomUtils.Math.Shapes.Circle.RandomPointInCircleRad(System.Single, System.Single, System.Single, Vector3)
        VB: NomUtils.Math.Shapes.Circle.RandomPointInCircleRad(System.Single, System.Single, System.Single, Vector3)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Shapes
      source:
        id: RandomPointInCircleRad
        path: ''
        startLine: 1726
      summary: "\nGenerates a random point in a circle between two angles in radians.\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector2 RandomPointInCircleRad(float minAngle, float maxAngle, float radius, Vector3 origin)
          VB: Public Shared Function RandomPointInCircleRad(minAngle As Single, maxAngle As Single, radius As Single, origin As Vector3) As Vector2
        parameters:
        - id: minAngle
          type: System.Single
        - id: maxAngle
          type: System.Single
        - id: radius
          type: System.Single
        - id: origin
          type: Global.Vector3
        return:
          type: Global.Vector2
      overload: NomUtils.Math.Shapes.Circle.RandomPointInCircleRad*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Shapes.Circle.IntersectsCircle(Vector2@,System.Single,Vector2@,System.Single)
      commentId: M:NomUtils.Math.Shapes.Circle.IntersectsCircle(Vector2@,System.Single,Vector2@,System.Single)
      language: CSharp
      name:
        CSharp: IntersectsCircle(Vector2, Single, Vector2, Single)
        VB: IntersectsCircle(ByRef Vector2, Single, ByRef Vector2, Single)
      nameWithType:
        CSharp: Circle.IntersectsCircle(Vector2, Single, Vector2, Single)
        VB: Circle.IntersectsCircle(ByRef Vector2, Single, ByRef Vector2, Single)
      qualifiedName:
        CSharp: NomUtils.Math.Shapes.Circle.IntersectsCircle(Vector2, System.Single, Vector2, System.Single)
        VB: NomUtils.Math.Shapes.Circle.IntersectsCircle(ByRef Vector2, System.Single, ByRef Vector2, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Shapes
      source:
        id: IntersectsCircle
        path: ''
        startLine: 1740
      summary: "\nCircle-Circle intersection\n"
      example: []
      syntax:
        content:
          CSharp: public static bool IntersectsCircle(in Vector2 circleCenterA, float circleRadiusA, in Vector2 circleCenterB, float circleRadiusB)
          VB: Public Shared Function IntersectsCircle(ByRef circleCenterA As Vector2, circleRadiusA As Single, ByRef circleCenterB As Vector2, circleRadiusB As Single) As Boolean
        parameters:
        - id: circleCenterA
          type: Global.Vector2
        - id: circleRadiusA
          type: System.Single
        - id: circleCenterB
          type: Global.Vector2
        - id: circleRadiusB
          type: System.Single
        return:
          type: System.Boolean
      overload: NomUtils.Math.Shapes.Circle.IntersectsCircle*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Shapes.Circle.IntersectsSquare(Vector2@,System.Single,Vector2@,Vector2@)
      commentId: M:NomUtils.Math.Shapes.Circle.IntersectsSquare(Vector2@,System.Single,Vector2@,Vector2@)
      language: CSharp
      name:
        CSharp: IntersectsSquare(Vector2, Single, Vector2, Vector2)
        VB: IntersectsSquare(ByRef Vector2, Single, ByRef Vector2, ByRef Vector2)
      nameWithType:
        CSharp: Circle.IntersectsSquare(Vector2, Single, Vector2, Vector2)
        VB: Circle.IntersectsSquare(ByRef Vector2, Single, ByRef Vector2, ByRef Vector2)
      qualifiedName:
        CSharp: NomUtils.Math.Shapes.Circle.IntersectsSquare(Vector2, System.Single, Vector2, Vector2)
        VB: NomUtils.Math.Shapes.Circle.IntersectsSquare(ByRef Vector2, System.Single, ByRef Vector2, ByRef Vector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Shapes
      source:
        id: IntersectsSquare
        path: ''
        startLine: 1751
      summary: "\nCircle-Square intersection\n"
      example: []
      syntax:
        content:
          CSharp: public static bool IntersectsSquare(in Vector2 circleCenter, float circleRadius, in Vector2 squareCenter, in Vector2 squareSize)
          VB: Public Shared Function IntersectsSquare(ByRef circleCenter As Vector2, circleRadius As Single, ByRef squareCenter As Vector2, ByRef squareSize As Vector2) As Boolean
        parameters:
        - id: circleCenter
          type: Global.Vector2
        - id: circleRadius
          type: System.Single
        - id: squareCenter
          type: Global.Vector2
        - id: squareSize
          type: Global.Vector2
        return:
          type: System.Boolean
      overload: NomUtils.Math.Shapes.Circle.IntersectsSquare*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Shapes.Circle.IntersectsTriangle(Vector2@,System.Single,Vector2@,System.Single)
      commentId: M:NomUtils.Math.Shapes.Circle.IntersectsTriangle(Vector2@,System.Single,Vector2@,System.Single)
      language: CSharp
      name:
        CSharp: IntersectsTriangle(Vector2, Single, Vector2, Single)
        VB: IntersectsTriangle(ByRef Vector2, Single, ByRef Vector2, Single)
      nameWithType:
        CSharp: Circle.IntersectsTriangle(Vector2, Single, Vector2, Single)
        VB: Circle.IntersectsTriangle(ByRef Vector2, Single, ByRef Vector2, Single)
      qualifiedName:
        CSharp: NomUtils.Math.Shapes.Circle.IntersectsTriangle(Vector2, System.Single, Vector2, System.Single)
        VB: NomUtils.Math.Shapes.Circle.IntersectsTriangle(ByRef Vector2, System.Single, ByRef Vector2, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Shapes
      source:
        id: IntersectsTriangle
        path: ''
        startLine: 1781
      summary: "\nCircle-Triangle intersection\n<br /><br />\nQuite an expensive calculation at the moment. Each side of the triangle does a distance check to the circle.\nThe closest side will then check RESOLUTION amount of points against the circle distance.\n<br /><br />\n"
      example: []
      syntax:
        content:
          CSharp: public static bool IntersectsTriangle(in Vector2 circleCenter, float circleRadius, in Vector2 triangleCenter, float triangleRadius)
          VB: Public Shared Function IntersectsTriangle(ByRef circleCenter As Vector2, circleRadius As Single, ByRef triangleCenter As Vector2, triangleRadius As Single) As Boolean
        parameters:
        - id: circleCenter
          type: Global.Vector2
        - id: circleRadius
          type: System.Single
        - id: triangleCenter
          type: Global.Vector2
        - id: triangleRadius
          type: System.Single
        return:
          type: System.Boolean
      overload: NomUtils.Math.Shapes.Circle.IntersectsTriangle*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: NomUtils.Math.Shapes.Square
    commentId: T:NomUtils.Math.Shapes.Square
    language: CSharp
    name:
      CSharp: Square
      VB: Square
    nameWithType:
      CSharp: Square
      VB: Square
    qualifiedName:
      CSharp: NomUtils.Math.Shapes.Square
      VB: NomUtils.Math.Shapes.Square
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: NomUtils.Math.Shapes
    source:
      id: Square
      path: ''
      startLine: 1829
    syntax:
      content:
        CSharp: public static class Square
        VB: Public Module Square
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: NomUtils.Math.Shapes.Square.IntersectsPoint(Vector2@,Vector2@,Vector2@)
      commentId: M:NomUtils.Math.Shapes.Square.IntersectsPoint(Vector2@,Vector2@,Vector2@)
      language: CSharp
      name:
        CSharp: IntersectsPoint(Vector2, Vector2, Vector2)
        VB: IntersectsPoint(ByRef Vector2, ByRef Vector2, ByRef Vector2)
      nameWithType:
        CSharp: Square.IntersectsPoint(Vector2, Vector2, Vector2)
        VB: Square.IntersectsPoint(ByRef Vector2, ByRef Vector2, ByRef Vector2)
      qualifiedName:
        CSharp: NomUtils.Math.Shapes.Square.IntersectsPoint(Vector2, Vector2, Vector2)
        VB: NomUtils.Math.Shapes.Square.IntersectsPoint(ByRef Vector2, ByRef Vector2, ByRef Vector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Shapes
      source:
        id: IntersectsPoint
        path: ''
        startLine: 1833
      summary: "\nSquare-Point intersection\n"
      example: []
      syntax:
        content:
          CSharp: public static bool IntersectsPoint(in Vector2 squareCenterA, in Vector2 squareSizeA, in Vector2 point)
          VB: Public Shared Function IntersectsPoint(ByRef squareCenterA As Vector2, ByRef squareSizeA As Vector2, ByRef point As Vector2) As Boolean
        parameters:
        - id: squareCenterA
          type: Global.Vector2
        - id: squareSizeA
          type: Global.Vector2
        - id: point
          type: Global.Vector2
        return:
          type: System.Boolean
      overload: NomUtils.Math.Shapes.Square.IntersectsPoint*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Shapes.Square.IntersectsSquare(Vector2@,Vector2@,Vector2@,Vector2@)
      commentId: M:NomUtils.Math.Shapes.Square.IntersectsSquare(Vector2@,Vector2@,Vector2@,Vector2@)
      language: CSharp
      name:
        CSharp: IntersectsSquare(Vector2, Vector2, Vector2, Vector2)
        VB: IntersectsSquare(ByRef Vector2, ByRef Vector2, ByRef Vector2, ByRef Vector2)
      nameWithType:
        CSharp: Square.IntersectsSquare(Vector2, Vector2, Vector2, Vector2)
        VB: Square.IntersectsSquare(ByRef Vector2, ByRef Vector2, ByRef Vector2, ByRef Vector2)
      qualifiedName:
        CSharp: NomUtils.Math.Shapes.Square.IntersectsSquare(Vector2, Vector2, Vector2, Vector2)
        VB: NomUtils.Math.Shapes.Square.IntersectsSquare(ByRef Vector2, ByRef Vector2, ByRef Vector2, ByRef Vector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Shapes
      source:
        id: IntersectsSquare
        path: ''
        startLine: 1844
      summary: "\nSquare-Square intersection\n"
      example: []
      syntax:
        content:
          CSharp: public static bool IntersectsSquare(in Vector2 squareCenterA, in Vector2 squareSizeA, in Vector2 squareCenterB, in Vector2 squareSizeB)
          VB: Public Shared Function IntersectsSquare(ByRef squareCenterA As Vector2, ByRef squareSizeA As Vector2, ByRef squareCenterB As Vector2, ByRef squareSizeB As Vector2) As Boolean
        parameters:
        - id: squareCenterA
          type: Global.Vector2
        - id: squareSizeA
          type: Global.Vector2
        - id: squareCenterB
          type: Global.Vector2
        - id: squareSizeB
          type: Global.Vector2
        return:
          type: System.Boolean
      overload: NomUtils.Math.Shapes.Square.IntersectsSquare*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: NomUtils.Math.Shapes.Triangle
    commentId: T:NomUtils.Math.Shapes.Triangle
    language: CSharp
    name:
      CSharp: Triangle
      VB: Triangle
    nameWithType:
      CSharp: Triangle
      VB: Triangle
    qualifiedName:
      CSharp: NomUtils.Math.Shapes.Triangle
      VB: NomUtils.Math.Shapes.Triangle
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: NomUtils.Math.Shapes
    source:
      id: Triangle
      path: ''
      startLine: 1859
    syntax:
      content:
        CSharp: public static class Triangle
        VB: Public Module Triangle
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: NomUtils.Math.Shapes.Triangle.GetTopPoint(Vector2@,System.Single)
      commentId: M:NomUtils.Math.Shapes.Triangle.GetTopPoint(Vector2@,System.Single)
      language: CSharp
      name:
        CSharp: GetTopPoint(Vector2, Single)
        VB: GetTopPoint(ByRef Vector2, Single)
      nameWithType:
        CSharp: Triangle.GetTopPoint(Vector2, Single)
        VB: Triangle.GetTopPoint(ByRef Vector2, Single)
      qualifiedName:
        CSharp: NomUtils.Math.Shapes.Triangle.GetTopPoint(Vector2, System.Single)
        VB: NomUtils.Math.Shapes.Triangle.GetTopPoint(ByRef Vector2, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Shapes
      source:
        id: GetTopPoint
        path: ''
        startLine: 1864
      syntax:
        content:
          CSharp: public static Vector2 GetTopPoint(in Vector2 center, float radius)
          VB: Public Shared Function GetTopPoint(ByRef center As Vector2, radius As Single) As Vector2
        parameters:
        - id: center
          type: Global.Vector2
        - id: radius
          type: System.Single
        return:
          type: Global.Vector2
      overload: NomUtils.Math.Shapes.Triangle.GetTopPoint*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Shapes.Triangle.GetBottomRightPoint(Vector2@,System.Single)
      commentId: M:NomUtils.Math.Shapes.Triangle.GetBottomRightPoint(Vector2@,System.Single)
      language: CSharp
      name:
        CSharp: GetBottomRightPoint(Vector2, Single)
        VB: GetBottomRightPoint(ByRef Vector2, Single)
      nameWithType:
        CSharp: Triangle.GetBottomRightPoint(Vector2, Single)
        VB: Triangle.GetBottomRightPoint(ByRef Vector2, Single)
      qualifiedName:
        CSharp: NomUtils.Math.Shapes.Triangle.GetBottomRightPoint(Vector2, System.Single)
        VB: NomUtils.Math.Shapes.Triangle.GetBottomRightPoint(ByRef Vector2, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Shapes
      source:
        id: GetBottomRightPoint
        path: ''
        startLine: 1869
      syntax:
        content:
          CSharp: public static Vector2 GetBottomRightPoint(in Vector2 center, float radius)
          VB: Public Shared Function GetBottomRightPoint(ByRef center As Vector2, radius As Single) As Vector2
        parameters:
        - id: center
          type: Global.Vector2
        - id: radius
          type: System.Single
        return:
          type: Global.Vector2
      overload: NomUtils.Math.Shapes.Triangle.GetBottomRightPoint*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Shapes.Triangle.GetBottomLeftPoint(Vector2@,System.Single)
      commentId: M:NomUtils.Math.Shapes.Triangle.GetBottomLeftPoint(Vector2@,System.Single)
      language: CSharp
      name:
        CSharp: GetBottomLeftPoint(Vector2, Single)
        VB: GetBottomLeftPoint(ByRef Vector2, Single)
      nameWithType:
        CSharp: Triangle.GetBottomLeftPoint(Vector2, Single)
        VB: Triangle.GetBottomLeftPoint(ByRef Vector2, Single)
      qualifiedName:
        CSharp: NomUtils.Math.Shapes.Triangle.GetBottomLeftPoint(Vector2, System.Single)
        VB: NomUtils.Math.Shapes.Triangle.GetBottomLeftPoint(ByRef Vector2, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Shapes
      source:
        id: GetBottomLeftPoint
        path: ''
        startLine: 1874
      syntax:
        content:
          CSharp: public static Vector2 GetBottomLeftPoint(in Vector2 center, float radius)
          VB: Public Shared Function GetBottomLeftPoint(ByRef center As Vector2, radius As Single) As Vector2
        parameters:
        - id: center
          type: Global.Vector2
        - id: radius
          type: System.Single
        return:
          type: Global.Vector2
      overload: NomUtils.Math.Shapes.Triangle.GetBottomLeftPoint*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Shapes.Triangle.GetHypotenuse(System.Single,System.Single)
      commentId: M:NomUtils.Math.Shapes.Triangle.GetHypotenuse(System.Single,System.Single)
      language: CSharp
      name:
        CSharp: GetHypotenuse(Single, Single)
        VB: GetHypotenuse(Single, Single)
      nameWithType:
        CSharp: Triangle.GetHypotenuse(Single, Single)
        VB: Triangle.GetHypotenuse(Single, Single)
      qualifiedName:
        CSharp: NomUtils.Math.Shapes.Triangle.GetHypotenuse(System.Single, System.Single)
        VB: NomUtils.Math.Shapes.Triangle.GetHypotenuse(System.Single, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Shapes
      source:
        id: GetHypotenuse
        path: ''
        startLine: 1887
      summary: "\na * a + b * b = c * c\n<br /><br />\nSolves for c\n"
      example: []
      syntax:
        content:
          CSharp: public static float GetHypotenuse(float a, float b)
          VB: Public Shared Function GetHypotenuse(a As Single, b As Single) As Single
        parameters:
        - id: a
          type: System.Single
          description: ''
        - id: b
          type: System.Single
          description: ''
        return:
          type: System.Single
          description: ''
      overload: NomUtils.Math.Shapes.Triangle.GetHypotenuse*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Shapes.Triangle.GetAngle(Vector2@,Vector2@,Vector2@)
      commentId: M:NomUtils.Math.Shapes.Triangle.GetAngle(Vector2@,Vector2@,Vector2@)
      language: CSharp
      name:
        CSharp: GetAngle(Vector2, Vector2, Vector2)
        VB: GetAngle(ByRef Vector2, ByRef Vector2, ByRef Vector2)
      nameWithType:
        CSharp: Triangle.GetAngle(Vector2, Vector2, Vector2)
        VB: Triangle.GetAngle(ByRef Vector2, ByRef Vector2, ByRef Vector2)
      qualifiedName:
        CSharp: NomUtils.Math.Shapes.Triangle.GetAngle(Vector2, Vector2, Vector2)
        VB: NomUtils.Math.Shapes.Triangle.GetAngle(ByRef Vector2, ByRef Vector2, ByRef Vector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Shapes
      source:
        id: GetAngle
        path: ''
        startLine: 1892
      syntax:
        content:
          CSharp: public static float GetAngle(in Vector2 a, in Vector2 b, in Vector2 c)
          VB: Public Shared Function GetAngle(ByRef a As Vector2, ByRef b As Vector2, ByRef c As Vector2) As Single
        parameters:
        - id: a
          type: Global.Vector2
        - id: b
          type: Global.Vector2
        - id: c
          type: Global.Vector2
        return:
          type: System.Single
      overload: NomUtils.Math.Shapes.Triangle.GetAngle*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Math.Shapes.Triangle.IntersectsPoint(Vector2@,System.Single,Vector2@)
      commentId: M:NomUtils.Math.Shapes.Triangle.IntersectsPoint(Vector2@,System.Single,Vector2@)
      language: CSharp
      name:
        CSharp: IntersectsPoint(Vector2, Single, Vector2)
        VB: IntersectsPoint(ByRef Vector2, Single, ByRef Vector2)
      nameWithType:
        CSharp: Triangle.IntersectsPoint(Vector2, Single, Vector2)
        VB: Triangle.IntersectsPoint(ByRef Vector2, Single, ByRef Vector2)
      qualifiedName:
        CSharp: NomUtils.Math.Shapes.Triangle.IntersectsPoint(Vector2, System.Single, Vector2)
        VB: NomUtils.Math.Shapes.Triangle.IntersectsPoint(ByRef Vector2, System.Single, ByRef Vector2)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Shapes
      source:
        id: IntersectsPoint
        path: ''
        startLine: 1908
      summary: "\nTriangle-Point intersection\n"
      example: []
      syntax:
        content:
          CSharp: public static bool IntersectsPoint(in Vector2 triangleCenter, float triangleRadius, in Vector2 point)
          VB: Public Shared Function IntersectsPoint(ByRef triangleCenter As Vector2, triangleRadius As Single, ByRef point As Vector2) As Boolean
        parameters:
        - id: triangleCenter
          type: Global.Vector2
          description: ''
        - id: triangleRadius
          type: System.Single
          description: ''
        - id: point
          type: Global.Vector2
          description: ''
        return:
          type: System.Boolean
          description: ''
      overload: NomUtils.Math.Shapes.Triangle.IntersectsPoint*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
- id: NomUtils.Math.Splines
  commentId: N:NomUtils.Math.Splines
  language: CSharp
  name:
    CSharp: NomUtils.Math.Splines
    VB: NomUtils.Math.Splines
  nameWithType:
    CSharp: NomUtils.Math.Splines
    VB: NomUtils.Math.Splines
  qualifiedName:
    CSharp: NomUtils.Math.Splines
    VB: NomUtils.Math.Splines
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: NomUtils.Math.Splines.CatmulRomSpline
    commentId: T:NomUtils.Math.Splines.CatmulRomSpline
    language: CSharp
    name:
      CSharp: CatmulRomSpline
      VB: CatmulRomSpline
    nameWithType:
      CSharp: CatmulRomSpline
      VB: CatmulRomSpline
    qualifiedName:
      CSharp: NomUtils.Math.Splines.CatmulRomSpline
      VB: NomUtils.Math.Splines.CatmulRomSpline
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: NomUtils.Math.Splines
    source:
      id: CatmulRomSpline
      path: ''
      startLine: 1929
    syntax:
      content:
        CSharp: public static class CatmulRomSpline
        VB: Public Module CatmulRomSpline
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: NomUtils.Math.Splines.CatmulRomSpline.SamplePoint(System.Single,Vector2[])
      commentId: M:NomUtils.Math.Splines.CatmulRomSpline.SamplePoint(System.Single,Vector2[])
      language: CSharp
      name:
        CSharp: SamplePoint(Single, Vector2[])
        VB: SamplePoint(Single, Vector2())
      nameWithType:
        CSharp: CatmulRomSpline.SamplePoint(Single, Vector2[])
        VB: CatmulRomSpline.SamplePoint(Single, Vector2())
      qualifiedName:
        CSharp: NomUtils.Math.Splines.CatmulRomSpline.SamplePoint(System.Single, Vector2[])
        VB: NomUtils.Math.Splines.CatmulRomSpline.SamplePoint(System.Single, Vector2())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Math.Splines
      source:
        id: SamplePoint
        path: ''
        startLine: 1935
      summary: "\nSamples a point on a Catmull-Rom spline.\n"
      example: []
      syntax:
        content:
          CSharp: public static Vector2 SamplePoint(float t, Vector2[] points)
          VB: Public Shared Function SamplePoint(t As Single, points As Vector2()) As Vector2
        parameters:
        - id: t
          type: System.Single
          description: Time, from 0f to 1f
        - id: points
          type: Global.Vector2[]
          description: Collection of points. If less than 4, then default zero is returned.
        return:
          type: Global.Vector2
      overload: NomUtils.Math.Splines.CatmulRomSpline.SamplePoint*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
- id: NomUtils.Unity
  commentId: N:NomUtils.Unity
  language: CSharp
  name:
    CSharp: NomUtils.Unity
    VB: NomUtils.Unity
  nameWithType:
    CSharp: NomUtils.Unity
    VB: NomUtils.Unity
  qualifiedName:
    CSharp: NomUtils.Unity
    VB: NomUtils.Unity
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: NomUtils.Unity.AudioUtility
    commentId: T:NomUtils.Unity.AudioUtility
    language: CSharp
    name:
      CSharp: AudioUtility
      VB: AudioUtility
    nameWithType:
      CSharp: AudioUtility
      VB: AudioUtility
    qualifiedName:
      CSharp: NomUtils.Unity.AudioUtility
      VB: NomUtils.Unity.AudioUtility
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: NomUtils.Unity
    source:
      id: AudioUtility
      path: ''
      startLine: 1966
    syntax:
      content:
        CSharp: public static class AudioUtility
        VB: Public Module AudioUtility
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: NomUtils.Unity.AudioUtility.IndexToFrequency(System.Single,System.Int32)
      commentId: M:NomUtils.Unity.AudioUtility.IndexToFrequency(System.Single,System.Int32)
      language: CSharp
      name:
        CSharp: IndexToFrequency(Single, Int32)
        VB: IndexToFrequency(Single, Int32)
      nameWithType:
        CSharp: AudioUtility.IndexToFrequency(Single, Int32)
        VB: AudioUtility.IndexToFrequency(Single, Int32)
      qualifiedName:
        CSharp: NomUtils.Unity.AudioUtility.IndexToFrequency(System.Single, System.Int32)
        VB: NomUtils.Unity.AudioUtility.IndexToFrequency(System.Single, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Unity
      source:
        id: IndexToFrequency
        path: ''
        startLine: 1973
      summary: "\nConverts an index &lt;= length to its closest frequency.\n"
      example: []
      syntax:
        content:
          CSharp: public static int IndexToFrequency(float index, int length)
          VB: Public Shared Function IndexToFrequency(index As Single, length As Integer) As Integer
        parameters:
        - id: index
          type: System.Single
          description: Index within the length
        - id: length
          type: System.Int32
          description: Length of the collection
        return:
          type: System.Int32
          description: Frequency in Hz
      overload: NomUtils.Unity.AudioUtility.IndexToFrequency*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Unity.AudioUtility.FrequencyToIndex(System.Single,System.Int32)
      commentId: M:NomUtils.Unity.AudioUtility.FrequencyToIndex(System.Single,System.Int32)
      language: CSharp
      name:
        CSharp: FrequencyToIndex(Single, Int32)
        VB: FrequencyToIndex(Single, Int32)
      nameWithType:
        CSharp: AudioUtility.FrequencyToIndex(Single, Int32)
        VB: AudioUtility.FrequencyToIndex(Single, Int32)
      qualifiedName:
        CSharp: NomUtils.Unity.AudioUtility.FrequencyToIndex(System.Single, System.Int32)
        VB: NomUtils.Unity.AudioUtility.FrequencyToIndex(System.Single, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Unity
      source:
        id: FrequencyToIndex
        path: ''
        startLine: 1985
      summary: "\nConverts a frequency to its closest index within a given collection length;\n"
      example: []
      syntax:
        content:
          CSharp: public static int FrequencyToIndex(float frequency, int length)
          VB: Public Shared Function FrequencyToIndex(frequency As Single, length As Integer) As Integer
        parameters:
        - id: frequency
          type: System.Single
          description: Frequency in Hz
        - id: length
          type: System.Int32
          description: Length of the collection
        return:
          type: System.Int32
          description: Index within the collection length
      overload: NomUtils.Unity.AudioUtility.FrequencyToIndex*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Unity.AudioUtility.GenerateHertzRange(System.UInt32,System.UInt32,System.UInt32)
      commentId: M:NomUtils.Unity.AudioUtility.GenerateHertzRange(System.UInt32,System.UInt32,System.UInt32)
      language: CSharp
      name:
        CSharp: GenerateHertzRange(UInt32, UInt32, UInt32)
        VB: GenerateHertzRange(UInt32, UInt32, UInt32)
      nameWithType:
        CSharp: AudioUtility.GenerateHertzRange(UInt32, UInt32, UInt32)
        VB: AudioUtility.GenerateHertzRange(UInt32, UInt32, UInt32)
      qualifiedName:
        CSharp: NomUtils.Unity.AudioUtility.GenerateHertzRange(System.UInt32, System.UInt32, System.UInt32)
        VB: NomUtils.Unity.AudioUtility.GenerateHertzRange(System.UInt32, System.UInt32, System.UInt32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Unity
      source:
        id: GenerateHertzRange
        path: ''
        startLine: 1998
      summary: "\nGenerates a Hz range between two frequencies.\n"
      example: []
      syntax:
        content:
          CSharp: public static float[] GenerateHertzRange(uint bandCount, uint startFrequency, uint endFrequency)
          VB: Public Shared Function GenerateHertzRange(bandCount As UInteger, startFrequency As UInteger, endFrequency As UInteger) As Single()
        parameters:
        - id: bandCount
          type: System.UInt32
          description: Amount of subbands to produce
        - id: startFrequency
          type: System.UInt32
          description: Starting frequency in Hz
        - id: endFrequency
          type: System.UInt32
          description: Ending frequency in Hz
        return:
          type: System.Single[]
          description: ''
      overload: NomUtils.Unity.AudioUtility.GenerateHertzRange*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Unity.AudioUtility.GenerateHertzRangeNonAlloc(System.Single[],System.UInt32,System.UInt32)
      commentId: M:NomUtils.Unity.AudioUtility.GenerateHertzRangeNonAlloc(System.Single[],System.UInt32,System.UInt32)
      language: CSharp
      name:
        CSharp: GenerateHertzRangeNonAlloc(Single[], UInt32, UInt32)
        VB: GenerateHertzRangeNonAlloc(Single(), UInt32, UInt32)
      nameWithType:
        CSharp: AudioUtility.GenerateHertzRangeNonAlloc(Single[], UInt32, UInt32)
        VB: AudioUtility.GenerateHertzRangeNonAlloc(Single(), UInt32, UInt32)
      qualifiedName:
        CSharp: NomUtils.Unity.AudioUtility.GenerateHertzRangeNonAlloc(System.Single[], System.UInt32, System.UInt32)
        VB: NomUtils.Unity.AudioUtility.GenerateHertzRangeNonAlloc(System.Single(), System.UInt32, System.UInt32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Unity
      source:
        id: GenerateHertzRangeNonAlloc
        path: ''
        startLine: 2018
      summary: "\nGenerates a Hz range between two frequencies without allocating garbage.\n"
      example: []
      syntax:
        content:
          CSharp: public static void GenerateHertzRangeNonAlloc(float[] bands, uint startFrequency, uint endFrequency)
          VB: Public Shared Sub GenerateHertzRangeNonAlloc(bands As Single(), startFrequency As UInteger, endFrequency As UInteger)
        parameters:
        - id: bands
          type: System.Single[]
          description: Existing array to inject data into
        - id: startFrequency
          type: System.UInt32
          description: Starting frequency in Hz
        - id: endFrequency
          type: System.UInt32
          description: Ending frequency in Hz
      overload: NomUtils.Unity.AudioUtility.GenerateHertzRangeNonAlloc*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: NomUtils.Unity.LayerMaskUtility
    commentId: T:NomUtils.Unity.LayerMaskUtility
    language: CSharp
    name:
      CSharp: LayerMaskUtility
      VB: LayerMaskUtility
    nameWithType:
      CSharp: LayerMaskUtility
      VB: LayerMaskUtility
    qualifiedName:
      CSharp: NomUtils.Unity.LayerMaskUtility
      VB: NomUtils.Unity.LayerMaskUtility
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: NomUtils.Unity
    source:
      id: LayerMaskUtility
      path: ''
      startLine: 2034
    syntax:
      content:
        CSharp: public static class LayerMaskUtility
        VB: Public Module LayerMaskUtility
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - isExtensionMethod: true
      id: NomUtils.Unity.LayerMaskUtility.GetIndex(LayerMask)
      commentId: M:NomUtils.Unity.LayerMaskUtility.GetIndex(LayerMask)
      language: CSharp
      name:
        CSharp: GetIndex(LayerMask)
        VB: GetIndex(LayerMask)
      nameWithType:
        CSharp: LayerMaskUtility.GetIndex(LayerMask)
        VB: LayerMaskUtility.GetIndex(LayerMask)
      qualifiedName:
        CSharp: NomUtils.Unity.LayerMaskUtility.GetIndex(LayerMask)
        VB: NomUtils.Unity.LayerMaskUtility.GetIndex(LayerMask)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Unity
      source:
        id: GetIndex
        path: ''
        startLine: 2039
      summary: "\nReturns the index of the LayerMask. This expects a LayerMask of a single input index, not multiple.\n"
      example: []
      syntax:
        content:
          CSharp: public static int GetIndex(this LayerMask layerMask)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function GetIndex(layerMask As LayerMask) As Integer
        parameters:
        - id: layerMask
          type: Global.LayerMask
        return:
          type: System.Int32
          description: The index of the layer.
      overload: NomUtils.Unity.LayerMaskUtility.GetIndex*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: NomUtils.Unity.MainThread
    commentId: T:NomUtils.Unity.MainThread
    language: CSharp
    name:
      CSharp: MainThread
      VB: MainThread
    nameWithType:
      CSharp: MainThread
      VB: MainThread
    qualifiedName:
      CSharp: NomUtils.Unity.MainThread
      VB: NomUtils.Unity.MainThread
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: NomUtils.Unity
    source:
      id: MainThread
      path: ''
      startLine: 2059
    syntax:
      content:
        CSharp: 'public class MainThread : MonoBehaviour'
        VB: >-
          Public Class MainThread

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: NomUtils.Unity.MainThread.OnGameLoad
      commentId: M:NomUtils.Unity.MainThread.OnGameLoad
      language: CSharp
      name:
        CSharp: OnGameLoad()
        VB: OnGameLoad()
      nameWithType:
        CSharp: MainThread.OnGameLoad()
        VB: MainThread.OnGameLoad()
      qualifiedName:
        CSharp: NomUtils.Unity.MainThread.OnGameLoad()
        VB: NomUtils.Unity.MainThread.OnGameLoad()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Unity
      source:
        id: OnGameLoad
        path: ''
        startLine: 2070
      syntax:
        content:
          CSharp: public static void OnGameLoad()
          VB: Public Shared Sub OnGameLoad
      overload: NomUtils.Unity.MainThread.OnGameLoad*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Unity.MainThread.QueueTask(Action)
      commentId: M:NomUtils.Unity.MainThread.QueueTask(Action)
      language: CSharp
      name:
        CSharp: QueueTask(Action)
        VB: QueueTask(Action)
      nameWithType:
        CSharp: MainThread.QueueTask(Action)
        VB: MainThread.QueueTask(Action)
      qualifiedName:
        CSharp: NomUtils.Unity.MainThread.QueueTask(Action)
        VB: NomUtils.Unity.MainThread.QueueTask(Action)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Unity
      source:
        id: QueueTask
        path: ''
        startLine: 2091
      syntax:
        content:
          CSharp: public static void QueueTask(Action action)
          VB: Public Shared Sub QueueTask(action As Action)
        parameters:
        - id: action
          type: Global.Action
      overload: NomUtils.Unity.MainThread.QueueTask*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Unity.MainThread.QueueCoroutine(IEnumerator)
      commentId: M:NomUtils.Unity.MainThread.QueueCoroutine(IEnumerator)
      language: CSharp
      name:
        CSharp: QueueCoroutine(IEnumerator)
        VB: QueueCoroutine(IEnumerator)
      nameWithType:
        CSharp: MainThread.QueueCoroutine(IEnumerator)
        VB: MainThread.QueueCoroutine(IEnumerator)
      qualifiedName:
        CSharp: NomUtils.Unity.MainThread.QueueCoroutine(IEnumerator)
        VB: NomUtils.Unity.MainThread.QueueCoroutine(IEnumerator)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Unity
      source:
        id: QueueCoroutine
        path: ''
        startLine: 2093
      syntax:
        content:
          CSharp: public static void QueueCoroutine(IEnumerator enumerator)
          VB: Public Shared Sub QueueCoroutine(enumerator As IEnumerator)
        parameters:
        - id: enumerator
          type: Global.IEnumerator
      overload: NomUtils.Unity.MainThread.QueueCoroutine*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: NomUtils.Unity.TextureUtility
    commentId: T:NomUtils.Unity.TextureUtility
    language: CSharp
    name:
      CSharp: TextureUtility
      VB: TextureUtility
    nameWithType:
      CSharp: TextureUtility
      VB: TextureUtility
    qualifiedName:
      CSharp: NomUtils.Unity.TextureUtility
      VB: NomUtils.Unity.TextureUtility
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: NomUtils.Unity
    source:
      id: TextureUtility
      path: ''
      startLine: 2151
    syntax:
      content:
        CSharp: public static class TextureUtility
        VB: Public Module TextureUtility
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: NomUtils.Unity.TextureUtility.GenerateGradientTexture(Gradient,System.UInt32,System.Boolean)
      commentId: M:NomUtils.Unity.TextureUtility.GenerateGradientTexture(Gradient,System.UInt32,System.Boolean)
      language: CSharp
      name:
        CSharp: GenerateGradientTexture(Gradient, UInt32, Boolean)
        VB: GenerateGradientTexture(Gradient, UInt32, Boolean)
      nameWithType:
        CSharp: TextureUtility.GenerateGradientTexture(Gradient, UInt32, Boolean)
        VB: TextureUtility.GenerateGradientTexture(Gradient, UInt32, Boolean)
      qualifiedName:
        CSharp: NomUtils.Unity.TextureUtility.GenerateGradientTexture(Gradient, System.UInt32, System.Boolean)
        VB: NomUtils.Unity.TextureUtility.GenerateGradientTexture(Gradient, System.UInt32, System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Unity
      source:
        id: GenerateGradientTexture
        path: ''
        startLine: 2155
      summary: "\nGenerates a 1D lookup texture for a given gradient.\n"
      example: []
      syntax:
        content:
          CSharp: public static Texture2D GenerateGradientTexture(Gradient gradient, uint resolution = 512U, bool wrap = false)
          VB: Public Shared Function GenerateGradientTexture(gradient As Gradient, resolution As UInteger = 512UI, wrap As Boolean = False) As Texture2D
        parameters:
        - id: gradient
          type: Global.Gradient
        - id: resolution
          type: System.UInt32
        - id: wrap
          type: System.Boolean
        return:
          type: Global.Texture2D
      overload: NomUtils.Unity.TextureUtility.GenerateGradientTexture*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Unity.TextureUtility.GenerateCurveTexture(AnimationCurve,System.UInt32,System.Boolean)
      commentId: M:NomUtils.Unity.TextureUtility.GenerateCurveTexture(AnimationCurve,System.UInt32,System.Boolean)
      language: CSharp
      name:
        CSharp: GenerateCurveTexture(AnimationCurve, UInt32, Boolean)
        VB: GenerateCurveTexture(AnimationCurve, UInt32, Boolean)
      nameWithType:
        CSharp: TextureUtility.GenerateCurveTexture(AnimationCurve, UInt32, Boolean)
        VB: TextureUtility.GenerateCurveTexture(AnimationCurve, UInt32, Boolean)
      qualifiedName:
        CSharp: NomUtils.Unity.TextureUtility.GenerateCurveTexture(AnimationCurve, System.UInt32, System.Boolean)
        VB: NomUtils.Unity.TextureUtility.GenerateCurveTexture(AnimationCurve, System.UInt32, System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Unity
      source:
        id: GenerateCurveTexture
        path: ''
        startLine: 2179
      summary: "\nGenerates a 1D lookup texture for a given curve.\nSamples from [0, 1] and clamps the result to [0, 1].\nCurves should fit this range on both axes for best results.\n"
      example: []
      syntax:
        content:
          CSharp: public static Texture2D GenerateCurveTexture(AnimationCurve curve, uint resolution = 512U, bool wrap = false)
          VB: Public Shared Function GenerateCurveTexture(curve As AnimationCurve, resolution As UInteger = 512UI, wrap As Boolean = False) As Texture2D
        parameters:
        - id: curve
          type: Global.AnimationCurve
        - id: resolution
          type: System.UInt32
        - id: wrap
          type: System.Boolean
        return:
          type: Global.Texture2D
      overload: NomUtils.Unity.TextureUtility.GenerateCurveTexture*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: NomUtils.Unity.TextureUtility.GenerateCurveTexture(List{AnimationCurve},System.UInt32,System.Boolean)
      commentId: M:NomUtils.Unity.TextureUtility.GenerateCurveTexture(List{AnimationCurve},System.UInt32,System.Boolean)
      language: CSharp
      name:
        CSharp: GenerateCurveTexture(List<AnimationCurve>, UInt32, Boolean)
        VB: GenerateCurveTexture(List(Of AnimationCurve), UInt32, Boolean)
      nameWithType:
        CSharp: TextureUtility.GenerateCurveTexture(List<AnimationCurve>, UInt32, Boolean)
        VB: TextureUtility.GenerateCurveTexture(List(Of AnimationCurve), UInt32, Boolean)
      qualifiedName:
        CSharp: NomUtils.Unity.TextureUtility.GenerateCurveTexture(List<AnimationCurve>, System.UInt32, System.Boolean)
        VB: NomUtils.Unity.TextureUtility.GenerateCurveTexture(List(Of AnimationCurve), System.UInt32, System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Unity
      source:
        id: GenerateCurveTexture
        path: ''
        startLine: 2204
      summary: "\nGenerates a 1D lookup texture for a given set of curves (up to 4).\nEach curve is mapped to a different channel (RGBA).\nSamples from [0, 1] and clamps the result to [0, 1].\nCurves should fit this range on both axes for best results.\n"
      example: []
      syntax:
        content:
          CSharp: public static Texture2D GenerateCurveTexture(List<AnimationCurve> curves, uint resolution = 512U, bool wrap = false)
          VB: Public Shared Function GenerateCurveTexture(curves As List(Of AnimationCurve), resolution As UInteger = 512UI, wrap As Boolean = False) As Texture2D
        parameters:
        - id: curves
          type: Global.List{AnimationCurve}
        - id: resolution
          type: System.UInt32
        - id: wrap
          type: System.Boolean
        return:
          type: Global.Texture2D
      overload: NomUtils.Unity.TextureUtility.GenerateCurveTexture*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: NomUtils.Unity.TransformUtility
    commentId: T:NomUtils.Unity.TransformUtility
    language: CSharp
    name:
      CSharp: TransformUtility
      VB: TransformUtility
    nameWithType:
      CSharp: TransformUtility
      VB: TransformUtility
    qualifiedName:
      CSharp: NomUtils.Unity.TransformUtility
      VB: NomUtils.Unity.TransformUtility
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: NomUtils.Unity
    source:
      id: TransformUtility
      path: ''
      startLine: 2233
    syntax:
      content:
        CSharp: public static class TransformUtility
        VB: Public Module TransformUtility
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - isExtensionMethod: true
      id: NomUtils.Unity.TransformUtility.CleanChildren(Transform)
      commentId: M:NomUtils.Unity.TransformUtility.CleanChildren(Transform)
      language: CSharp
      name:
        CSharp: CleanChildren(Transform)
        VB: CleanChildren(Transform)
      nameWithType:
        CSharp: TransformUtility.CleanChildren(Transform)
        VB: TransformUtility.CleanChildren(Transform)
      qualifiedName:
        CSharp: NomUtils.Unity.TransformUtility.CleanChildren(Transform)
        VB: NomUtils.Unity.TransformUtility.CleanChildren(Transform)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Unity
      source:
        id: CleanChildren
        path: ''
        startLine: 2237
      summary: "\nDestroys all children that exist on a parent at the end of the current frame.\n"
      example: []
      syntax:
        content:
          CSharp: public static void CleanChildren(this Transform transform)
          VB: >-
            <ExtensionAttribute>

            Public Shared Sub CleanChildren(transform As Transform)
        parameters:
        - id: transform
          type: Global.Transform
      overload: NomUtils.Unity.TransformUtility.CleanChildren*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: NomUtils.Unity.TransformUtility.CleanChildrenImmediate(Transform)
      commentId: M:NomUtils.Unity.TransformUtility.CleanChildrenImmediate(Transform)
      language: CSharp
      name:
        CSharp: CleanChildrenImmediate(Transform)
        VB: CleanChildrenImmediate(Transform)
      nameWithType:
        CSharp: TransformUtility.CleanChildrenImmediate(Transform)
        VB: TransformUtility.CleanChildrenImmediate(Transform)
      qualifiedName:
        CSharp: NomUtils.Unity.TransformUtility.CleanChildrenImmediate(Transform)
        VB: NomUtils.Unity.TransformUtility.CleanChildrenImmediate(Transform)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: NomUtils.Unity
      source:
        id: CleanChildrenImmediate
        path: ''
        startLine: 2247
      summary: "\nDestroys all children that exist on a parent instantly.\n"
      example: []
      syntax:
        content:
          CSharp: public static void CleanChildrenImmediate(this Transform transform)
          VB: >-
            <ExtensionAttribute>

            Public Shared Sub CleanChildrenImmediate(transform As Transform)
        parameters:
        - id: transform
          type: Global.Transform
      overload: NomUtils.Unity.TransformUtility.CleanChildrenImmediate*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
references:
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  NomUtils.General.CollectionUtility.GetInterpolatedIndex*:
    name:
      CSharp:
      - id: NomUtils.General.CollectionUtility.GetInterpolatedIndex*
        name: GetInterpolatedIndex
        nameWithType: CollectionUtility.GetInterpolatedIndex
        qualifiedName: NomUtils.General.CollectionUtility.GetInterpolatedIndex
      VB:
      - id: NomUtils.General.CollectionUtility.GetInterpolatedIndex*
        name: GetInterpolatedIndex
        nameWithType: CollectionUtility.GetInterpolatedIndex
        qualifiedName: NomUtils.General.CollectionUtility.GetInterpolatedIndex
    isDefinition: true
    commentId: Overload:NomUtils.General.CollectionUtility.GetInterpolatedIndex
  NomUtils.General.CollectionUtility:
    name:
      CSharp:
      - id: NomUtils.General.CollectionUtility
        name: CollectionUtility
        nameWithType: CollectionUtility
        qualifiedName: NomUtils.General.CollectionUtility
      VB:
      - id: NomUtils.General.CollectionUtility
        name: CollectionUtility
        nameWithType: CollectionUtility
        qualifiedName: NomUtils.General.CollectionUtility
    isDefinition: true
    commentId: T:NomUtils.General.CollectionUtility
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  Global.Enum:
    name:
      CSharp:
      - id: Global.Enum
        name: Enum
        nameWithType: Enum
        qualifiedName: Enum
        isExternal: true
      VB:
      - id: Global.Enum
        name: Enum
        nameWithType: Enum
        qualifiedName: Enum
        isExternal: true
    isDefinition: true
  NomUtils.General.EnumUtility.GetHexCode*:
    name:
      CSharp:
      - id: NomUtils.General.EnumUtility.GetHexCode*
        name: GetHexCode
        nameWithType: EnumUtility.GetHexCode
        qualifiedName: NomUtils.General.EnumUtility.GetHexCode
      VB:
      - id: NomUtils.General.EnumUtility.GetHexCode*
        name: GetHexCode
        nameWithType: EnumUtility.GetHexCode
        qualifiedName: NomUtils.General.EnumUtility.GetHexCode
    isDefinition: true
    commentId: Overload:NomUtils.General.EnumUtility.GetHexCode
  NomUtils.General.EnumUtility:
    name:
      CSharp:
      - id: NomUtils.General.EnumUtility
        name: EnumUtility
        nameWithType: EnumUtility
        qualifiedName: NomUtils.General.EnumUtility
      VB:
      - id: NomUtils.General.EnumUtility
        name: EnumUtility
        nameWithType: EnumUtility
        qualifiedName: NomUtils.General.EnumUtility
    isDefinition: true
    commentId: T:NomUtils.General.EnumUtility
  NomUtils.General:
    name:
      CSharp:
      - name: NomUtils.General
        nameWithType: NomUtils.General
        qualifiedName: NomUtils.General
      VB:
      - name: NomUtils.General
        nameWithType: NomUtils.General
        qualifiedName: NomUtils.General
    isDefinition: true
    commentId: N:NomUtils.General
  System.SByte:
    name:
      CSharp:
      - id: System.SByte
        name: SByte
        nameWithType: SByte
        qualifiedName: System.SByte
        isExternal: true
      VB:
      - id: System.SByte
        name: SByte
        nameWithType: SByte
        qualifiedName: System.SByte
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.SByte
  NomUtils.Math.BitUtility.Bit8ToString*:
    name:
      CSharp:
      - id: NomUtils.Math.BitUtility.Bit8ToString*
        name: Bit8ToString
        nameWithType: BitUtility.Bit8ToString
        qualifiedName: NomUtils.Math.BitUtility.Bit8ToString
      VB:
      - id: NomUtils.Math.BitUtility.Bit8ToString*
        name: Bit8ToString
        nameWithType: BitUtility.Bit8ToString
        qualifiedName: NomUtils.Math.BitUtility.Bit8ToString
    isDefinition: true
    commentId: Overload:NomUtils.Math.BitUtility.Bit8ToString
  System.Int16:
    name:
      CSharp:
      - id: System.Int16
        name: Int16
        nameWithType: Int16
        qualifiedName: System.Int16
        isExternal: true
      VB:
      - id: System.Int16
        name: Int16
        nameWithType: Int16
        qualifiedName: System.Int16
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int16
  NomUtils.Math.BitUtility.Bit16ToString*:
    name:
      CSharp:
      - id: NomUtils.Math.BitUtility.Bit16ToString*
        name: Bit16ToString
        nameWithType: BitUtility.Bit16ToString
        qualifiedName: NomUtils.Math.BitUtility.Bit16ToString
      VB:
      - id: NomUtils.Math.BitUtility.Bit16ToString*
        name: Bit16ToString
        nameWithType: BitUtility.Bit16ToString
        qualifiedName: NomUtils.Math.BitUtility.Bit16ToString
    isDefinition: true
    commentId: Overload:NomUtils.Math.BitUtility.Bit16ToString
  NomUtils.Math.BitUtility.Bit32ToString*:
    name:
      CSharp:
      - id: NomUtils.Math.BitUtility.Bit32ToString*
        name: Bit32ToString
        nameWithType: BitUtility.Bit32ToString
        qualifiedName: NomUtils.Math.BitUtility.Bit32ToString
      VB:
      - id: NomUtils.Math.BitUtility.Bit32ToString*
        name: Bit32ToString
        nameWithType: BitUtility.Bit32ToString
        qualifiedName: NomUtils.Math.BitUtility.Bit32ToString
    isDefinition: true
    commentId: Overload:NomUtils.Math.BitUtility.Bit32ToString
  System.Int64:
    name:
      CSharp:
      - id: System.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: System.Int64
        isExternal: true
      VB:
      - id: System.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: System.Int64
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int64
  NomUtils.Math.BitUtility.Bit64ToString*:
    name:
      CSharp:
      - id: NomUtils.Math.BitUtility.Bit64ToString*
        name: Bit64ToString
        nameWithType: BitUtility.Bit64ToString
        qualifiedName: NomUtils.Math.BitUtility.Bit64ToString
      VB:
      - id: NomUtils.Math.BitUtility.Bit64ToString*
        name: Bit64ToString
        nameWithType: BitUtility.Bit64ToString
        qualifiedName: NomUtils.Math.BitUtility.Bit64ToString
    isDefinition: true
    commentId: Overload:NomUtils.Math.BitUtility.Bit64ToString
  NomUtils.Math.BitUtility:
    name:
      CSharp:
      - id: NomUtils.Math.BitUtility
        name: BitUtility
        nameWithType: BitUtility
        qualifiedName: NomUtils.Math.BitUtility
      VB:
      - id: NomUtils.Math.BitUtility
        name: BitUtility
        nameWithType: BitUtility
        qualifiedName: NomUtils.Math.BitUtility
    isDefinition: true
    commentId: T:NomUtils.Math.BitUtility
  System.Single:
    name:
      CSharp:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      VB:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Single
  System.Single[]:
    name:
      CSharp:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  NomUtils.Math.Equations.CalculateRootMeanSquare*:
    name:
      CSharp:
      - id: NomUtils.Math.Equations.CalculateRootMeanSquare*
        name: CalculateRootMeanSquare
        nameWithType: Equations.CalculateRootMeanSquare
        qualifiedName: NomUtils.Math.Equations.CalculateRootMeanSquare
      VB:
      - id: NomUtils.Math.Equations.CalculateRootMeanSquare*
        name: CalculateRootMeanSquare
        nameWithType: Equations.CalculateRootMeanSquare
        qualifiedName: NomUtils.Math.Equations.CalculateRootMeanSquare
    isDefinition: true
    commentId: Overload:NomUtils.Math.Equations.CalculateRootMeanSquare
  NomUtils.Math.Equations.CalculateAveragedSample*:
    name:
      CSharp:
      - id: NomUtils.Math.Equations.CalculateAveragedSample*
        name: CalculateAveragedSample
        nameWithType: Equations.CalculateAveragedSample
        qualifiedName: NomUtils.Math.Equations.CalculateAveragedSample
      VB:
      - id: NomUtils.Math.Equations.CalculateAveragedSample*
        name: CalculateAveragedSample
        nameWithType: Equations.CalculateAveragedSample
        qualifiedName: NomUtils.Math.Equations.CalculateAveragedSample
    isDefinition: true
    commentId: Overload:NomUtils.Math.Equations.CalculateAveragedSample
  NomUtils.Math.Equations.CalculateSqrMagnitude*:
    name:
      CSharp:
      - id: NomUtils.Math.Equations.CalculateSqrMagnitude*
        name: CalculateSqrMagnitude
        nameWithType: Equations.CalculateSqrMagnitude
        qualifiedName: NomUtils.Math.Equations.CalculateSqrMagnitude
      VB:
      - id: NomUtils.Math.Equations.CalculateSqrMagnitude*
        name: CalculateSqrMagnitude
        nameWithType: Equations.CalculateSqrMagnitude
        qualifiedName: NomUtils.Math.Equations.CalculateSqrMagnitude
    isDefinition: true
    commentId: Overload:NomUtils.Math.Equations.CalculateSqrMagnitude
  NomUtils.Math.Equations.CalculateSqrMagnitudeSub*:
    name:
      CSharp:
      - id: NomUtils.Math.Equations.CalculateSqrMagnitudeSub*
        name: CalculateSqrMagnitudeSub
        nameWithType: Equations.CalculateSqrMagnitudeSub
        qualifiedName: NomUtils.Math.Equations.CalculateSqrMagnitudeSub
      VB:
      - id: NomUtils.Math.Equations.CalculateSqrMagnitudeSub*
        name: CalculateSqrMagnitudeSub
        nameWithType: Equations.CalculateSqrMagnitudeSub
        qualifiedName: NomUtils.Math.Equations.CalculateSqrMagnitudeSub
    isDefinition: true
    commentId: Overload:NomUtils.Math.Equations.CalculateSqrMagnitudeSub
  NomUtils.Math.Equations.CalculateSqrMagnitudeAdd*:
    name:
      CSharp:
      - id: NomUtils.Math.Equations.CalculateSqrMagnitudeAdd*
        name: CalculateSqrMagnitudeAdd
        nameWithType: Equations.CalculateSqrMagnitudeAdd
        qualifiedName: NomUtils.Math.Equations.CalculateSqrMagnitudeAdd
      VB:
      - id: NomUtils.Math.Equations.CalculateSqrMagnitudeAdd*
        name: CalculateSqrMagnitudeAdd
        nameWithType: Equations.CalculateSqrMagnitudeAdd
        qualifiedName: NomUtils.Math.Equations.CalculateSqrMagnitudeAdd
    isDefinition: true
    commentId: Overload:NomUtils.Math.Equations.CalculateSqrMagnitudeAdd
  NomUtils.Math.Equations.CalculateMagnitude*:
    name:
      CSharp:
      - id: NomUtils.Math.Equations.CalculateMagnitude*
        name: CalculateMagnitude
        nameWithType: Equations.CalculateMagnitude
        qualifiedName: NomUtils.Math.Equations.CalculateMagnitude
      VB:
      - id: NomUtils.Math.Equations.CalculateMagnitude*
        name: CalculateMagnitude
        nameWithType: Equations.CalculateMagnitude
        qualifiedName: NomUtils.Math.Equations.CalculateMagnitude
    isDefinition: true
    commentId: Overload:NomUtils.Math.Equations.CalculateMagnitude
  NomUtils.Math.Equations.CalculateMagnitudeSub*:
    name:
      CSharp:
      - id: NomUtils.Math.Equations.CalculateMagnitudeSub*
        name: CalculateMagnitudeSub
        nameWithType: Equations.CalculateMagnitudeSub
        qualifiedName: NomUtils.Math.Equations.CalculateMagnitudeSub
      VB:
      - id: NomUtils.Math.Equations.CalculateMagnitudeSub*
        name: CalculateMagnitudeSub
        nameWithType: Equations.CalculateMagnitudeSub
        qualifiedName: NomUtils.Math.Equations.CalculateMagnitudeSub
    isDefinition: true
    commentId: Overload:NomUtils.Math.Equations.CalculateMagnitudeSub
  NomUtils.Math.Equations.CalculateMagnitudeAdd*:
    name:
      CSharp:
      - id: NomUtils.Math.Equations.CalculateMagnitudeAdd*
        name: CalculateMagnitudeAdd
        nameWithType: Equations.CalculateMagnitudeAdd
        qualifiedName: NomUtils.Math.Equations.CalculateMagnitudeAdd
      VB:
      - id: NomUtils.Math.Equations.CalculateMagnitudeAdd*
        name: CalculateMagnitudeAdd
        nameWithType: Equations.CalculateMagnitudeAdd
        qualifiedName: NomUtils.Math.Equations.CalculateMagnitudeAdd
    isDefinition: true
    commentId: Overload:NomUtils.Math.Equations.CalculateMagnitudeAdd
  NomUtils.Math.Equations.FastInverseSquareRoot*:
    name:
      CSharp:
      - id: NomUtils.Math.Equations.FastInverseSquareRoot*
        name: FastInverseSquareRoot
        nameWithType: Equations.FastInverseSquareRoot
        qualifiedName: NomUtils.Math.Equations.FastInverseSquareRoot
      VB:
      - id: NomUtils.Math.Equations.FastInverseSquareRoot*
        name: FastInverseSquareRoot
        nameWithType: Equations.FastInverseSquareRoot
        qualifiedName: NomUtils.Math.Equations.FastInverseSquareRoot
    isDefinition: true
    commentId: Overload:NomUtils.Math.Equations.FastInverseSquareRoot
  NomUtils.Math.Equations.Dot*:
    name:
      CSharp:
      - id: NomUtils.Math.Equations.Dot*
        name: Dot
        nameWithType: Equations.Dot
        qualifiedName: NomUtils.Math.Equations.Dot
      VB:
      - id: NomUtils.Math.Equations.Dot*
        name: Dot
        nameWithType: Equations.Dot
        qualifiedName: NomUtils.Math.Equations.Dot
    isDefinition: true
    commentId: Overload:NomUtils.Math.Equations.Dot
  NomUtils.Math.Equations.GetAngleDiamond*:
    name:
      CSharp:
      - id: NomUtils.Math.Equations.GetAngleDiamond*
        name: GetAngleDiamond
        nameWithType: Equations.GetAngleDiamond
        qualifiedName: NomUtils.Math.Equations.GetAngleDiamond
      VB:
      - id: NomUtils.Math.Equations.GetAngleDiamond*
        name: GetAngleDiamond
        nameWithType: Equations.GetAngleDiamond
        qualifiedName: NomUtils.Math.Equations.GetAngleDiamond
    isDefinition: true
    commentId: Overload:NomUtils.Math.Equations.GetAngleDiamond
  NomUtils.Math.Equations.RadiansToDiamondAngle*:
    name:
      CSharp:
      - id: NomUtils.Math.Equations.RadiansToDiamondAngle*
        name: RadiansToDiamondAngle
        nameWithType: Equations.RadiansToDiamondAngle
        qualifiedName: NomUtils.Math.Equations.RadiansToDiamondAngle
      VB:
      - id: NomUtils.Math.Equations.RadiansToDiamondAngle*
        name: RadiansToDiamondAngle
        nameWithType: Equations.RadiansToDiamondAngle
        qualifiedName: NomUtils.Math.Equations.RadiansToDiamondAngle
    isDefinition: true
    commentId: Overload:NomUtils.Math.Equations.RadiansToDiamondAngle
  NomUtils.Math.Equations.DiamondAngleToRadians*:
    name:
      CSharp:
      - id: NomUtils.Math.Equations.DiamondAngleToRadians*
        name: DiamondAngleToRadians
        nameWithType: Equations.DiamondAngleToRadians
        qualifiedName: NomUtils.Math.Equations.DiamondAngleToRadians
      VB:
      - id: NomUtils.Math.Equations.DiamondAngleToRadians*
        name: DiamondAngleToRadians
        nameWithType: Equations.DiamondAngleToRadians
        qualifiedName: NomUtils.Math.Equations.DiamondAngleToRadians
    isDefinition: true
    commentId: Overload:NomUtils.Math.Equations.DiamondAngleToRadians
  NomUtils.Math.Equations.DiamondAngleToDegrees*:
    name:
      CSharp:
      - id: NomUtils.Math.Equations.DiamondAngleToDegrees*
        name: DiamondAngleToDegrees
        nameWithType: Equations.DiamondAngleToDegrees
        qualifiedName: NomUtils.Math.Equations.DiamondAngleToDegrees
      VB:
      - id: NomUtils.Math.Equations.DiamondAngleToDegrees*
        name: DiamondAngleToDegrees
        nameWithType: Equations.DiamondAngleToDegrees
        qualifiedName: NomUtils.Math.Equations.DiamondAngleToDegrees
    isDefinition: true
    commentId: Overload:NomUtils.Math.Equations.DiamondAngleToDegrees
  Global.Vector2:
    name:
      CSharp:
      - id: Global.Vector2
        name: Vector2
        nameWithType: Vector2
        qualifiedName: Vector2
        isExternal: true
      VB:
      - id: Global.Vector2
        name: Vector2
        nameWithType: Vector2
        qualifiedName: Vector2
        isExternal: true
    isDefinition: true
  NomUtils.Math.Equations.DiamondAngleToPoint*:
    name:
      CSharp:
      - id: NomUtils.Math.Equations.DiamondAngleToPoint*
        name: DiamondAngleToPoint
        nameWithType: Equations.DiamondAngleToPoint
        qualifiedName: NomUtils.Math.Equations.DiamondAngleToPoint
      VB:
      - id: NomUtils.Math.Equations.DiamondAngleToPoint*
        name: DiamondAngleToPoint
        nameWithType: Equations.DiamondAngleToPoint
        qualifiedName: NomUtils.Math.Equations.DiamondAngleToPoint
    isDefinition: true
    commentId: Overload:NomUtils.Math.Equations.DiamondAngleToPoint
  NomUtils.Math.Equations:
    name:
      CSharp:
      - id: NomUtils.Math.Equations
        name: Equations
        nameWithType: Equations
        qualifiedName: NomUtils.Math.Equations
      VB:
      - id: NomUtils.Math.Equations
        name: Equations
        nameWithType: Equations
        qualifiedName: NomUtils.Math.Equations
    isDefinition: true
    commentId: T:NomUtils.Math.Equations
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  Global.Quaternion:
    name:
      CSharp:
      - id: Global.Quaternion
        name: Quaternion
        nameWithType: Quaternion
        qualifiedName: Quaternion
        isExternal: true
      VB:
      - id: Global.Quaternion
        name: Quaternion
        nameWithType: Quaternion
        qualifiedName: Quaternion
        isExternal: true
    isDefinition: true
  NomUtils.Math.QuaternionUtility.Approximately*:
    name:
      CSharp:
      - id: NomUtils.Math.QuaternionUtility.Approximately*
        name: Approximately
        nameWithType: QuaternionUtility.Approximately
        qualifiedName: NomUtils.Math.QuaternionUtility.Approximately
      VB:
      - id: NomUtils.Math.QuaternionUtility.Approximately*
        name: Approximately
        nameWithType: QuaternionUtility.Approximately
        qualifiedName: NomUtils.Math.QuaternionUtility.Approximately
    isDefinition: true
    commentId: Overload:NomUtils.Math.QuaternionUtility.Approximately
  NomUtils.Math.QuaternionUtility.RotatePointAroundPivot*:
    name:
      CSharp:
      - id: NomUtils.Math.QuaternionUtility.RotatePointAroundPivot*
        name: RotatePointAroundPivot
        nameWithType: QuaternionUtility.RotatePointAroundPivot
        qualifiedName: NomUtils.Math.QuaternionUtility.RotatePointAroundPivot
      VB:
      - id: NomUtils.Math.QuaternionUtility.RotatePointAroundPivot*
        name: RotatePointAroundPivot
        nameWithType: QuaternionUtility.RotatePointAroundPivot
        qualifiedName: NomUtils.Math.QuaternionUtility.RotatePointAroundPivot
    isDefinition: true
    commentId: Overload:NomUtils.Math.QuaternionUtility.RotatePointAroundPivot
  Global.Vector3:
    name:
      CSharp:
      - id: Global.Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
      VB:
      - id: Global.Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
    isDefinition: true
  NomUtils.Math.QuaternionUtility.SmoothDamp*:
    name:
      CSharp:
      - id: NomUtils.Math.QuaternionUtility.SmoothDamp*
        name: SmoothDamp
        nameWithType: QuaternionUtility.SmoothDamp
        qualifiedName: NomUtils.Math.QuaternionUtility.SmoothDamp
      VB:
      - id: NomUtils.Math.QuaternionUtility.SmoothDamp*
        name: SmoothDamp
        nameWithType: QuaternionUtility.SmoothDamp
        qualifiedName: NomUtils.Math.QuaternionUtility.SmoothDamp
    isDefinition: true
    commentId: Overload:NomUtils.Math.QuaternionUtility.SmoothDamp
  NomUtils.Math.QuaternionUtility:
    name:
      CSharp:
      - id: NomUtils.Math.QuaternionUtility
        name: QuaternionUtility
        nameWithType: QuaternionUtility
        qualifiedName: NomUtils.Math.QuaternionUtility
      VB:
      - id: NomUtils.Math.QuaternionUtility
        name: QuaternionUtility
        nameWithType: QuaternionUtility
        qualifiedName: NomUtils.Math.QuaternionUtility
    isDefinition: true
    commentId: T:NomUtils.Math.QuaternionUtility
  NomUtils.Math.VectorUtility.GetMiddlePoint*:
    name:
      CSharp:
      - id: NomUtils.Math.VectorUtility.GetMiddlePoint*
        name: GetMiddlePoint
        nameWithType: VectorUtility.GetMiddlePoint
        qualifiedName: NomUtils.Math.VectorUtility.GetMiddlePoint
      VB:
      - id: NomUtils.Math.VectorUtility.GetMiddlePoint*
        name: GetMiddlePoint
        nameWithType: VectorUtility.GetMiddlePoint
        qualifiedName: NomUtils.Math.VectorUtility.GetMiddlePoint
    isDefinition: true
    commentId: Overload:NomUtils.Math.VectorUtility.GetMiddlePoint
  NomUtils.Math.VectorUtility.Lerp*:
    name:
      CSharp:
      - id: NomUtils.Math.VectorUtility.Lerp*
        name: Lerp
        nameWithType: VectorUtility.Lerp
        qualifiedName: NomUtils.Math.VectorUtility.Lerp
      VB:
      - id: NomUtils.Math.VectorUtility.Lerp*
        name: Lerp
        nameWithType: VectorUtility.Lerp
        qualifiedName: NomUtils.Math.VectorUtility.Lerp
    isDefinition: true
    commentId: Overload:NomUtils.Math.VectorUtility.Lerp
  NomUtils.Math.VectorUtility.LerpUnclamped*:
    name:
      CSharp:
      - id: NomUtils.Math.VectorUtility.LerpUnclamped*
        name: LerpUnclamped
        nameWithType: VectorUtility.LerpUnclamped
        qualifiedName: NomUtils.Math.VectorUtility.LerpUnclamped
      VB:
      - id: NomUtils.Math.VectorUtility.LerpUnclamped*
        name: LerpUnclamped
        nameWithType: VectorUtility.LerpUnclamped
        qualifiedName: NomUtils.Math.VectorUtility.LerpUnclamped
    isDefinition: true
    commentId: Overload:NomUtils.Math.VectorUtility.LerpUnclamped
  NomUtils.Math.VectorUtility.MoveTowards*:
    name:
      CSharp:
      - id: NomUtils.Math.VectorUtility.MoveTowards*
        name: MoveTowards
        nameWithType: VectorUtility.MoveTowards
        qualifiedName: NomUtils.Math.VectorUtility.MoveTowards
      VB:
      - id: NomUtils.Math.VectorUtility.MoveTowards*
        name: MoveTowards
        nameWithType: VectorUtility.MoveTowards
        qualifiedName: NomUtils.Math.VectorUtility.MoveTowards
    isDefinition: true
    commentId: Overload:NomUtils.Math.VectorUtility.MoveTowards
  NomUtils.Math.VectorUtility.MultiplyScalar*:
    name:
      CSharp:
      - id: NomUtils.Math.VectorUtility.MultiplyScalar*
        name: MultiplyScalar
        nameWithType: VectorUtility.MultiplyScalar
        qualifiedName: NomUtils.Math.VectorUtility.MultiplyScalar
      VB:
      - id: NomUtils.Math.VectorUtility.MultiplyScalar*
        name: MultiplyScalar
        nameWithType: VectorUtility.MultiplyScalar
        qualifiedName: NomUtils.Math.VectorUtility.MultiplyScalar
    isDefinition: true
    commentId: Overload:NomUtils.Math.VectorUtility.MultiplyScalar
  NomUtils.Math.VectorUtility.CalculateSqrMagnitude*:
    name:
      CSharp:
      - id: NomUtils.Math.VectorUtility.CalculateSqrMagnitude*
        name: CalculateSqrMagnitude
        nameWithType: VectorUtility.CalculateSqrMagnitude
        qualifiedName: NomUtils.Math.VectorUtility.CalculateSqrMagnitude
      VB:
      - id: NomUtils.Math.VectorUtility.CalculateSqrMagnitude*
        name: CalculateSqrMagnitude
        nameWithType: VectorUtility.CalculateSqrMagnitude
        qualifiedName: NomUtils.Math.VectorUtility.CalculateSqrMagnitude
    isDefinition: true
    commentId: Overload:NomUtils.Math.VectorUtility.CalculateSqrMagnitude
  Global.Vector4:
    name:
      CSharp:
      - id: Global.Vector4
        name: Vector4
        nameWithType: Vector4
        qualifiedName: Vector4
        isExternal: true
      VB:
      - id: Global.Vector4
        name: Vector4
        nameWithType: Vector4
        qualifiedName: Vector4
        isExternal: true
    isDefinition: true
  NomUtils.Math.VectorUtility.CalculateSqrMagnitudeSub*:
    name:
      CSharp:
      - id: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeSub*
        name: CalculateSqrMagnitudeSub
        nameWithType: VectorUtility.CalculateSqrMagnitudeSub
        qualifiedName: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeSub
      VB:
      - id: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeSub*
        name: CalculateSqrMagnitudeSub
        nameWithType: VectorUtility.CalculateSqrMagnitudeSub
        qualifiedName: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeSub
    isDefinition: true
    commentId: Overload:NomUtils.Math.VectorUtility.CalculateSqrMagnitudeSub
  NomUtils.Math.VectorUtility.CalculateSqrMagnitudeAdd*:
    name:
      CSharp:
      - id: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeAdd*
        name: CalculateSqrMagnitudeAdd
        nameWithType: VectorUtility.CalculateSqrMagnitudeAdd
        qualifiedName: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeAdd
      VB:
      - id: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeAdd*
        name: CalculateSqrMagnitudeAdd
        nameWithType: VectorUtility.CalculateSqrMagnitudeAdd
        qualifiedName: NomUtils.Math.VectorUtility.CalculateSqrMagnitudeAdd
    isDefinition: true
    commentId: Overload:NomUtils.Math.VectorUtility.CalculateSqrMagnitudeAdd
  NomUtils.Math.VectorUtility.CalculateMagnitude*:
    name:
      CSharp:
      - id: NomUtils.Math.VectorUtility.CalculateMagnitude*
        name: CalculateMagnitude
        nameWithType: VectorUtility.CalculateMagnitude
        qualifiedName: NomUtils.Math.VectorUtility.CalculateMagnitude
      VB:
      - id: NomUtils.Math.VectorUtility.CalculateMagnitude*
        name: CalculateMagnitude
        nameWithType: VectorUtility.CalculateMagnitude
        qualifiedName: NomUtils.Math.VectorUtility.CalculateMagnitude
    isDefinition: true
    commentId: Overload:NomUtils.Math.VectorUtility.CalculateMagnitude
  NomUtils.Math.VectorUtility.CalculateMagnitudeSub*:
    name:
      CSharp:
      - id: NomUtils.Math.VectorUtility.CalculateMagnitudeSub*
        name: CalculateMagnitudeSub
        nameWithType: VectorUtility.CalculateMagnitudeSub
        qualifiedName: NomUtils.Math.VectorUtility.CalculateMagnitudeSub
      VB:
      - id: NomUtils.Math.VectorUtility.CalculateMagnitudeSub*
        name: CalculateMagnitudeSub
        nameWithType: VectorUtility.CalculateMagnitudeSub
        qualifiedName: NomUtils.Math.VectorUtility.CalculateMagnitudeSub
    isDefinition: true
    commentId: Overload:NomUtils.Math.VectorUtility.CalculateMagnitudeSub
  NomUtils.Math.VectorUtility.CalculateMagnitudeAdd*:
    name:
      CSharp:
      - id: NomUtils.Math.VectorUtility.CalculateMagnitudeAdd*
        name: CalculateMagnitudeAdd
        nameWithType: VectorUtility.CalculateMagnitudeAdd
        qualifiedName: NomUtils.Math.VectorUtility.CalculateMagnitudeAdd
      VB:
      - id: NomUtils.Math.VectorUtility.CalculateMagnitudeAdd*
        name: CalculateMagnitudeAdd
        nameWithType: VectorUtility.CalculateMagnitudeAdd
        qualifiedName: NomUtils.Math.VectorUtility.CalculateMagnitudeAdd
    isDefinition: true
    commentId: Overload:NomUtils.Math.VectorUtility.CalculateMagnitudeAdd
  NomUtils.Math.VectorUtility.Dot*:
    name:
      CSharp:
      - id: NomUtils.Math.VectorUtility.Dot*
        name: Dot
        nameWithType: VectorUtility.Dot
        qualifiedName: NomUtils.Math.VectorUtility.Dot
      VB:
      - id: NomUtils.Math.VectorUtility.Dot*
        name: Dot
        nameWithType: VectorUtility.Dot
        qualifiedName: NomUtils.Math.VectorUtility.Dot
    isDefinition: true
    commentId: Overload:NomUtils.Math.VectorUtility.Dot
  NomUtils.Math.VectorUtility.IsOrthogonal*:
    name:
      CSharp:
      - id: NomUtils.Math.VectorUtility.IsOrthogonal*
        name: IsOrthogonal
        nameWithType: VectorUtility.IsOrthogonal
        qualifiedName: NomUtils.Math.VectorUtility.IsOrthogonal
      VB:
      - id: NomUtils.Math.VectorUtility.IsOrthogonal*
        name: IsOrthogonal
        nameWithType: VectorUtility.IsOrthogonal
        qualifiedName: NomUtils.Math.VectorUtility.IsOrthogonal
    isDefinition: true
    commentId: Overload:NomUtils.Math.VectorUtility.IsOrthogonal
  NomUtils.Math.VectorUtility.GetAngleRadians*:
    name:
      CSharp:
      - id: NomUtils.Math.VectorUtility.GetAngleRadians*
        name: GetAngleRadians
        nameWithType: VectorUtility.GetAngleRadians
        qualifiedName: NomUtils.Math.VectorUtility.GetAngleRadians
      VB:
      - id: NomUtils.Math.VectorUtility.GetAngleRadians*
        name: GetAngleRadians
        nameWithType: VectorUtility.GetAngleRadians
        qualifiedName: NomUtils.Math.VectorUtility.GetAngleRadians
    isDefinition: true
    commentId: Overload:NomUtils.Math.VectorUtility.GetAngleRadians
  NomUtils.Math.VectorUtility.GetAngleDegrees*:
    name:
      CSharp:
      - id: NomUtils.Math.VectorUtility.GetAngleDegrees*
        name: GetAngleDegrees
        nameWithType: VectorUtility.GetAngleDegrees
        qualifiedName: NomUtils.Math.VectorUtility.GetAngleDegrees
      VB:
      - id: NomUtils.Math.VectorUtility.GetAngleDegrees*
        name: GetAngleDegrees
        nameWithType: VectorUtility.GetAngleDegrees
        qualifiedName: NomUtils.Math.VectorUtility.GetAngleDegrees
    isDefinition: true
    commentId: Overload:NomUtils.Math.VectorUtility.GetAngleDegrees
  NomUtils.Math.VectorUtility.GetAngleDiamond*:
    name:
      CSharp:
      - id: NomUtils.Math.VectorUtility.GetAngleDiamond*
        name: GetAngleDiamond
        nameWithType: VectorUtility.GetAngleDiamond
        qualifiedName: NomUtils.Math.VectorUtility.GetAngleDiamond
      VB:
      - id: NomUtils.Math.VectorUtility.GetAngleDiamond*
        name: GetAngleDiamond
        nameWithType: VectorUtility.GetAngleDiamond
        qualifiedName: NomUtils.Math.VectorUtility.GetAngleDiamond
    isDefinition: true
    commentId: Overload:NomUtils.Math.VectorUtility.GetAngleDiamond
  NomUtils.Math.VectorUtility:
    name:
      CSharp:
      - id: NomUtils.Math.VectorUtility
        name: VectorUtility
        nameWithType: VectorUtility
        qualifiedName: NomUtils.Math.VectorUtility
      VB:
      - id: NomUtils.Math.VectorUtility
        name: VectorUtility
        nameWithType: VectorUtility
        qualifiedName: NomUtils.Math.VectorUtility
    isDefinition: true
    commentId: T:NomUtils.Math.VectorUtility
  NomUtils.Math:
    name:
      CSharp:
      - name: NomUtils.Math
        nameWithType: NomUtils.Math
        qualifiedName: NomUtils.Math
      VB:
      - name: NomUtils.Math
        nameWithType: NomUtils.Math
        qualifiedName: NomUtils.Math
    isDefinition: true
    commentId: N:NomUtils.Math
  NomUtils.Math.Bits.Bit16.#ctor*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit16.#ctor*
        name: Bit16
        nameWithType: Bit16.Bit16
        qualifiedName: NomUtils.Math.Bits.Bit16.Bit16
      VB:
      - id: NomUtils.Math.Bits.Bit16.#ctor*
        name: Bit16
        nameWithType: Bit16.Bit16
        qualifiedName: NomUtils.Math.Bits.Bit16.Bit16
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit16.#ctor
  Global.InternalType:
    name:
      CSharp:
      - id: Global.InternalType
        name: InternalType
        nameWithType: InternalType
        qualifiedName: InternalType
        isExternal: true
      VB:
      - id: Global.InternalType
        name: InternalType
        nameWithType: InternalType
        qualifiedName: InternalType
        isExternal: true
    isDefinition: true
  Global.Self:
    name:
      CSharp:
      - id: Global.Self
        name: Self
        nameWithType: Self
        qualifiedName: Self
        isExternal: true
      VB:
      - id: Global.Self
        name: Self
        nameWithType: Self
        qualifiedName: Self
        isExternal: true
    isDefinition: true
  NomUtils.Math.Bits.Bit16.Clear*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit16.Clear*
        name: Clear
        nameWithType: Bit16.Clear
        qualifiedName: NomUtils.Math.Bits.Bit16.Clear
      VB:
      - id: NomUtils.Math.Bits.Bit16.Clear*
        name: Clear
        nameWithType: Bit16.Clear
        qualifiedName: NomUtils.Math.Bits.Bit16.Clear
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit16.Clear
  NomUtils.Math.Bits.Bit16.Set*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit16.Set*
        name: Set
        nameWithType: Bit16.Set
        qualifiedName: NomUtils.Math.Bits.Bit16.Set
      VB:
      - id: NomUtils.Math.Bits.Bit16.Set*
        name: Set
        nameWithType: Bit16.Set
        qualifiedName: NomUtils.Math.Bits.Bit16.Set
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit16.Set
  NomUtils.Math.Bits.Bit16.Or*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit16.Or*
        name: Or
        nameWithType: Bit16.Or
        qualifiedName: NomUtils.Math.Bits.Bit16.Or
      VB:
      - id: NomUtils.Math.Bits.Bit16.Or*
        name: Or
        nameWithType: Bit16.Or
        qualifiedName: NomUtils.Math.Bits.Bit16.Or
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit16.Or
  NomUtils.Math.Bits.Bit16.And*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit16.And*
        name: And
        nameWithType: Bit16.And
        qualifiedName: NomUtils.Math.Bits.Bit16.And
      VB:
      - id: NomUtils.Math.Bits.Bit16.And*
        name: And
        nameWithType: Bit16.And
        qualifiedName: NomUtils.Math.Bits.Bit16.And
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit16.And
  NomUtils.Math.Bits.Bit16.Invert*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit16.Invert*
        name: Invert
        nameWithType: Bit16.Invert
        qualifiedName: NomUtils.Math.Bits.Bit16.Invert
      VB:
      - id: NomUtils.Math.Bits.Bit16.Invert*
        name: Invert
        nameWithType: Bit16.Invert
        qualifiedName: NomUtils.Math.Bits.Bit16.Invert
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit16.Invert
  NomUtils.Math.Bits.Bit16.Xor*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit16.Xor*
        name: Xor
        nameWithType: Bit16.Xor
        qualifiedName: NomUtils.Math.Bits.Bit16.Xor
      VB:
      - id: NomUtils.Math.Bits.Bit16.Xor*
        name: Xor
        nameWithType: Bit16.Xor
        qualifiedName: NomUtils.Math.Bits.Bit16.Xor
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit16.Xor
  System.Byte:
    name:
      CSharp:
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
      VB:
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Byte
  NomUtils.Math.Bits.Bit16.ShiftLeft*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit16.ShiftLeft*
        name: ShiftLeft
        nameWithType: Bit16.ShiftLeft
        qualifiedName: NomUtils.Math.Bits.Bit16.ShiftLeft
      VB:
      - id: NomUtils.Math.Bits.Bit16.ShiftLeft*
        name: ShiftLeft
        nameWithType: Bit16.ShiftLeft
        qualifiedName: NomUtils.Math.Bits.Bit16.ShiftLeft
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit16.ShiftLeft
  NomUtils.Math.Bits.Bit16.ShiftRight*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit16.ShiftRight*
        name: ShiftRight
        nameWithType: Bit16.ShiftRight
        qualifiedName: NomUtils.Math.Bits.Bit16.ShiftRight
      VB:
      - id: NomUtils.Math.Bits.Bit16.ShiftRight*
        name: ShiftRight
        nameWithType: Bit16.ShiftRight
        qualifiedName: NomUtils.Math.Bits.Bit16.ShiftRight
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit16.ShiftRight
  NomUtils.Math.Bits.Bit16.Contains*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit16.Contains*
        name: Contains
        nameWithType: Bit16.Contains
        qualifiedName: NomUtils.Math.Bits.Bit16.Contains
      VB:
      - id: NomUtils.Math.Bits.Bit16.Contains*
        name: Contains
        nameWithType: Bit16.Contains
        qualifiedName: NomUtils.Math.Bits.Bit16.Contains
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit16.Contains
  NomUtils.Math.Bits.Bit16.Equals*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit16.Equals*
        name: Equals
        nameWithType: Bit16.Equals
        qualifiedName: NomUtils.Math.Bits.Bit16.Equals
      VB:
      - id: NomUtils.Math.Bits.Bit16.Equals*
        name: Equals
        nameWithType: Bit16.Equals
        qualifiedName: NomUtils.Math.Bits.Bit16.Equals
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit16.Equals
  NomUtils.Math.Bits.Bit16.ToBitString*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit16.ToBitString*
        name: ToBitString
        nameWithType: Bit16.ToBitString
        qualifiedName: NomUtils.Math.Bits.Bit16.ToBitString
      VB:
      - id: NomUtils.Math.Bits.Bit16.ToBitString*
        name: ToBitString
        nameWithType: Bit16.ToBitString
        qualifiedName: NomUtils.Math.Bits.Bit16.ToBitString
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit16.ToBitString
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  NomUtils.Math.Bits.Bit16.ToString*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit16.ToString*
        name: ToString
        nameWithType: Bit16.ToString
        qualifiedName: NomUtils.Math.Bits.Bit16.ToString
      VB:
      - id: NomUtils.Math.Bits.Bit16.ToString*
        name: ToString
        nameWithType: Bit16.ToString
        qualifiedName: NomUtils.Math.Bits.Bit16.ToString
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit16.ToString
  NomUtils.Math.Bits.Bit16.op_Implicit*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit16.op_Implicit*
        name: Implicit
        nameWithType: Bit16.Implicit
        qualifiedName: NomUtils.Math.Bits.Bit16.Implicit
      VB:
      - id: NomUtils.Math.Bits.Bit16.op_Implicit*
        name: Widening
        nameWithType: Bit16.Widening
        qualifiedName: NomUtils.Math.Bits.Bit16.Widening
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit16.op_Implicit
  NomUtils.Math.Bits.Bit16:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit16
        name: Bit16
        nameWithType: Bit16
        qualifiedName: NomUtils.Math.Bits.Bit16
      VB:
      - id: NomUtils.Math.Bits.Bit16
        name: Bit16
        nameWithType: Bit16
        qualifiedName: NomUtils.Math.Bits.Bit16
    isDefinition: true
    commentId: T:NomUtils.Math.Bits.Bit16
  NomUtils.Math.Bits.Bit32.#ctor*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit32.#ctor*
        name: Bit32
        nameWithType: Bit32.Bit32
        qualifiedName: NomUtils.Math.Bits.Bit32.Bit32
      VB:
      - id: NomUtils.Math.Bits.Bit32.#ctor*
        name: Bit32
        nameWithType: Bit32.Bit32
        qualifiedName: NomUtils.Math.Bits.Bit32.Bit32
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit32.#ctor
  NomUtils.Math.Bits.Bit32.Clear*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit32.Clear*
        name: Clear
        nameWithType: Bit32.Clear
        qualifiedName: NomUtils.Math.Bits.Bit32.Clear
      VB:
      - id: NomUtils.Math.Bits.Bit32.Clear*
        name: Clear
        nameWithType: Bit32.Clear
        qualifiedName: NomUtils.Math.Bits.Bit32.Clear
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit32.Clear
  NomUtils.Math.Bits.Bit32.Set*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit32.Set*
        name: Set
        nameWithType: Bit32.Set
        qualifiedName: NomUtils.Math.Bits.Bit32.Set
      VB:
      - id: NomUtils.Math.Bits.Bit32.Set*
        name: Set
        nameWithType: Bit32.Set
        qualifiedName: NomUtils.Math.Bits.Bit32.Set
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit32.Set
  NomUtils.Math.Bits.Bit32.Or*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit32.Or*
        name: Or
        nameWithType: Bit32.Or
        qualifiedName: NomUtils.Math.Bits.Bit32.Or
      VB:
      - id: NomUtils.Math.Bits.Bit32.Or*
        name: Or
        nameWithType: Bit32.Or
        qualifiedName: NomUtils.Math.Bits.Bit32.Or
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit32.Or
  NomUtils.Math.Bits.Bit32.And*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit32.And*
        name: And
        nameWithType: Bit32.And
        qualifiedName: NomUtils.Math.Bits.Bit32.And
      VB:
      - id: NomUtils.Math.Bits.Bit32.And*
        name: And
        nameWithType: Bit32.And
        qualifiedName: NomUtils.Math.Bits.Bit32.And
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit32.And
  NomUtils.Math.Bits.Bit32.Invert*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit32.Invert*
        name: Invert
        nameWithType: Bit32.Invert
        qualifiedName: NomUtils.Math.Bits.Bit32.Invert
      VB:
      - id: NomUtils.Math.Bits.Bit32.Invert*
        name: Invert
        nameWithType: Bit32.Invert
        qualifiedName: NomUtils.Math.Bits.Bit32.Invert
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit32.Invert
  NomUtils.Math.Bits.Bit32.Xor*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit32.Xor*
        name: Xor
        nameWithType: Bit32.Xor
        qualifiedName: NomUtils.Math.Bits.Bit32.Xor
      VB:
      - id: NomUtils.Math.Bits.Bit32.Xor*
        name: Xor
        nameWithType: Bit32.Xor
        qualifiedName: NomUtils.Math.Bits.Bit32.Xor
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit32.Xor
  NomUtils.Math.Bits.Bit32.ShiftLeft*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit32.ShiftLeft*
        name: ShiftLeft
        nameWithType: Bit32.ShiftLeft
        qualifiedName: NomUtils.Math.Bits.Bit32.ShiftLeft
      VB:
      - id: NomUtils.Math.Bits.Bit32.ShiftLeft*
        name: ShiftLeft
        nameWithType: Bit32.ShiftLeft
        qualifiedName: NomUtils.Math.Bits.Bit32.ShiftLeft
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit32.ShiftLeft
  NomUtils.Math.Bits.Bit32.ShiftRight*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit32.ShiftRight*
        name: ShiftRight
        nameWithType: Bit32.ShiftRight
        qualifiedName: NomUtils.Math.Bits.Bit32.ShiftRight
      VB:
      - id: NomUtils.Math.Bits.Bit32.ShiftRight*
        name: ShiftRight
        nameWithType: Bit32.ShiftRight
        qualifiedName: NomUtils.Math.Bits.Bit32.ShiftRight
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit32.ShiftRight
  NomUtils.Math.Bits.Bit32.Contains*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit32.Contains*
        name: Contains
        nameWithType: Bit32.Contains
        qualifiedName: NomUtils.Math.Bits.Bit32.Contains
      VB:
      - id: NomUtils.Math.Bits.Bit32.Contains*
        name: Contains
        nameWithType: Bit32.Contains
        qualifiedName: NomUtils.Math.Bits.Bit32.Contains
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit32.Contains
  NomUtils.Math.Bits.Bit32.Equals*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit32.Equals*
        name: Equals
        nameWithType: Bit32.Equals
        qualifiedName: NomUtils.Math.Bits.Bit32.Equals
      VB:
      - id: NomUtils.Math.Bits.Bit32.Equals*
        name: Equals
        nameWithType: Bit32.Equals
        qualifiedName: NomUtils.Math.Bits.Bit32.Equals
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit32.Equals
  NomUtils.Math.Bits.Bit32.ToBitString*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit32.ToBitString*
        name: ToBitString
        nameWithType: Bit32.ToBitString
        qualifiedName: NomUtils.Math.Bits.Bit32.ToBitString
      VB:
      - id: NomUtils.Math.Bits.Bit32.ToBitString*
        name: ToBitString
        nameWithType: Bit32.ToBitString
        qualifiedName: NomUtils.Math.Bits.Bit32.ToBitString
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit32.ToBitString
  NomUtils.Math.Bits.Bit32.ToString*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit32.ToString*
        name: ToString
        nameWithType: Bit32.ToString
        qualifiedName: NomUtils.Math.Bits.Bit32.ToString
      VB:
      - id: NomUtils.Math.Bits.Bit32.ToString*
        name: ToString
        nameWithType: Bit32.ToString
        qualifiedName: NomUtils.Math.Bits.Bit32.ToString
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit32.ToString
  NomUtils.Math.Bits.Bit32.op_Implicit*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit32.op_Implicit*
        name: Implicit
        nameWithType: Bit32.Implicit
        qualifiedName: NomUtils.Math.Bits.Bit32.Implicit
      VB:
      - id: NomUtils.Math.Bits.Bit32.op_Implicit*
        name: Widening
        nameWithType: Bit32.Widening
        qualifiedName: NomUtils.Math.Bits.Bit32.Widening
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit32.op_Implicit
  NomUtils.Math.Bits.Bit32:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit32
        name: Bit32
        nameWithType: Bit32
        qualifiedName: NomUtils.Math.Bits.Bit32
      VB:
      - id: NomUtils.Math.Bits.Bit32
        name: Bit32
        nameWithType: Bit32
        qualifiedName: NomUtils.Math.Bits.Bit32
    isDefinition: true
    commentId: T:NomUtils.Math.Bits.Bit32
  NomUtils.Math.Bits.Bit64.#ctor*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit64.#ctor*
        name: Bit64
        nameWithType: Bit64.Bit64
        qualifiedName: NomUtils.Math.Bits.Bit64.Bit64
      VB:
      - id: NomUtils.Math.Bits.Bit64.#ctor*
        name: Bit64
        nameWithType: Bit64.Bit64
        qualifiedName: NomUtils.Math.Bits.Bit64.Bit64
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit64.#ctor
  NomUtils.Math.Bits.Bit64.Clear*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit64.Clear*
        name: Clear
        nameWithType: Bit64.Clear
        qualifiedName: NomUtils.Math.Bits.Bit64.Clear
      VB:
      - id: NomUtils.Math.Bits.Bit64.Clear*
        name: Clear
        nameWithType: Bit64.Clear
        qualifiedName: NomUtils.Math.Bits.Bit64.Clear
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit64.Clear
  NomUtils.Math.Bits.Bit64.Set*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit64.Set*
        name: Set
        nameWithType: Bit64.Set
        qualifiedName: NomUtils.Math.Bits.Bit64.Set
      VB:
      - id: NomUtils.Math.Bits.Bit64.Set*
        name: Set
        nameWithType: Bit64.Set
        qualifiedName: NomUtils.Math.Bits.Bit64.Set
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit64.Set
  NomUtils.Math.Bits.Bit64.Or*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit64.Or*
        name: Or
        nameWithType: Bit64.Or
        qualifiedName: NomUtils.Math.Bits.Bit64.Or
      VB:
      - id: NomUtils.Math.Bits.Bit64.Or*
        name: Or
        nameWithType: Bit64.Or
        qualifiedName: NomUtils.Math.Bits.Bit64.Or
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit64.Or
  NomUtils.Math.Bits.Bit64.And*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit64.And*
        name: And
        nameWithType: Bit64.And
        qualifiedName: NomUtils.Math.Bits.Bit64.And
      VB:
      - id: NomUtils.Math.Bits.Bit64.And*
        name: And
        nameWithType: Bit64.And
        qualifiedName: NomUtils.Math.Bits.Bit64.And
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit64.And
  NomUtils.Math.Bits.Bit64.Invert*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit64.Invert*
        name: Invert
        nameWithType: Bit64.Invert
        qualifiedName: NomUtils.Math.Bits.Bit64.Invert
      VB:
      - id: NomUtils.Math.Bits.Bit64.Invert*
        name: Invert
        nameWithType: Bit64.Invert
        qualifiedName: NomUtils.Math.Bits.Bit64.Invert
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit64.Invert
  NomUtils.Math.Bits.Bit64.Xor*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit64.Xor*
        name: Xor
        nameWithType: Bit64.Xor
        qualifiedName: NomUtils.Math.Bits.Bit64.Xor
      VB:
      - id: NomUtils.Math.Bits.Bit64.Xor*
        name: Xor
        nameWithType: Bit64.Xor
        qualifiedName: NomUtils.Math.Bits.Bit64.Xor
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit64.Xor
  NomUtils.Math.Bits.Bit64.ShiftLeft*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit64.ShiftLeft*
        name: ShiftLeft
        nameWithType: Bit64.ShiftLeft
        qualifiedName: NomUtils.Math.Bits.Bit64.ShiftLeft
      VB:
      - id: NomUtils.Math.Bits.Bit64.ShiftLeft*
        name: ShiftLeft
        nameWithType: Bit64.ShiftLeft
        qualifiedName: NomUtils.Math.Bits.Bit64.ShiftLeft
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit64.ShiftLeft
  NomUtils.Math.Bits.Bit64.ShiftRight*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit64.ShiftRight*
        name: ShiftRight
        nameWithType: Bit64.ShiftRight
        qualifiedName: NomUtils.Math.Bits.Bit64.ShiftRight
      VB:
      - id: NomUtils.Math.Bits.Bit64.ShiftRight*
        name: ShiftRight
        nameWithType: Bit64.ShiftRight
        qualifiedName: NomUtils.Math.Bits.Bit64.ShiftRight
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit64.ShiftRight
  NomUtils.Math.Bits.Bit64.Contains*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit64.Contains*
        name: Contains
        nameWithType: Bit64.Contains
        qualifiedName: NomUtils.Math.Bits.Bit64.Contains
      VB:
      - id: NomUtils.Math.Bits.Bit64.Contains*
        name: Contains
        nameWithType: Bit64.Contains
        qualifiedName: NomUtils.Math.Bits.Bit64.Contains
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit64.Contains
  NomUtils.Math.Bits.Bit64.Equals*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit64.Equals*
        name: Equals
        nameWithType: Bit64.Equals
        qualifiedName: NomUtils.Math.Bits.Bit64.Equals
      VB:
      - id: NomUtils.Math.Bits.Bit64.Equals*
        name: Equals
        nameWithType: Bit64.Equals
        qualifiedName: NomUtils.Math.Bits.Bit64.Equals
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit64.Equals
  NomUtils.Math.Bits.Bit64.ToBitString*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit64.ToBitString*
        name: ToBitString
        nameWithType: Bit64.ToBitString
        qualifiedName: NomUtils.Math.Bits.Bit64.ToBitString
      VB:
      - id: NomUtils.Math.Bits.Bit64.ToBitString*
        name: ToBitString
        nameWithType: Bit64.ToBitString
        qualifiedName: NomUtils.Math.Bits.Bit64.ToBitString
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit64.ToBitString
  NomUtils.Math.Bits.Bit64.ToString*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit64.ToString*
        name: ToString
        nameWithType: Bit64.ToString
        qualifiedName: NomUtils.Math.Bits.Bit64.ToString
      VB:
      - id: NomUtils.Math.Bits.Bit64.ToString*
        name: ToString
        nameWithType: Bit64.ToString
        qualifiedName: NomUtils.Math.Bits.Bit64.ToString
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit64.ToString
  NomUtils.Math.Bits.Bit64.op_Implicit*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit64.op_Implicit*
        name: Implicit
        nameWithType: Bit64.Implicit
        qualifiedName: NomUtils.Math.Bits.Bit64.Implicit
      VB:
      - id: NomUtils.Math.Bits.Bit64.op_Implicit*
        name: Widening
        nameWithType: Bit64.Widening
        qualifiedName: NomUtils.Math.Bits.Bit64.Widening
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit64.op_Implicit
  NomUtils.Math.Bits.Bit64:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit64
        name: Bit64
        nameWithType: Bit64
        qualifiedName: NomUtils.Math.Bits.Bit64
      VB:
      - id: NomUtils.Math.Bits.Bit64
        name: Bit64
        nameWithType: Bit64
        qualifiedName: NomUtils.Math.Bits.Bit64
    isDefinition: true
    commentId: T:NomUtils.Math.Bits.Bit64
  NomUtils.Math.Bits.Bit8.#ctor*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit8.#ctor*
        name: Bit8
        nameWithType: Bit8.Bit8
        qualifiedName: NomUtils.Math.Bits.Bit8.Bit8
      VB:
      - id: NomUtils.Math.Bits.Bit8.#ctor*
        name: Bit8
        nameWithType: Bit8.Bit8
        qualifiedName: NomUtils.Math.Bits.Bit8.Bit8
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit8.#ctor
  NomUtils.Math.Bits.Bit8.Clear*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit8.Clear*
        name: Clear
        nameWithType: Bit8.Clear
        qualifiedName: NomUtils.Math.Bits.Bit8.Clear
      VB:
      - id: NomUtils.Math.Bits.Bit8.Clear*
        name: Clear
        nameWithType: Bit8.Clear
        qualifiedName: NomUtils.Math.Bits.Bit8.Clear
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit8.Clear
  NomUtils.Math.Bits.Bit8.Set*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit8.Set*
        name: Set
        nameWithType: Bit8.Set
        qualifiedName: NomUtils.Math.Bits.Bit8.Set
      VB:
      - id: NomUtils.Math.Bits.Bit8.Set*
        name: Set
        nameWithType: Bit8.Set
        qualifiedName: NomUtils.Math.Bits.Bit8.Set
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit8.Set
  NomUtils.Math.Bits.Bit8.Or*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit8.Or*
        name: Or
        nameWithType: Bit8.Or
        qualifiedName: NomUtils.Math.Bits.Bit8.Or
      VB:
      - id: NomUtils.Math.Bits.Bit8.Or*
        name: Or
        nameWithType: Bit8.Or
        qualifiedName: NomUtils.Math.Bits.Bit8.Or
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit8.Or
  NomUtils.Math.Bits.Bit8.And*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit8.And*
        name: And
        nameWithType: Bit8.And
        qualifiedName: NomUtils.Math.Bits.Bit8.And
      VB:
      - id: NomUtils.Math.Bits.Bit8.And*
        name: And
        nameWithType: Bit8.And
        qualifiedName: NomUtils.Math.Bits.Bit8.And
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit8.And
  NomUtils.Math.Bits.Bit8.Invert*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit8.Invert*
        name: Invert
        nameWithType: Bit8.Invert
        qualifiedName: NomUtils.Math.Bits.Bit8.Invert
      VB:
      - id: NomUtils.Math.Bits.Bit8.Invert*
        name: Invert
        nameWithType: Bit8.Invert
        qualifiedName: NomUtils.Math.Bits.Bit8.Invert
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit8.Invert
  NomUtils.Math.Bits.Bit8.Xor*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit8.Xor*
        name: Xor
        nameWithType: Bit8.Xor
        qualifiedName: NomUtils.Math.Bits.Bit8.Xor
      VB:
      - id: NomUtils.Math.Bits.Bit8.Xor*
        name: Xor
        nameWithType: Bit8.Xor
        qualifiedName: NomUtils.Math.Bits.Bit8.Xor
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit8.Xor
  NomUtils.Math.Bits.Bit8.ShiftLeft*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit8.ShiftLeft*
        name: ShiftLeft
        nameWithType: Bit8.ShiftLeft
        qualifiedName: NomUtils.Math.Bits.Bit8.ShiftLeft
      VB:
      - id: NomUtils.Math.Bits.Bit8.ShiftLeft*
        name: ShiftLeft
        nameWithType: Bit8.ShiftLeft
        qualifiedName: NomUtils.Math.Bits.Bit8.ShiftLeft
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit8.ShiftLeft
  NomUtils.Math.Bits.Bit8.ShiftRight*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit8.ShiftRight*
        name: ShiftRight
        nameWithType: Bit8.ShiftRight
        qualifiedName: NomUtils.Math.Bits.Bit8.ShiftRight
      VB:
      - id: NomUtils.Math.Bits.Bit8.ShiftRight*
        name: ShiftRight
        nameWithType: Bit8.ShiftRight
        qualifiedName: NomUtils.Math.Bits.Bit8.ShiftRight
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit8.ShiftRight
  NomUtils.Math.Bits.Bit8.Contains*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit8.Contains*
        name: Contains
        nameWithType: Bit8.Contains
        qualifiedName: NomUtils.Math.Bits.Bit8.Contains
      VB:
      - id: NomUtils.Math.Bits.Bit8.Contains*
        name: Contains
        nameWithType: Bit8.Contains
        qualifiedName: NomUtils.Math.Bits.Bit8.Contains
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit8.Contains
  NomUtils.Math.Bits.Bit8.Equals*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit8.Equals*
        name: Equals
        nameWithType: Bit8.Equals
        qualifiedName: NomUtils.Math.Bits.Bit8.Equals
      VB:
      - id: NomUtils.Math.Bits.Bit8.Equals*
        name: Equals
        nameWithType: Bit8.Equals
        qualifiedName: NomUtils.Math.Bits.Bit8.Equals
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit8.Equals
  NomUtils.Math.Bits.Bit8.ToBitString*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit8.ToBitString*
        name: ToBitString
        nameWithType: Bit8.ToBitString
        qualifiedName: NomUtils.Math.Bits.Bit8.ToBitString
      VB:
      - id: NomUtils.Math.Bits.Bit8.ToBitString*
        name: ToBitString
        nameWithType: Bit8.ToBitString
        qualifiedName: NomUtils.Math.Bits.Bit8.ToBitString
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit8.ToBitString
  NomUtils.Math.Bits.Bit8.ToString*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit8.ToString*
        name: ToString
        nameWithType: Bit8.ToString
        qualifiedName: NomUtils.Math.Bits.Bit8.ToString
      VB:
      - id: NomUtils.Math.Bits.Bit8.ToString*
        name: ToString
        nameWithType: Bit8.ToString
        qualifiedName: NomUtils.Math.Bits.Bit8.ToString
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit8.ToString
  NomUtils.Math.Bits.Bit8.op_Implicit*:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit8.op_Implicit*
        name: Implicit
        nameWithType: Bit8.Implicit
        qualifiedName: NomUtils.Math.Bits.Bit8.Implicit
      VB:
      - id: NomUtils.Math.Bits.Bit8.op_Implicit*
        name: Widening
        nameWithType: Bit8.Widening
        qualifiedName: NomUtils.Math.Bits.Bit8.Widening
    isDefinition: true
    commentId: Overload:NomUtils.Math.Bits.Bit8.op_Implicit
  NomUtils.Math.Bits.Bit8:
    name:
      CSharp:
      - id: NomUtils.Math.Bits.Bit8
        name: Bit8
        nameWithType: Bit8
        qualifiedName: NomUtils.Math.Bits.Bit8
      VB:
      - id: NomUtils.Math.Bits.Bit8
        name: Bit8
        nameWithType: Bit8
        qualifiedName: NomUtils.Math.Bits.Bit8
    isDefinition: true
    commentId: T:NomUtils.Math.Bits.Bit8
  NomUtils.Math.Bits:
    name:
      CSharp:
      - name: NomUtils.Math.Bits
        nameWithType: NomUtils.Math.Bits
        qualifiedName: NomUtils.Math.Bits
      VB:
      - name: NomUtils.Math.Bits
        nameWithType: NomUtils.Math.Bits
        qualifiedName: NomUtils.Math.Bits
    isDefinition: true
    commentId: N:NomUtils.Math.Bits
  NomUtils.Math.Curves.BezierCubic.SamplePoint*:
    name:
      CSharp:
      - id: NomUtils.Math.Curves.BezierCubic.SamplePoint*
        name: SamplePoint
        nameWithType: BezierCubic.SamplePoint
        qualifiedName: NomUtils.Math.Curves.BezierCubic.SamplePoint
      VB:
      - id: NomUtils.Math.Curves.BezierCubic.SamplePoint*
        name: SamplePoint
        nameWithType: BezierCubic.SamplePoint
        qualifiedName: NomUtils.Math.Curves.BezierCubic.SamplePoint
    isDefinition: true
    commentId: Overload:NomUtils.Math.Curves.BezierCubic.SamplePoint
  NomUtils.Math.Curves.BezierCubic.SamplePointExplicit*:
    name:
      CSharp:
      - id: NomUtils.Math.Curves.BezierCubic.SamplePointExplicit*
        name: SamplePointExplicit
        nameWithType: BezierCubic.SamplePointExplicit
        qualifiedName: NomUtils.Math.Curves.BezierCubic.SamplePointExplicit
      VB:
      - id: NomUtils.Math.Curves.BezierCubic.SamplePointExplicit*
        name: SamplePointExplicit
        nameWithType: BezierCubic.SamplePointExplicit
        qualifiedName: NomUtils.Math.Curves.BezierCubic.SamplePointExplicit
    isDefinition: true
    commentId: Overload:NomUtils.Math.Curves.BezierCubic.SamplePointExplicit
  NomUtils.Math.Curves.BezierCubic.SampleTangent*:
    name:
      CSharp:
      - id: NomUtils.Math.Curves.BezierCubic.SampleTangent*
        name: SampleTangent
        nameWithType: BezierCubic.SampleTangent
        qualifiedName: NomUtils.Math.Curves.BezierCubic.SampleTangent
      VB:
      - id: NomUtils.Math.Curves.BezierCubic.SampleTangent*
        name: SampleTangent
        nameWithType: BezierCubic.SampleTangent
        qualifiedName: NomUtils.Math.Curves.BezierCubic.SampleTangent
    isDefinition: true
    commentId: Overload:NomUtils.Math.Curves.BezierCubic.SampleTangent
  NomUtils.Math.Curves.BezierCubic.SampleVelocity*:
    name:
      CSharp:
      - id: NomUtils.Math.Curves.BezierCubic.SampleVelocity*
        name: SampleVelocity
        nameWithType: BezierCubic.SampleVelocity
        qualifiedName: NomUtils.Math.Curves.BezierCubic.SampleVelocity
      VB:
      - id: NomUtils.Math.Curves.BezierCubic.SampleVelocity*
        name: SampleVelocity
        nameWithType: BezierCubic.SampleVelocity
        qualifiedName: NomUtils.Math.Curves.BezierCubic.SampleVelocity
    isDefinition: true
    commentId: Overload:NomUtils.Math.Curves.BezierCubic.SampleVelocity
  NomUtils.Math.Curves.BezierCubic:
    name:
      CSharp:
      - id: NomUtils.Math.Curves.BezierCubic
        name: BezierCubic
        nameWithType: BezierCubic
        qualifiedName: NomUtils.Math.Curves.BezierCubic
      VB:
      - id: NomUtils.Math.Curves.BezierCubic
        name: BezierCubic
        nameWithType: BezierCubic
        qualifiedName: NomUtils.Math.Curves.BezierCubic
    isDefinition: true
    commentId: T:NomUtils.Math.Curves.BezierCubic
  NomUtils.Math.Curves.BezierLinear.SamplePoint*:
    name:
      CSharp:
      - id: NomUtils.Math.Curves.BezierLinear.SamplePoint*
        name: SamplePoint
        nameWithType: BezierLinear.SamplePoint
        qualifiedName: NomUtils.Math.Curves.BezierLinear.SamplePoint
      VB:
      - id: NomUtils.Math.Curves.BezierLinear.SamplePoint*
        name: SamplePoint
        nameWithType: BezierLinear.SamplePoint
        qualifiedName: NomUtils.Math.Curves.BezierLinear.SamplePoint
    isDefinition: true
    commentId: Overload:NomUtils.Math.Curves.BezierLinear.SamplePoint
  NomUtils.Math.Curves.BezierLinear:
    name:
      CSharp:
      - id: NomUtils.Math.Curves.BezierLinear
        name: BezierLinear
        nameWithType: BezierLinear
        qualifiedName: NomUtils.Math.Curves.BezierLinear
      VB:
      - id: NomUtils.Math.Curves.BezierLinear
        name: BezierLinear
        nameWithType: BezierLinear
        qualifiedName: NomUtils.Math.Curves.BezierLinear
    isDefinition: true
    commentId: T:NomUtils.Math.Curves.BezierLinear
  NomUtils.Math.Curves.BezierQuadratic.SamplePoint*:
    name:
      CSharp:
      - id: NomUtils.Math.Curves.BezierQuadratic.SamplePoint*
        name: SamplePoint
        nameWithType: BezierQuadratic.SamplePoint
        qualifiedName: NomUtils.Math.Curves.BezierQuadratic.SamplePoint
      VB:
      - id: NomUtils.Math.Curves.BezierQuadratic.SamplePoint*
        name: SamplePoint
        nameWithType: BezierQuadratic.SamplePoint
        qualifiedName: NomUtils.Math.Curves.BezierQuadratic.SamplePoint
    isDefinition: true
    commentId: Overload:NomUtils.Math.Curves.BezierQuadratic.SamplePoint
  NomUtils.Math.Curves.BezierQuadratic.SampleTangent*:
    name:
      CSharp:
      - id: NomUtils.Math.Curves.BezierQuadratic.SampleTangent*
        name: SampleTangent
        nameWithType: BezierQuadratic.SampleTangent
        qualifiedName: NomUtils.Math.Curves.BezierQuadratic.SampleTangent
      VB:
      - id: NomUtils.Math.Curves.BezierQuadratic.SampleTangent*
        name: SampleTangent
        nameWithType: BezierQuadratic.SampleTangent
        qualifiedName: NomUtils.Math.Curves.BezierQuadratic.SampleTangent
    isDefinition: true
    commentId: Overload:NomUtils.Math.Curves.BezierQuadratic.SampleTangent
  NomUtils.Math.Curves.BezierQuadratic.SampleVelocity*:
    name:
      CSharp:
      - id: NomUtils.Math.Curves.BezierQuadratic.SampleVelocity*
        name: SampleVelocity
        nameWithType: BezierQuadratic.SampleVelocity
        qualifiedName: NomUtils.Math.Curves.BezierQuadratic.SampleVelocity
      VB:
      - id: NomUtils.Math.Curves.BezierQuadratic.SampleVelocity*
        name: SampleVelocity
        nameWithType: BezierQuadratic.SampleVelocity
        qualifiedName: NomUtils.Math.Curves.BezierQuadratic.SampleVelocity
    isDefinition: true
    commentId: Overload:NomUtils.Math.Curves.BezierQuadratic.SampleVelocity
  NomUtils.Math.Curves.BezierQuadratic:
    name:
      CSharp:
      - id: NomUtils.Math.Curves.BezierQuadratic
        name: BezierQuadratic
        nameWithType: BezierQuadratic
        qualifiedName: NomUtils.Math.Curves.BezierQuadratic
      VB:
      - id: NomUtils.Math.Curves.BezierQuadratic
        name: BezierQuadratic
        nameWithType: BezierQuadratic
        qualifiedName: NomUtils.Math.Curves.BezierQuadratic
    isDefinition: true
    commentId: T:NomUtils.Math.Curves.BezierQuadratic
  NomUtils.Math.Curves:
    name:
      CSharp:
      - name: NomUtils.Math.Curves
        nameWithType: NomUtils.Math.Curves
        qualifiedName: NomUtils.Math.Curves
      VB:
      - name: NomUtils.Math.Curves
        nameWithType: NomUtils.Math.Curves
        qualifiedName: NomUtils.Math.Curves
    isDefinition: true
    commentId: N:NomUtils.Math.Curves
  NomUtils.Math.Shapes.Circle.RandomPointInCircleDeg*:
    name:
      CSharp:
      - id: NomUtils.Math.Shapes.Circle.RandomPointInCircleDeg*
        name: RandomPointInCircleDeg
        nameWithType: Circle.RandomPointInCircleDeg
        qualifiedName: NomUtils.Math.Shapes.Circle.RandomPointInCircleDeg
      VB:
      - id: NomUtils.Math.Shapes.Circle.RandomPointInCircleDeg*
        name: RandomPointInCircleDeg
        nameWithType: Circle.RandomPointInCircleDeg
        qualifiedName: NomUtils.Math.Shapes.Circle.RandomPointInCircleDeg
    isDefinition: true
    commentId: Overload:NomUtils.Math.Shapes.Circle.RandomPointInCircleDeg
  NomUtils.Math.Shapes.Circle.RandomPointInCircleRad*:
    name:
      CSharp:
      - id: NomUtils.Math.Shapes.Circle.RandomPointInCircleRad*
        name: RandomPointInCircleRad
        nameWithType: Circle.RandomPointInCircleRad
        qualifiedName: NomUtils.Math.Shapes.Circle.RandomPointInCircleRad
      VB:
      - id: NomUtils.Math.Shapes.Circle.RandomPointInCircleRad*
        name: RandomPointInCircleRad
        nameWithType: Circle.RandomPointInCircleRad
        qualifiedName: NomUtils.Math.Shapes.Circle.RandomPointInCircleRad
    isDefinition: true
    commentId: Overload:NomUtils.Math.Shapes.Circle.RandomPointInCircleRad
  NomUtils.Math.Shapes.Circle.IntersectsCircle*:
    name:
      CSharp:
      - id: NomUtils.Math.Shapes.Circle.IntersectsCircle*
        name: IntersectsCircle
        nameWithType: Circle.IntersectsCircle
        qualifiedName: NomUtils.Math.Shapes.Circle.IntersectsCircle
      VB:
      - id: NomUtils.Math.Shapes.Circle.IntersectsCircle*
        name: IntersectsCircle
        nameWithType: Circle.IntersectsCircle
        qualifiedName: NomUtils.Math.Shapes.Circle.IntersectsCircle
    isDefinition: true
    commentId: Overload:NomUtils.Math.Shapes.Circle.IntersectsCircle
  NomUtils.Math.Shapes.Circle.IntersectsSquare*:
    name:
      CSharp:
      - id: NomUtils.Math.Shapes.Circle.IntersectsSquare*
        name: IntersectsSquare
        nameWithType: Circle.IntersectsSquare
        qualifiedName: NomUtils.Math.Shapes.Circle.IntersectsSquare
      VB:
      - id: NomUtils.Math.Shapes.Circle.IntersectsSquare*
        name: IntersectsSquare
        nameWithType: Circle.IntersectsSquare
        qualifiedName: NomUtils.Math.Shapes.Circle.IntersectsSquare
    isDefinition: true
    commentId: Overload:NomUtils.Math.Shapes.Circle.IntersectsSquare
  NomUtils.Math.Shapes.Circle.IntersectsTriangle*:
    name:
      CSharp:
      - id: NomUtils.Math.Shapes.Circle.IntersectsTriangle*
        name: IntersectsTriangle
        nameWithType: Circle.IntersectsTriangle
        qualifiedName: NomUtils.Math.Shapes.Circle.IntersectsTriangle
      VB:
      - id: NomUtils.Math.Shapes.Circle.IntersectsTriangle*
        name: IntersectsTriangle
        nameWithType: Circle.IntersectsTriangle
        qualifiedName: NomUtils.Math.Shapes.Circle.IntersectsTriangle
    isDefinition: true
    commentId: Overload:NomUtils.Math.Shapes.Circle.IntersectsTriangle
  NomUtils.Math.Shapes.Circle:
    name:
      CSharp:
      - id: NomUtils.Math.Shapes.Circle
        name: Circle
        nameWithType: Circle
        qualifiedName: NomUtils.Math.Shapes.Circle
      VB:
      - id: NomUtils.Math.Shapes.Circle
        name: Circle
        nameWithType: Circle
        qualifiedName: NomUtils.Math.Shapes.Circle
    isDefinition: true
    commentId: T:NomUtils.Math.Shapes.Circle
  NomUtils.Math.Shapes.Square.IntersectsPoint*:
    name:
      CSharp:
      - id: NomUtils.Math.Shapes.Square.IntersectsPoint*
        name: IntersectsPoint
        nameWithType: Square.IntersectsPoint
        qualifiedName: NomUtils.Math.Shapes.Square.IntersectsPoint
      VB:
      - id: NomUtils.Math.Shapes.Square.IntersectsPoint*
        name: IntersectsPoint
        nameWithType: Square.IntersectsPoint
        qualifiedName: NomUtils.Math.Shapes.Square.IntersectsPoint
    isDefinition: true
    commentId: Overload:NomUtils.Math.Shapes.Square.IntersectsPoint
  NomUtils.Math.Shapes.Square.IntersectsSquare*:
    name:
      CSharp:
      - id: NomUtils.Math.Shapes.Square.IntersectsSquare*
        name: IntersectsSquare
        nameWithType: Square.IntersectsSquare
        qualifiedName: NomUtils.Math.Shapes.Square.IntersectsSquare
      VB:
      - id: NomUtils.Math.Shapes.Square.IntersectsSquare*
        name: IntersectsSquare
        nameWithType: Square.IntersectsSquare
        qualifiedName: NomUtils.Math.Shapes.Square.IntersectsSquare
    isDefinition: true
    commentId: Overload:NomUtils.Math.Shapes.Square.IntersectsSquare
  NomUtils.Math.Shapes.Square:
    name:
      CSharp:
      - id: NomUtils.Math.Shapes.Square
        name: Square
        nameWithType: Square
        qualifiedName: NomUtils.Math.Shapes.Square
      VB:
      - id: NomUtils.Math.Shapes.Square
        name: Square
        nameWithType: Square
        qualifiedName: NomUtils.Math.Shapes.Square
    isDefinition: true
    commentId: T:NomUtils.Math.Shapes.Square
  NomUtils.Math.Shapes.Triangle.GetTopPoint*:
    name:
      CSharp:
      - id: NomUtils.Math.Shapes.Triangle.GetTopPoint*
        name: GetTopPoint
        nameWithType: Triangle.GetTopPoint
        qualifiedName: NomUtils.Math.Shapes.Triangle.GetTopPoint
      VB:
      - id: NomUtils.Math.Shapes.Triangle.GetTopPoint*
        name: GetTopPoint
        nameWithType: Triangle.GetTopPoint
        qualifiedName: NomUtils.Math.Shapes.Triangle.GetTopPoint
    isDefinition: true
    commentId: Overload:NomUtils.Math.Shapes.Triangle.GetTopPoint
  NomUtils.Math.Shapes.Triangle.GetBottomRightPoint*:
    name:
      CSharp:
      - id: NomUtils.Math.Shapes.Triangle.GetBottomRightPoint*
        name: GetBottomRightPoint
        nameWithType: Triangle.GetBottomRightPoint
        qualifiedName: NomUtils.Math.Shapes.Triangle.GetBottomRightPoint
      VB:
      - id: NomUtils.Math.Shapes.Triangle.GetBottomRightPoint*
        name: GetBottomRightPoint
        nameWithType: Triangle.GetBottomRightPoint
        qualifiedName: NomUtils.Math.Shapes.Triangle.GetBottomRightPoint
    isDefinition: true
    commentId: Overload:NomUtils.Math.Shapes.Triangle.GetBottomRightPoint
  NomUtils.Math.Shapes.Triangle.GetBottomLeftPoint*:
    name:
      CSharp:
      - id: NomUtils.Math.Shapes.Triangle.GetBottomLeftPoint*
        name: GetBottomLeftPoint
        nameWithType: Triangle.GetBottomLeftPoint
        qualifiedName: NomUtils.Math.Shapes.Triangle.GetBottomLeftPoint
      VB:
      - id: NomUtils.Math.Shapes.Triangle.GetBottomLeftPoint*
        name: GetBottomLeftPoint
        nameWithType: Triangle.GetBottomLeftPoint
        qualifiedName: NomUtils.Math.Shapes.Triangle.GetBottomLeftPoint
    isDefinition: true
    commentId: Overload:NomUtils.Math.Shapes.Triangle.GetBottomLeftPoint
  NomUtils.Math.Shapes.Triangle.GetHypotenuse*:
    name:
      CSharp:
      - id: NomUtils.Math.Shapes.Triangle.GetHypotenuse*
        name: GetHypotenuse
        nameWithType: Triangle.GetHypotenuse
        qualifiedName: NomUtils.Math.Shapes.Triangle.GetHypotenuse
      VB:
      - id: NomUtils.Math.Shapes.Triangle.GetHypotenuse*
        name: GetHypotenuse
        nameWithType: Triangle.GetHypotenuse
        qualifiedName: NomUtils.Math.Shapes.Triangle.GetHypotenuse
    isDefinition: true
    commentId: Overload:NomUtils.Math.Shapes.Triangle.GetHypotenuse
  NomUtils.Math.Shapes.Triangle.GetAngle*:
    name:
      CSharp:
      - id: NomUtils.Math.Shapes.Triangle.GetAngle*
        name: GetAngle
        nameWithType: Triangle.GetAngle
        qualifiedName: NomUtils.Math.Shapes.Triangle.GetAngle
      VB:
      - id: NomUtils.Math.Shapes.Triangle.GetAngle*
        name: GetAngle
        nameWithType: Triangle.GetAngle
        qualifiedName: NomUtils.Math.Shapes.Triangle.GetAngle
    isDefinition: true
    commentId: Overload:NomUtils.Math.Shapes.Triangle.GetAngle
  NomUtils.Math.Shapes.Triangle.IntersectsPoint*:
    name:
      CSharp:
      - id: NomUtils.Math.Shapes.Triangle.IntersectsPoint*
        name: IntersectsPoint
        nameWithType: Triangle.IntersectsPoint
        qualifiedName: NomUtils.Math.Shapes.Triangle.IntersectsPoint
      VB:
      - id: NomUtils.Math.Shapes.Triangle.IntersectsPoint*
        name: IntersectsPoint
        nameWithType: Triangle.IntersectsPoint
        qualifiedName: NomUtils.Math.Shapes.Triangle.IntersectsPoint
    isDefinition: true
    commentId: Overload:NomUtils.Math.Shapes.Triangle.IntersectsPoint
  NomUtils.Math.Shapes.Triangle:
    name:
      CSharp:
      - id: NomUtils.Math.Shapes.Triangle
        name: Triangle
        nameWithType: Triangle
        qualifiedName: NomUtils.Math.Shapes.Triangle
      VB:
      - id: NomUtils.Math.Shapes.Triangle
        name: Triangle
        nameWithType: Triangle
        qualifiedName: NomUtils.Math.Shapes.Triangle
    isDefinition: true
    commentId: T:NomUtils.Math.Shapes.Triangle
  NomUtils.Math.Shapes:
    name:
      CSharp:
      - name: NomUtils.Math.Shapes
        nameWithType: NomUtils.Math.Shapes
        qualifiedName: NomUtils.Math.Shapes
      VB:
      - name: NomUtils.Math.Shapes
        nameWithType: NomUtils.Math.Shapes
        qualifiedName: NomUtils.Math.Shapes
    isDefinition: true
    commentId: N:NomUtils.Math.Shapes
  Global.Vector2[]:
    name:
      CSharp:
      - id: Global.Vector2
        name: Vector2
        nameWithType: Vector2
        qualifiedName: Vector2
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Global.Vector2
        name: Vector2
        nameWithType: Vector2
        qualifiedName: Vector2
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  NomUtils.Math.Splines.CatmulRomSpline.SamplePoint*:
    name:
      CSharp:
      - id: NomUtils.Math.Splines.CatmulRomSpline.SamplePoint*
        name: SamplePoint
        nameWithType: CatmulRomSpline.SamplePoint
        qualifiedName: NomUtils.Math.Splines.CatmulRomSpline.SamplePoint
      VB:
      - id: NomUtils.Math.Splines.CatmulRomSpline.SamplePoint*
        name: SamplePoint
        nameWithType: CatmulRomSpline.SamplePoint
        qualifiedName: NomUtils.Math.Splines.CatmulRomSpline.SamplePoint
    isDefinition: true
    commentId: Overload:NomUtils.Math.Splines.CatmulRomSpline.SamplePoint
  NomUtils.Math.Splines.CatmulRomSpline:
    name:
      CSharp:
      - id: NomUtils.Math.Splines.CatmulRomSpline
        name: CatmulRomSpline
        nameWithType: CatmulRomSpline
        qualifiedName: NomUtils.Math.Splines.CatmulRomSpline
      VB:
      - id: NomUtils.Math.Splines.CatmulRomSpline
        name: CatmulRomSpline
        nameWithType: CatmulRomSpline
        qualifiedName: NomUtils.Math.Splines.CatmulRomSpline
    isDefinition: true
    commentId: T:NomUtils.Math.Splines.CatmulRomSpline
  NomUtils.Math.Splines:
    name:
      CSharp:
      - name: NomUtils.Math.Splines
        nameWithType: NomUtils.Math.Splines
        qualifiedName: NomUtils.Math.Splines
      VB:
      - name: NomUtils.Math.Splines
        nameWithType: NomUtils.Math.Splines
        qualifiedName: NomUtils.Math.Splines
    isDefinition: true
    commentId: N:NomUtils.Math.Splines
  NomUtils.Unity.AudioUtility.IndexToFrequency*:
    name:
      CSharp:
      - id: NomUtils.Unity.AudioUtility.IndexToFrequency*
        name: IndexToFrequency
        nameWithType: AudioUtility.IndexToFrequency
        qualifiedName: NomUtils.Unity.AudioUtility.IndexToFrequency
      VB:
      - id: NomUtils.Unity.AudioUtility.IndexToFrequency*
        name: IndexToFrequency
        nameWithType: AudioUtility.IndexToFrequency
        qualifiedName: NomUtils.Unity.AudioUtility.IndexToFrequency
    isDefinition: true
    commentId: Overload:NomUtils.Unity.AudioUtility.IndexToFrequency
  NomUtils.Unity.AudioUtility.FrequencyToIndex*:
    name:
      CSharp:
      - id: NomUtils.Unity.AudioUtility.FrequencyToIndex*
        name: FrequencyToIndex
        nameWithType: AudioUtility.FrequencyToIndex
        qualifiedName: NomUtils.Unity.AudioUtility.FrequencyToIndex
      VB:
      - id: NomUtils.Unity.AudioUtility.FrequencyToIndex*
        name: FrequencyToIndex
        nameWithType: AudioUtility.FrequencyToIndex
        qualifiedName: NomUtils.Unity.AudioUtility.FrequencyToIndex
    isDefinition: true
    commentId: Overload:NomUtils.Unity.AudioUtility.FrequencyToIndex
  System.UInt32:
    name:
      CSharp:
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      VB:
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.UInt32
  NomUtils.Unity.AudioUtility.GenerateHertzRange*:
    name:
      CSharp:
      - id: NomUtils.Unity.AudioUtility.GenerateHertzRange*
        name: GenerateHertzRange
        nameWithType: AudioUtility.GenerateHertzRange
        qualifiedName: NomUtils.Unity.AudioUtility.GenerateHertzRange
      VB:
      - id: NomUtils.Unity.AudioUtility.GenerateHertzRange*
        name: GenerateHertzRange
        nameWithType: AudioUtility.GenerateHertzRange
        qualifiedName: NomUtils.Unity.AudioUtility.GenerateHertzRange
    isDefinition: true
    commentId: Overload:NomUtils.Unity.AudioUtility.GenerateHertzRange
  NomUtils.Unity.AudioUtility.GenerateHertzRangeNonAlloc*:
    name:
      CSharp:
      - id: NomUtils.Unity.AudioUtility.GenerateHertzRangeNonAlloc*
        name: GenerateHertzRangeNonAlloc
        nameWithType: AudioUtility.GenerateHertzRangeNonAlloc
        qualifiedName: NomUtils.Unity.AudioUtility.GenerateHertzRangeNonAlloc
      VB:
      - id: NomUtils.Unity.AudioUtility.GenerateHertzRangeNonAlloc*
        name: GenerateHertzRangeNonAlloc
        nameWithType: AudioUtility.GenerateHertzRangeNonAlloc
        qualifiedName: NomUtils.Unity.AudioUtility.GenerateHertzRangeNonAlloc
    isDefinition: true
    commentId: Overload:NomUtils.Unity.AudioUtility.GenerateHertzRangeNonAlloc
  NomUtils.Unity.AudioUtility:
    name:
      CSharp:
      - id: NomUtils.Unity.AudioUtility
        name: AudioUtility
        nameWithType: AudioUtility
        qualifiedName: NomUtils.Unity.AudioUtility
      VB:
      - id: NomUtils.Unity.AudioUtility
        name: AudioUtility
        nameWithType: AudioUtility
        qualifiedName: NomUtils.Unity.AudioUtility
    isDefinition: true
    commentId: T:NomUtils.Unity.AudioUtility
  Global.LayerMask:
    name:
      CSharp:
      - id: Global.LayerMask
        name: LayerMask
        nameWithType: LayerMask
        qualifiedName: LayerMask
        isExternal: true
      VB:
      - id: Global.LayerMask
        name: LayerMask
        nameWithType: LayerMask
        qualifiedName: LayerMask
        isExternal: true
    isDefinition: true
    commentId: '!:Global.LayerMask'
  NomUtils.Unity.LayerMaskUtility.GetIndex*:
    name:
      CSharp:
      - id: NomUtils.Unity.LayerMaskUtility.GetIndex*
        name: GetIndex
        nameWithType: LayerMaskUtility.GetIndex
        qualifiedName: NomUtils.Unity.LayerMaskUtility.GetIndex
      VB:
      - id: NomUtils.Unity.LayerMaskUtility.GetIndex*
        name: GetIndex
        nameWithType: LayerMaskUtility.GetIndex
        qualifiedName: NomUtils.Unity.LayerMaskUtility.GetIndex
    isDefinition: true
    commentId: Overload:NomUtils.Unity.LayerMaskUtility.GetIndex
  NomUtils.Unity.LayerMaskUtility:
    name:
      CSharp:
      - id: NomUtils.Unity.LayerMaskUtility
        name: LayerMaskUtility
        nameWithType: LayerMaskUtility
        qualifiedName: NomUtils.Unity.LayerMaskUtility
      VB:
      - id: NomUtils.Unity.LayerMaskUtility
        name: LayerMaskUtility
        nameWithType: LayerMaskUtility
        qualifiedName: NomUtils.Unity.LayerMaskUtility
    isDefinition: true
    commentId: T:NomUtils.Unity.LayerMaskUtility
  NomUtils.Unity.MainThread.OnGameLoad*:
    name:
      CSharp:
      - id: NomUtils.Unity.MainThread.OnGameLoad*
        name: OnGameLoad
        nameWithType: MainThread.OnGameLoad
        qualifiedName: NomUtils.Unity.MainThread.OnGameLoad
      VB:
      - id: NomUtils.Unity.MainThread.OnGameLoad*
        name: OnGameLoad
        nameWithType: MainThread.OnGameLoad
        qualifiedName: NomUtils.Unity.MainThread.OnGameLoad
    isDefinition: true
    commentId: Overload:NomUtils.Unity.MainThread.OnGameLoad
  Global.Action:
    name:
      CSharp:
      - id: Global.Action
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      VB:
      - id: Global.Action
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
    isDefinition: true
    commentId: '!:Global.Action'
  NomUtils.Unity.MainThread.QueueTask*:
    name:
      CSharp:
      - id: NomUtils.Unity.MainThread.QueueTask*
        name: QueueTask
        nameWithType: MainThread.QueueTask
        qualifiedName: NomUtils.Unity.MainThread.QueueTask
      VB:
      - id: NomUtils.Unity.MainThread.QueueTask*
        name: QueueTask
        nameWithType: MainThread.QueueTask
        qualifiedName: NomUtils.Unity.MainThread.QueueTask
    isDefinition: true
    commentId: Overload:NomUtils.Unity.MainThread.QueueTask
  Global.IEnumerator:
    name:
      CSharp:
      - id: Global.IEnumerator
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: IEnumerator
        isExternal: true
      VB:
      - id: Global.IEnumerator
        name: IEnumerator
        nameWithType: IEnumerator
        qualifiedName: IEnumerator
        isExternal: true
    isDefinition: true
    commentId: '!:Global.IEnumerator'
  NomUtils.Unity.MainThread.QueueCoroutine*:
    name:
      CSharp:
      - id: NomUtils.Unity.MainThread.QueueCoroutine*
        name: QueueCoroutine
        nameWithType: MainThread.QueueCoroutine
        qualifiedName: NomUtils.Unity.MainThread.QueueCoroutine
      VB:
      - id: NomUtils.Unity.MainThread.QueueCoroutine*
        name: QueueCoroutine
        nameWithType: MainThread.QueueCoroutine
        qualifiedName: NomUtils.Unity.MainThread.QueueCoroutine
    isDefinition: true
    commentId: Overload:NomUtils.Unity.MainThread.QueueCoroutine
  NomUtils.Unity.MainThread:
    name:
      CSharp:
      - id: NomUtils.Unity.MainThread
        name: MainThread
        nameWithType: MainThread
        qualifiedName: NomUtils.Unity.MainThread
      VB:
      - id: NomUtils.Unity.MainThread
        name: MainThread
        nameWithType: MainThread
        qualifiedName: NomUtils.Unity.MainThread
    isDefinition: true
    commentId: T:NomUtils.Unity.MainThread
  Global.Texture2D:
    name:
      CSharp:
      - id: Global.Texture2D
        name: Texture2D
        nameWithType: Texture2D
        qualifiedName: Texture2D
        isExternal: true
      VB:
      - id: Global.Texture2D
        name: Texture2D
        nameWithType: Texture2D
        qualifiedName: Texture2D
        isExternal: true
    isDefinition: true
  Global.Gradient:
    name:
      CSharp:
      - id: Global.Gradient
        name: Gradient
        nameWithType: Gradient
        qualifiedName: Gradient
        isExternal: true
      VB:
      - id: Global.Gradient
        name: Gradient
        nameWithType: Gradient
        qualifiedName: Gradient
        isExternal: true
    isDefinition: true
    commentId: '!:Global.Gradient'
  NomUtils.Unity.TextureUtility.GenerateGradientTexture*:
    name:
      CSharp:
      - id: NomUtils.Unity.TextureUtility.GenerateGradientTexture*
        name: GenerateGradientTexture
        nameWithType: TextureUtility.GenerateGradientTexture
        qualifiedName: NomUtils.Unity.TextureUtility.GenerateGradientTexture
      VB:
      - id: NomUtils.Unity.TextureUtility.GenerateGradientTexture*
        name: GenerateGradientTexture
        nameWithType: TextureUtility.GenerateGradientTexture
        qualifiedName: NomUtils.Unity.TextureUtility.GenerateGradientTexture
    isDefinition: true
    commentId: Overload:NomUtils.Unity.TextureUtility.GenerateGradientTexture
  Global.AnimationCurve:
    name:
      CSharp:
      - id: Global.AnimationCurve
        name: AnimationCurve
        nameWithType: AnimationCurve
        qualifiedName: AnimationCurve
        isExternal: true
      VB:
      - id: Global.AnimationCurve
        name: AnimationCurve
        nameWithType: AnimationCurve
        qualifiedName: AnimationCurve
        isExternal: true
    isDefinition: true
    commentId: '!:Global.AnimationCurve'
  NomUtils.Unity.TextureUtility.GenerateCurveTexture*:
    name:
      CSharp:
      - id: NomUtils.Unity.TextureUtility.GenerateCurveTexture*
        name: GenerateCurveTexture
        nameWithType: TextureUtility.GenerateCurveTexture
        qualifiedName: NomUtils.Unity.TextureUtility.GenerateCurveTexture
      VB:
      - id: NomUtils.Unity.TextureUtility.GenerateCurveTexture*
        name: GenerateCurveTexture
        nameWithType: TextureUtility.GenerateCurveTexture
        qualifiedName: NomUtils.Unity.TextureUtility.GenerateCurveTexture
    isDefinition: true
    commentId: Overload:NomUtils.Unity.TextureUtility.GenerateCurveTexture
  Global.List`1:
    name:
      CSharp:
      - id: Global.List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: '!:Global.List`1'
  Global.List{AnimationCurve}:
    name:
      CSharp:
      - id: Global.List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.AnimationCurve
        name: AnimationCurve
        nameWithType: AnimationCurve
        qualifiedName: AnimationCurve
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.AnimationCurve
        name: AnimationCurve
        nameWithType: AnimationCurve
        qualifiedName: AnimationCurve
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.List`1
    commentId: '!:Global.List{AnimationCurve}'
  NomUtils.Unity.TextureUtility:
    name:
      CSharp:
      - id: NomUtils.Unity.TextureUtility
        name: TextureUtility
        nameWithType: TextureUtility
        qualifiedName: NomUtils.Unity.TextureUtility
      VB:
      - id: NomUtils.Unity.TextureUtility
        name: TextureUtility
        nameWithType: TextureUtility
        qualifiedName: NomUtils.Unity.TextureUtility
    isDefinition: true
    commentId: T:NomUtils.Unity.TextureUtility
  Global.Transform:
    name:
      CSharp:
      - id: Global.Transform
        name: Transform
        nameWithType: Transform
        qualifiedName: Transform
        isExternal: true
      VB:
      - id: Global.Transform
        name: Transform
        nameWithType: Transform
        qualifiedName: Transform
        isExternal: true
    isDefinition: true
  NomUtils.Unity.TransformUtility.CleanChildren*:
    name:
      CSharp:
      - id: NomUtils.Unity.TransformUtility.CleanChildren*
        name: CleanChildren
        nameWithType: TransformUtility.CleanChildren
        qualifiedName: NomUtils.Unity.TransformUtility.CleanChildren
      VB:
      - id: NomUtils.Unity.TransformUtility.CleanChildren*
        name: CleanChildren
        nameWithType: TransformUtility.CleanChildren
        qualifiedName: NomUtils.Unity.TransformUtility.CleanChildren
    isDefinition: true
    commentId: Overload:NomUtils.Unity.TransformUtility.CleanChildren
  NomUtils.Unity.TransformUtility.CleanChildrenImmediate*:
    name:
      CSharp:
      - id: NomUtils.Unity.TransformUtility.CleanChildrenImmediate*
        name: CleanChildrenImmediate
        nameWithType: TransformUtility.CleanChildrenImmediate
        qualifiedName: NomUtils.Unity.TransformUtility.CleanChildrenImmediate
      VB:
      - id: NomUtils.Unity.TransformUtility.CleanChildrenImmediate*
        name: CleanChildrenImmediate
        nameWithType: TransformUtility.CleanChildrenImmediate
        qualifiedName: NomUtils.Unity.TransformUtility.CleanChildrenImmediate
    isDefinition: true
    commentId: Overload:NomUtils.Unity.TransformUtility.CleanChildrenImmediate
  NomUtils.Unity.TransformUtility:
    name:
      CSharp:
      - id: NomUtils.Unity.TransformUtility
        name: TransformUtility
        nameWithType: TransformUtility
        qualifiedName: NomUtils.Unity.TransformUtility
      VB:
      - id: NomUtils.Unity.TransformUtility
        name: TransformUtility
        nameWithType: TransformUtility
        qualifiedName: NomUtils.Unity.TransformUtility
    isDefinition: true
    commentId: T:NomUtils.Unity.TransformUtility
  NomUtils.Unity:
    name:
      CSharp:
      - name: NomUtils.Unity
        nameWithType: NomUtils.Unity
        qualifiedName: NomUtils.Unity
      VB:
      - name: NomUtils.Unity
        nameWithType: NomUtils.Unity
        qualifiedName: NomUtils.Unity
    isDefinition: true
    commentId: N:NomUtils.Unity
